[
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/eslint.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/lint-by-rule.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/public/embed/plubot.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ChangePassword.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ConfirmPasswordField.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ConfirmPasswordInput.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/EmailVerificationNotice.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ForgotPassword.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/GoogleAuthButton.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/Login.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/LoginBackground.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/LoginFooter.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/LoginForm.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/Logout.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 21,
        "column": 10,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 21,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [480, 484], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [480, 484], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/NewPasswordField.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/PasswordInput.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/PasswordInputField.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ProtectedRoute.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/Register.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/RegisterBackground.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/RegisterFooter.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/RegisterForm.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResendBackground.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResendCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResendVerification.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResetPassword.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResetPasswordEffects.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResetPasswordForm.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/ResetPasswordHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/VerificationActions.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 14,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 14,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [290, 294], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [290, 294], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/VerificationHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/VerificationMessage.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 7,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 7,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [193, 197], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [193, 197], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/auth/useVerification.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/benchmarking/FlowBenchmarkTool.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (99). Maximum allowed is 80.",
        "line": 65,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 172,
        "endColumn": 2
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 111,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 111,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useCallback, Profiler, useRef } from 'react';\nimport { ReactFlowProvider } from 'reactflow';\n\nimport FlowMain from '../onboarding/flow-editor/components/FlowMain';\n\n// Estilos para la herramienta de benchmarking\nconst benchmarkStyles = {\n  container: {\n    height: '100vh',\n    width: '100vw',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  controls: {\n    padding: '10px',\n    backgroundColor: '#2d3748',\n    color: 'white',\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '10px',\n    alignItems: 'center',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    zIndex: 10,\n  },\n  button: {\n    padding: '8px 16px',\n    border: 'none',\n    borderRadius: '4px',\n    backgroundColor: '#4a5568',\n    color: 'white',\n    cursor: 'pointer',\n    fontSize: '14px',\n  },\n  info: { fontWeight: 'bold', marginRight: '15px' },\n  flowContainer: { flex: 1, backgroundColor: '#1a202c' },\n};\n\n/**\n * Genera una grilla de nodos para pruebas de estrés.\n * @param {number} count - El número total de nodos a generar.\n * @returns {{nodes: Array, edges: Array}}\n */\nconst generateGridNodes = (count) => {\n  const nodes = [];\n  const nodeTypes = ['message', 'decision', 'action', 'ai'];\n  const gridWidth = Math.ceil(Math.sqrt(count));\n  const spacing = 400;\n\n  for (let index = 0; index < count; index++) {\n    const x = (index % gridWidth) * spacing;\n    const y = Math.floor(index / gridWidth) * spacing;\n    const type = nodeTypes[index % nodeTypes.length];\n\n    nodes.push({\n      id: `node-${index}`,\n      type,\n      position: { x, y },\n      data: { label: `Nodo ${index + 1}` },\n    });\n  }\n\n  return { nodes, edges: [] };\n};\n\nconst FlowBenchmarkTool = () => {\n  const [flowData, setFlowData] = useState({ nodes: [], edges: [] });\n  const [isFlowVisible, setIsFlowVisible] = useState(true);\n  const benchmarkResults = useRef([]);\n\n  const runGeneration = useCallback((count) => {\n    benchmarkResults.current = [];\n    const newFlow = generateGridNodes(count);\n    setFlowData(newFlow);\n    setIsFlowVisible(true);\n  }, []);\n\n  const handleGenerate = useCallback(\n    (count) => {\n      setIsFlowVisible(false);\n      setTimeout(() => runGeneration(count), 100);\n    },\n    [runGeneration],\n  );\n\n  const handleDownloadResults = () => {\n    const allResults = benchmarkResults.current;\n    const mountResults = allResults.filter(\n      (r) => r.phase === 'mount' && r.nodeCount > 0,\n    );\n\n    if (mountResults.length === 0) {\n      return;\n    }\n\n    const dataString = JSON.stringify(mountResults, undefined, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataString)}`;\n    const exportFileDefaultName = 'flow-benchmark-results.json';\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    document.body.append(linkElement);\n    linkElement.click();\n    linkElement.remove();\n  };\n\n  const onRenderCallback = (\n    id,\n    phase,\n    actualDuration,\n    baseDuration /* startTime */ /* commitTime */,\n  ) => {\n    const nodeCount = Number.parseInt(id.split('-')[1], 10) || 0;\n\n    const renderData = {\n      profilerId: id,\n      nodeCount,\n      phase,\n      renderDuration_ms: Number.parseFloat(actualDuration.toFixed(2)),\n      baseDuration_ms: Number.parseFloat(baseDuration.toFixed(2)),\n      timestamp: new Date().toISOString(),\n    };\n\n    benchmarkResults.current.push(renderData);\n  };\n\n  return (\n    <div style={benchmarkStyles.container}>\n      <div style={benchmarkStyles.controls}>\n        <span style={benchmarkStyles.info}>Herramienta de Benchmark</span>\n        <button\n          style={benchmarkStyles.button}\n          onClick={() => handleGenerate(200)}\n        >\n          Generar 200 Nodos\n        </button>\n        <button\n          style={benchmarkStyles.button}\n          onClick={() => handleGenerate(500)}\n        >\n          Generar 500 Nodos\n        </button>\n        <button\n          style={benchmarkStyles.button}\n          onClick={() => handleGenerate(1000)}\n        >\n          Generar 1000 Nodos\n        </button>\n        <button style={benchmarkStyles.button} onClick={handleDownloadResults}>\n          Descargar Resultados\n        </button>\n        <span style={benchmarkStyles.info}>\n          Nodos Actuales: {flowData.nodes.length}\n        </span>\n        <span style={benchmarkStyles.info}>\n          (La recolección de métricas se realiza en segundo plano)\n        </span>\n      </div>\n      <div style={benchmarkStyles.flowContainer}>\n        {isFlowVisible && (\n          <Profiler\n            id={`FlowMainBenchmark-${flowData.nodes.length}`}\n            onRender={onRenderCallback}\n          >\n            <ReactFlowProvider>\n              <FlowMain nodes={flowData.nodes} edges={flowData.edges} />\n            </ReactFlowProvider>\n          </Profiler>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FlowBenchmarkTool;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/chatbots/PreviewChat.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (132). Maximum allowed is 80.",
        "line": 69,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 219,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence } from 'framer-motion';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, useRef, useCallback, memo } from 'react';\n\nimport useAPI from '@/hooks/useAPI';\n\nimport usePlubotCreation from '../../hooks/usePlubotCreation';\n\nimport './PreviewChat.css';\n\n// Componente de mensaje memoizado para evitar re-renderizados innecesarios\nconst ChatMessage = memo(({ message }) => {\n  return (\n    <motion.div\n      className={`chat-message ${message.role}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className='message-content'>{message.content}</div>\n      <span className='message-timestamp'>\n        {new Date(message.timestamp).toLocaleTimeString()}\n      </span>\n    </motion.div>\n  );\n});\n\nChatMessage.propTypes = {\n  message: PropTypes.shape({\n    role: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    timestamp: PropTypes.instanceOf(Date).isRequired,\n  }).isRequired,\n};\n\nChatMessage.displayName = 'ChatMessage';\n\n// Componente de botón memoizado\nconst ChatButton = memo(({ button, onClick, color }) => {\n  return (\n    <motion.button\n      className='chat-button'\n      onClick={() => onClick(button.label)}\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.8 }}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      style={{ backgroundColor: color || '#00e0ff' }}\n    >\n      {button.label}\n    </motion.button>\n  );\n});\n\nChatButton.propTypes = {\n  button: PropTypes.shape({ label: PropTypes.string.isRequired }).isRequired,\n  onClick: PropTypes.func.isRequired,\n  color: PropTypes.string,\n};\n\nChatButton.defaultProps = {\n  color: '#00e0ff',\n};\n\nChatButton.displayName = 'ChatButton';\n\nconst PreviewChat = ({ plubotId }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [buttons, setButtons] = useState([]);\n  const { plubotData } = usePlubotCreation();\n  const { request } = useAPI();\n  const chatContainerReference = useRef(null);\n\n  // Simulamos un user_phone para pruebas\n  const userPhone = '1234567890';\n\n  // Cargar mensaje inicial al montar el componente\n  useEffect(() => {\n    const fetchInitialMessage = async () => {\n      try {\n        const data = await request(\n          'post',\n          `/api/conversations/${plubotId}/chat`,\n          {\n            message: '',\n            user_phone: userPhone,\n          },\n        );\n        setMessages([\n          { role: 'bot', content: data.response, timestamp: new Date() },\n        ]);\n        setButtons(data.buttons || []);\n      } catch {\n        // Error handled silently for preview purposes.\n      }\n    };\n\n    if (plubotId) {\n      fetchInitialMessage();\n    }\n  }, [plubotId, request]);\n\n  // Enviar mensaje (memoizado para evitar recreaciones en cada renderizado)\n  const sendMessage = useCallback(\n    async (message) => {\n      if (!message.trim()) return;\n\n      const userMessage = {\n        role: 'user',\n        content: message,\n        timestamp: new Date(),\n      };\n      setMessages((previous) => [...previous, userMessage]);\n      setInputMessage('');\n\n      try {\n        const data = await request(\n          'post',\n          `/api/conversations/${plubotId}/chat`,\n          {\n            message,\n            user_phone: userPhone,\n          },\n        );\n        setMessages((previous) => [\n          ...previous,\n          { role: 'bot', content: data.response, timestamp: new Date() },\n        ]);\n        setButtons(data.buttons || []);\n      } catch {\n        setMessages((previous) => [\n          ...previous,\n          {\n            role: 'bot',\n            content: 'Error al procesar tu mensaje.',\n            timestamp: new Date(),\n          },\n        ]);\n      }\n    },\n    [plubotId, request, userPhone],\n  );\n\n  // Manejar clic en botón (memoizado)\n  const handleButtonClick = useCallback(\n    (label) => {\n      sendMessage(label);\n    },\n    [sendMessage],\n  );\n\n  // Auto-scroll al último mensaje\n  useEffect(() => {\n    if (chatContainerReference.current) {\n      chatContainerReference.current.scrollTop =\n        chatContainerReference.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Manejar tecla Enter (memoizado)\n  const handleKeyPress = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        sendMessage(inputMessage);\n      }\n    },\n    [sendMessage, inputMessage],\n  );\n\n  // Memoizar el color para evitar cálculos repetidos\n  const buttonColor = plubotData.color || '#00e0ff';\n\n  return (\n    <div className='preview-chat'>\n      <div className='chat-header'>\n        <h3>{plubotData.name || 'Plubot'}</h3>\n      </div>\n      <div className='chat-container' ref={chatContainerReference}>\n        <AnimatePresence>\n          {messages.map((message) => (\n            <ChatMessage key={message.id} message={message} />\n          ))}\n        </AnimatePresence>\n      </div>\n      <div className='chat-buttons'>\n        <AnimatePresence>\n          {buttons.map((button) => (\n            <ChatButton\n              key={button.label}\n              button={button}\n              onClick={handleButtonClick}\n              color={buttonColor}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n      <div className='chat-input'>\n        <input\n          type='text'\n          value={inputMessage}\n          onChange={(event) => setInputMessage(event.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder='Escribe un mensaje...'\n        />\n        <motion.button\n          onClick={() => sendMessage(inputMessage)}\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          style={{ backgroundColor: buttonColor }}\n        >\n          Enviar\n        </motion.button>\n      </div>\n    </div>\n  );\n};\n\n// Memoizar el componente completo para evitar re-renderizados cuando las props no cambian\nPreviewChat.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n};\n\nexport default memo(PreviewChat);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/Button.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/Footer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/FooterLinks.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (85). Maximum allowed is 80.",
        "line": 9,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 93,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NavLink } from 'react-router-dom';\n\nconst scrollToTop = () => {\n  setTimeout(() => {\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n  }, 100);\n};\n\nconst FooterLinks = () => {\n  return (\n    <>\n      <div className='footer-links'>\n        <h3>Explora el Pluniverse</h3>\n        <div className='footer-links-columns'>\n          <ul className='footer-links-column'>\n            <li>\n              <NavLink to='/' onClick={scrollToTop}>\n                Inicio\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/pluniverse' onClick={scrollToTop}>\n                Pluniverse\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/sanctuary' onClick={scrollToTop}>\n                Santuario del Fundador\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/tutoriales' onClick={scrollToTop}>\n                Tutoriales\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/contact' onClick={scrollToTop}>\n                Contacto\n              </NavLink>\n            </li>\n          </ul>\n          <ul className='footer-links-column'>\n            <li>\n              <NavLink to='/register' onClick={scrollToTop}>\n                Registrarse\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/login' onClick={scrollToTop}>\n                Iniciar Sesión\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/blog' onClick={scrollToTop}>\n                Blog\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/faq' onClick={scrollToTop}>\n                Preguntas Frecuentes\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to='/coliseum' onClick={scrollToTop}>\n                Comunidad\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className='footer-legal'>\n        <h3>Legal</h3>\n        <ul>\n          <li>\n            <NavLink to='/terms' onClick={scrollToTop}>\n              Términos y Condiciones\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to='/privacy' onClick={scrollToTop}>\n              Política de Privacidad\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to='/seguridad' onClick={scrollToTop}>\n              Seguridad\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default FooterLinks;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/FooterSubscriptionForm.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (133). Maximum allowed is 80.",
        "line": 6,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 143,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence } from 'framer-motion';\nimport { useState } from 'react';\n\nimport axiosInstance from '../../utils/axios-config';\n\nconst FooterSubscriptionForm = () => {\n  const [formData, setFormData] = useState({ builderEmail: '' });\n  const [formMessage, setFormMessage] = useState({ text: '', status: '' });\n  const [loading, setLoading] = useState(false);\n\n  const handleBuilderForm = async (event) => {\n    event.preventDefault();\n    setLoading(true);\n    setFormMessage({ text: '', status: '' });\n\n    const data = new FormData();\n    data.append('email', formData.builderEmail);\n\n    try {\n      const response = await axiosInstance.post('subscribe', data, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      setFormMessage({\n        text:\n          response.data.message ||\n          '¡Bienvenido, Arquitecto! Pronto te contactaremos para construir el Pluniverse.',\n        status: 'success',\n      });\n      setFormData({ builderEmail: '' });\n      setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n    } catch (error) {\n      const errorMessage =\n        error.response?.data?.message ||\n        error.message ||\n        'Error al suscribirte. Intenta nuevamente.';\n      setFormMessage({ text: errorMessage, status: 'error' });\n      setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  return (\n    <div className='footer-builder-section'>\n      <h3 className='footer-title'>\n        ¡Conviértete en Arquitecto del Pluniverse!\n      </h3>\n      <p className='footer-description'>\n        Únete a nuestra misión como creador, desarrollador o visionario.\n        ¡Forjemos juntos el futuro del Pluniverse!\n      </p>\n      <form\n        id='footer-builder-form'\n        onSubmit={handleBuilderForm}\n        className='subscribe-form'\n        aria-label='Formulario de suscripción al Pluniverse'\n      >\n        <div className='footer-subscribe'>\n          <div className='subscribe-input-wrapper'>\n            <input\n              type='email'\n              name='builderEmail'\n              placeholder='Tu correo electrónico'\n              value={formData.builderEmail}\n              onChange={handleChange}\n              required\n              className='subscribe-input'\n              aria-describedby='email-description'\n            />\n            <p id='email-description' className='sr-only'>\n              Ingresa tu correo electrónico para unirte como Arquitecto del\n              Pluniverse.\n            </p>\n          </div>\n          <button\n            type='submit'\n            className='subscribe-btn'\n            disabled={loading}\n            aria-label={\n              loading\n                ? 'Enviando formulario'\n                : 'Enviar formulario de suscripción'\n            }\n          >\n            <span className='btn-text'>\n              {loading ? 'Enviando...' : 'Forjar mi Destino'}\n            </span>\n            {loading && (\n              <motion.span\n                className='btn-loader'\n                animate={{ rotate: 360 }}\n                transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n              />\n            )}\n          </button>\n        </div>\n      </form>\n      <AnimatePresence>\n        {formMessage.text && (\n          <motion.div\n            className={`form-message ${formMessage.status}`}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{\n              opacity: 1,\n              y: 0,\n              transition: { type: 'spring', stiffness: 150, damping: 15 },\n            }}\n            exit={{\n              opacity: 0,\n              y: 20,\n              transition: { duration: 0.4 },\n            }}\n          >\n            <div className='message-background'>\n              <div className='message-circle' />\n            </div>\n            <div className='message-content'>\n              <p id='form-message-text'>{formMessage.text}</p>\n              <motion.div\n                className='message-icon'\n                animate={{\n                  scale: [1, 1.1, 1],\n                }}\n                transition={{\n                  duration: 1.5,\n                  repeat: Infinity,\n                }}\n              >\n                {formMessage.status === 'success' ? '✓' : '!'}\n              </motion.div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default FooterSubscriptionForm;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/Header.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/LazyImage.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (113). Maximum allowed is 80.",
        "line": 25,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 144,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 25,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 144,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useState, useEffect, useRef, memo, useCallback } from 'react';\n\nimport { useIntersection } from '../../hooks/useIntersection';\nimport { useWebPSupport } from '../../hooks/useWebPSupport';\n\nimport './Loader.css';\n\n/**\n * Componente LazyImage que carga imágenes solo cuando están a punto de entrar en el viewport\n *\n * @param {Object} props - Propiedades del componente\n * @param {string} props.src - URL de la imagen\n * @param {string} props.alt - Texto alternativo para la imagen\n * @param {string} props.className - Clases CSS para aplicar a la imagen\n * @param {Object} props.style - Estilos inline para aplicar a la imagen\n * @param {string} props.placeholderSrc - URL de la imagen de placeholder (opcional)\n * @param {string} props.placeholderColor - Color de fondo mientras se carga la imagen (opcional)\n * @param {number} props.threshold - Valor entre 0 y 1 que indica qué porcentaje del elemento debe ser visible para cargar la imagen (opcional, por defecto 0.1)\n * @param {Function} props.onLoad - Callback que se ejecuta cuando la imagen termina de cargar (opcional)\n * @param {Function} props.onError - Callback que se ejecuta si hay un error al cargar la imagen (opcional)\n * @param {boolean} props.webpSupport - Si es true, intentará cargar la versión WebP de la imagen si está disponible (opcional)\n * @returns {JSX.Element} - Componente de imagen con carga perezosa\n */\nconst LazyImageComponent = ({\n  src,\n  alt,\n  className = '',\n  style = {},\n  placeholderSrc: placeholderSource,\n  placeholderColor = '#f0f0f0',\n  threshold = 0.1,\n  onLoad,\n  onError,\n  webpSupport = true,\n  ...properties\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [currentSource, setCurrentSource] = useState(\n    placeholderSource || undefined,\n  );\n  const containerRef = useRef(null);\n\n  const supportsWebP = useWebPSupport();\n  const isInView = useIntersection(containerRef, { threshold });\n\n  useEffect(() => {\n    if (!isInView || !src) return;\n\n    let finalSource = src;\n    if (\n      webpSupport &&\n      supportsWebP &&\n      !src.endsWith('.webp') &&\n      !src.endsWith('.svg')\n    ) {\n      finalSource = src.replace(/\\.(jpe?g|png)$/i, '.webp');\n    }\n    setCurrentSource(finalSource);\n  }, [isInView, src, supportsWebP, webpSupport]);\n\n  const handleImageLoad = useCallback(\n    (event) => {\n      setIsLoaded(true);\n      if (onLoad) {\n        onLoad(event);\n      }\n    },\n    [onLoad],\n  );\n\n  const handleImageError = useCallback(\n    (event) => {\n      if (webpSupport && supportsWebP && currentSource?.endsWith('.webp')) {\n        setCurrentSource(src);\n      } else if (onError) {\n        onError(event);\n      }\n    },\n    [currentSource, onError, src, supportsWebP, webpSupport],\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={['lazy-image-container', className].filter(Boolean).join(' ')}\n      style={{\n        position: 'relative',\n        overflow: 'hidden',\n        backgroundColor: isLoaded ? 'transparent' : placeholderColor,\n        ...style,\n      }}\n      {...properties}\n    >\n      {currentSource && (\n        <img\n          src={currentSource}\n          alt={alt}\n          className={`lazy-image ${isLoaded ? 'loaded' : 'loading'}`}\n          style={{\n            transition: 'opacity 0.3s ease-in-out',\n            opacity: isLoaded ? 1 : 0,\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n          }}\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n        />\n      )}\n\n      {!isLoaded && (\n        <div\n          className='lazy-image-placeholder'\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: placeholderColor,\n          }}\n        >\n          {placeholderSource ? (\n            <img\n              src={placeholderSource}\n              alt={`${alt} placeholder`}\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover',\n              }}\n            />\n          ) : (\n            <div className='lazy-image-loading-indicator spinner' />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nLazyImageComponent.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  placeholderSrc: PropTypes.string,\n  placeholderColor: PropTypes.string,\n  threshold: PropTypes.number,\n  onLoad: PropTypes.func,\n  onError: PropTypes.func,\n  webpSupport: PropTypes.bool,\n};\n\nLazyImageComponent.displayName = 'LazyImage';\n\nconst LazyImage = memo(LazyImageComponent);\n\nexport default LazyImage;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/Loader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/NavLinks.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/NodeHistoryViewer.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (126). Maximum allowed is 80.",
        "line": 19,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 158,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport './NodeHistoryViewer.css';\n\n// Esta función no depende del estado ni de las props del componente,\n// por lo que puede definirse fuera para evitar su recreación en cada render.\nconst formatDate = (dateString) => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('es-ES', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(date);\n};\n\nconst NodeHistoryViewer = ({\n  nodeId,\n  onRestore,\n  onClose,\n  preferReducedMotion = false,\n  highContrast = false,\n}) => {\n  const [selectedVersion, setSelectedVersion] = useState();\n  const [historyEntries, setHistoryEntries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // Se elimina la llamada a useNodeHistory ya que se usan datos simulados\n  // y la variable `getHistory` no se utilizaba, causando un error de lint.\n\n  useEffect(() => {\n    if (nodeId) {\n      setIsLoading(true);\n      // Simulación de una llamada a API\n      const mockHistory = [\n        {\n          id: '1',\n          timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n          content: 'Versión anterior del contenido',\n          author: 'Usuario',\n        },\n        {\n          id: '2',\n          timestamp: new Date(Date.now() - 7_200_000).toISOString(),\n          content: 'Versión más antigua del contenido',\n          author: 'Usuario',\n        },\n      ];\n\n      setTimeout(() => {\n        setHistoryEntries(mockHistory);\n        setIsLoading(false);\n      }, 500); // Simular retardo de red\n    }\n  }, [nodeId]);\n\n  const handleRestore = useCallback(() => {\n    if (selectedVersion) {\n      onRestore(selectedVersion);\n    }\n  }, [onRestore, selectedVersion]);\n\n  const handleKeyDown = useCallback((event, entry) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      setSelectedVersion(entry);\n    }\n  }, []);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <p>Cargando historial...</p>;\n    }\n\n    if (historyEntries.length === 0) {\n      return <p>No hay versiones anteriores disponibles.</p>;\n    }\n\n    return (\n      <>\n        <ul className='history-list' role='listbox'>\n          {historyEntries.map((entry) => {\n            const isSelected = selectedVersion?.id === entry.id;\n            const itemClasses = [\n              'history-item',\n              isSelected ? 'selected' : '',\n              highContrast ? 'high-contrast' : '',\n            ]\n              .filter(Boolean)\n              .join(' ');\n\n            return (\n              <li\n                key={entry.id}\n                className={itemClasses}\n                onClick={() => setSelectedVersion(entry)}\n                onKeyDown={(event) => handleKeyDown(event, entry)}\n                role='option'\n                tabIndex={0}\n                aria-selected={isSelected}\n              >\n                <div className='history-item-timestamp'>\n                  {formatDate(entry.timestamp)}\n                </div>\n                <div\n                  className={`history-item-author ${highContrast ? 'high-contrast' : ''}`}\n                >\n                  {entry.author}\n                </div>\n                <div className='history-item-content'>\n                  {entry.content.slice(0, 100)}\n                  {entry.content.length > 100 ? '...' : ''}\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className='history-controls'>\n          <button\n            type='button'\n            onClick={onClose}\n            className={`history-button cancel ${highContrast ? 'high-contrast' : ''} ${\n              preferReducedMotion ? 'prefer-reduced-motion' : ''\n            }`}\n          >\n            Cancelar\n          </button>\n          <button\n            type='button'\n            onClick={handleRestore}\n            disabled={!selectedVersion}\n            className={`history-button ${highContrast ? 'high-contrast' : ''} ${\n              preferReducedMotion ? 'prefer-reduced-motion' : ''\n            }`}\n          >\n            Restaurar Versión\n          </button>\n        </div>\n      </>\n    );\n  };\n\n  const containerClasses = [\n    'node-history-viewer',\n    highContrast ? 'high-contrast' : '',\n  ]\n    .filter(Boolean)\n    .join(' ');\n\n  return (\n    <div className={containerClasses}>\n      <h3>Historial de Versiones</h3>\n      {renderContent()}\n    </div>\n  );\n};\n\nNodeHistoryViewer.propTypes = {\n  nodeId: PropTypes.string.isRequired,\n  onRestore: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  preferReducedMotion: PropTypes.bool,\n  highContrast: PropTypes.bool,\n};\n\nNodeHistoryViewer.defaultProps = {\n  preferReducedMotion: false,\n  highContrast: false,\n};\n\nNodeHistoryViewer.displayName = 'NodeHistoryViewer';\n\nexport default NodeHistoryViewer;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/RichTextEditor.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 15. Maximum allowed is 10.",
        "line": 8,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 89,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import DOMPurify from 'dompurify';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, forwardRef, useCallback } from 'react';\n\nimport './RichTextEditor.css';\n\nconst RichTextEditor = forwardRef(\n  (\n    {\n      initialValue = '',\n      onChange,\n      readOnly = false,\n      style = {},\n      placeholder = 'Escribe aquí...',\n      maxLength = 2000,\n      preferReducedMotion = false,\n      highContrast = false,\n    },\n    reference,\n  ) => {\n    const [content, setContent] = useState(initialValue);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useEffect(() => {\n      setContent(initialValue);\n    }, [initialValue]);\n\n    const handleChange = useCallback(\n      (event) => {\n        const newContent = event.target.innerHTML;\n        const sanitizedContent = DOMPurify.sanitize(newContent);\n\n        if (sanitizedContent.length <= maxLength) {\n          setContent(sanitizedContent);\n          if (onChange) {\n            onChange(sanitizedContent);\n          }\n        }\n      },\n      [maxLength, onChange],\n    );\n\n    const handleFocus = useCallback(() => setIsFocused(true), []);\n    const handleBlur = useCallback(() => setIsFocused(false), []);\n\n    const showPlaceholder = !content && !isFocused;\n\n    const editorClasses = [\n      'rich-text-editor',\n      isFocused ? 'focused' : '',\n      highContrast ? 'high-contrast' : '',\n      preferReducedMotion ? 'prefer-reduced-motion' : '',\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    const charCountClasses = [\n      'character-count',\n      content.length > maxLength * 0.9 ? 'limit-exceeded' : '',\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    return (\n      <div className='rich-text-editor-container' style={style}>\n        {showPlaceholder && (\n          <span className='editor-placeholder'>{placeholder}</span>\n        )}\n        <div\n          ref={reference}\n          className={editorClasses}\n          contentEditable={!readOnly}\n          dangerouslySetInnerHTML={{ __html: content }}\n          onInput={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          role='textbox'\n          aria-multiline='true'\n          aria-label='Editor de texto enriquecido'\n          tabIndex={0}\n        />\n        {maxLength && (\n          <div className={charCountClasses}>\n            {content.length}/{maxLength}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nRichTextEditor.propTypes = {\n  initialValue: PropTypes.string,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  style: PropTypes.object,\n  placeholder: PropTypes.string,\n  maxLength: PropTypes.number,\n  preferReducedMotion: PropTypes.bool,\n  highContrast: PropTypes.bool,\n};\n\nRichTextEditor.displayName = 'RichTextEditor';\n\nexport default RichTextEditor;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/UserProfile.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 8,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 76,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\n\nimport { useGamification } from '../../hooks/useGamification';\nimport useAuthStore from '../../stores/use-auth-store';\n\nconst UserProfile = ({ onLinkClick }) => {\n  const [isProfileOpen, setIsProfileOpen] = useState(false);\n  const { user, logout } = useAuthStore();\n  const { pluCoins, level } = useGamification();\n  const navigate = useNavigate();\n\n  const displayName =\n    user?.name ?? localStorage.getItem('current_user_name') ?? 'Usuario';\n  const displayEmail =\n    localStorage.getItem('current_user_email') ?? user?.email ?? '';\n\n  const handleProfileToggle = () => setIsProfileOpen(!isProfileOpen);\n\n  const handleLogout = () => {\n    logout();\n    navigate('/', { replace: true });\n    setIsProfileOpen(false);\n  };\n\n  const handleLinkClick = () => {\n    setIsProfileOpen(false);\n    if (onLinkClick) {\n      onLinkClick();\n    }\n  };\n\n  return (\n    <div className='user-profile'>\n      <button\n        type='button'\n        className='profile-icon'\n        onClick={handleProfileToggle}\n        aria-label='Abrir menú de perfil'\n        aria-expanded={isProfileOpen}\n      >\n        <span>{user?.name?.charAt(0) || 'U'}</span>\n      </button>\n      {isProfileOpen && (\n        <div className='profile-dropdown'>\n          <div className='profile-info'>\n            <p>{displayName}</p>\n            <p>{displayEmail}</p>\n          </div>\n          <div className='profile-stats'>\n            <p>Nivel: {level}</p>\n            <p>PluCoin: {pluCoins}</p>\n          </div>\n          <NavLink\n            to='/change-password'\n            className='profile-link'\n            onClick={handleLinkClick}\n          >\n            Cambiar Contraseña\n          </NavLink>\n          <NavLink\n            to='/profile'\n            className='profile-link'\n            onClick={handleLinkClick}\n          >\n            Ver Perfil\n          </NavLink>\n          <button onClick={handleLogout} className='logout-btn'>\n            Cerrar Sesión\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nUserProfile.propTypes = {\n  onLinkClick: PropTypes.func,\n};\n\nexport default UserProfile;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/WhatsAppButton.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/common/XPTracker.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/flow/BackupManager.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (205). Maximum allowed is 80.",
        "line": 28,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 263,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { formatDistanceToNow } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { History, X, RotateCcw, Info } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\nimport './BackupManager.css';\n\n/**\n * Formatear la fecha para mostrarla de forma relativa.\n * @param {string} dateString - La fecha en formato string.\n * @returns {string} - La fecha formateada.\n */\nconst formatDate = (dateString) => {\n  try {\n    const date = new Date(dateString);\n    return formatDistanceToNow(date, { addSuffix: true, locale: es });\n  } catch {\n    return 'Fecha desconocida';\n  }\n};\n\n/**\n * Componente para gestionar las copias de seguridad de los flujos.\n * Permite listar, visualizar y restaurar copias de seguridad.\n */\nconst BackupManager = ({ plubotId }) => {\n  const [open, setOpen] = useState(false);\n  const [backups, setBackups] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [restoring, setRestoring] = useState(false);\n  const [selectedBackup, setSelectedBackup] = useState();\n  const [error, setError] = useState();\n\n  // Obtener funciones del store\n  const listBackups = useFlowStore((state) => state.listBackups);\n  const restoreBackup = useFlowStore((state) => state.restoreBackup);\n  const setPlubotId = useFlowStore((state) => state.setPlubotId);\n\n  // Establecer el ID del plubot en el store cuando cambie\n  useEffect(() => {\n    if (plubotId) {\n      setPlubotId(plubotId);\n    }\n  }, [plubotId, setPlubotId]);\n\n  // Cerrar el diálogo\n  const handleClose = useCallback(() => {\n    setOpen(false);\n    setSelectedBackup();\n    setError();\n  }, []);\n\n  // Manejar cierre con la tecla Escape\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (open && event.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    globalThis.addEventListener('keydown', handleKeyDown);\n    return () => {\n      globalThis.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, handleClose]);\n\n  // Cargar la lista de copias de seguridad\n  const loadBackups = async () => {\n    if (!plubotId) {\n      setError('No se ha especificado un ID de plubot válido');\n      return;\n    }\n\n    setLoading(true);\n    setError();\n\n    try {\n      const backupList = await listBackups();\n      setBackups(backupList || []);\n    } catch (error_) {\n      setError(\n        `No se pudieron cargar las copias de seguridad: ${\n          error_.message || 'Error desconocido'\n        }`,\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cargar las copias de seguridad al abrir el diálogo\n  const handleOpen = () => {\n    setOpen(true);\n    loadBackups();\n  };\n\n  // Restaurar una copia de seguridad\n  const handleRestore = async (backupId) => {\n    if (!plubotId || !backupId) {\n      setError('No se puede restaurar: Información incompleta');\n      return;\n    }\n\n    setRestoring(true);\n    setError();\n\n    try {\n      const result = await restoreBackup(backupId);\n\n      if (result.success) {\n        // Cerrar el diálogo después de restaurar exitosamente\n        handleClose();\n      } else {\n        setError(\n          `Error al restaurar: ${result.message || 'Error desconocido'}`,\n        );\n      }\n    } catch (error_) {\n      setError(`Error al restaurar: ${error_.message || 'Error desconocido'}`);\n    } finally {\n      setRestoring(false);\n    }\n  };\n\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <div className='backup-manager-loading'>\n          <div className='backup-manager-spinner' />\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className='backup-manager-error'>\n          <Info size={18} />\n          <p>{error}</p>\n        </div>\n      );\n    }\n\n    if (backups.length === 0) {\n      return (\n        <div className='backup-manager-empty'>\n          <p>No hay copias de seguridad disponibles</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className='backup-manager-list'>\n        {backups.map((backup) => (\n          <div\n            key={backup.id}\n            className={`backup-manager-item ${\n              selectedBackup?.id === backup.id ? 'selected' : ''\n            }`}\n            onClick={() => setSelectedBackup(backup)}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' || event.key === ' ') {\n                setSelectedBackup(backup);\n              }\n            }}\n            role='button'\n            tabIndex={0}\n          >\n            <div className='backup-manager-item-content'>\n              <h4>{backup.name || `Copia #${backup.id}`}</h4>\n              <p className='backup-manager-item-date'>\n                Creada {formatDate(backup.created_at)}\n              </p>\n              {backup.metadata && (\n                <p className='backup-manager-item-meta'>\n                  {backup.metadata.nodes_count || 0} nodos ·{' '}\n                  {backup.metadata.edges_count || 0} conexiones\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div\n        className='backup-manager-trigger'\n        onClick={handleOpen}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            handleOpen();\n          }\n        }}\n        role='button'\n        tabIndex={0}\n        title='Gestionar copias de seguridad'\n      >\n        <History size={16} />\n      </div>\n\n      {open && (\n        <div className='backup-manager-overlay'>\n          <div\n            className='backup-manager-dialog'\n            role='dialog'\n            aria-modal='true'\n            aria-labelledby='backup-manager-dialog-title'\n            tabIndex={-1}\n          >\n            <div className='backup-manager-header'>\n              <div className='backup-manager-title'>\n                <History size={18} />\n                <h3 id='backup-manager-dialog-title'>Copias de seguridad</h3>\n              </div>\n              <button\n                className='backup-manager-close-btn'\n                onClick={handleClose}\n              >\n                <X size={18} />\n              </button>\n            </div>\n\n            <div className='backup-manager-divider' />\n\n            <div className='backup-manager-content'>{renderContent()}</div>\n\n            <div className='backup-manager-divider' />\n\n            <div className='backup-manager-actions'>\n              <button\n                className='backup-manager-cancel-btn'\n                onClick={handleClose}\n              >\n                Cancelar\n              </button>\n              <button\n                className='backup-manager-restore-btn'\n                onClick={() => handleRestore(selectedBackup?.id)}\n                disabled={!selectedBackup || restoring}\n              >\n                {restoring ? (\n                  <>\n                    <div className='backup-manager-spinner-small' />\n                    <span>Restaurando...</span>\n                  </>\n                ) : (\n                  <>\n                    <RotateCcw size={16} />\n                    <span>Restaurar</span>\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nBackupManager.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n};\n\nexport default BackupManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/flow/PerformanceMonitor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/flow/PerformanceStats.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (292). Maximum allowed is 80.",
        "line": 10,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 337,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 10,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 337,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Gauge, Cpu, ChevronDown, ChevronUp, Info } from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n/**\n * Componente que muestra estadísticas de rendimiento del editor de flujo.\n * Incluye información sobre nodos, aristas, memoria y tiempo de guardado.\n */\nconst PerformanceStats = () => {\n  const [expanded, setExpanded] = useState(false);\n  const [saveTime, setSaveTime] = useState();\n  const [memoryUsage, setMemoryUsage] = useState();\n\n  // Obtener datos del store\n  const nodes = useFlowStore((state) => state.nodes);\n  const edges = useFlowStore((state) => state.edges);\n  const lastSaved = useFlowStore((state) => state.lastSaved);\n  const isSaving = useFlowStore((state) => state.isSaving);\n  const saveFlow = useFlowStore((state) => state.saveFlow);\n\n  // Calcular estadísticas de rendimiento\n  useEffect(() => {\n    // Simular medición de uso de memoria\n    // En un entorno real, esto podría venir de una API de rendimiento\n    if (nodes.length > 0 || edges.length > 0) {\n      const estimatedMemory = (nodes.length * 2 + edges.length) * 10;\n      setMemoryUsage(estimatedMemory);\n    } else {\n      setMemoryUsage(0);\n    }\n  }, [nodes, edges]);\n\n  // Medir tiempo de guardado\n  const handleSave = async () => {\n    const startTime = performance.now();\n    await saveFlow();\n    const endTime = performance.now();\n    setSaveTime(endTime - startTime);\n  };\n\n  // Formatear el tiempo desde el último guardado\n  const formatLastSaved = () => {\n    if (lastSaved === undefined) return 'Nunca';\n\n    const lastSavedDate = new Date(lastSaved);\n    const now = new Date();\n    const diffMs = now - lastSavedDate;\n\n    // Convertir a segundos\n    const diffSec = Math.floor(diffMs / 1000);\n\n    if (diffSec < 60) {\n      return `hace ${diffSec} segundos`;\n    } else if (diffSec < 3600) {\n      const minutes = Math.floor(diffSec / 60);\n      return `hace ${minutes} minutos`;\n    } else {\n      return lastSavedDate.toLocaleTimeString();\n    }\n  };\n\n  // Formatear el tiempo de guardado\n  const formatSaveTime = () => {\n    if (saveTime === undefined) return 'N/A';\n\n    return saveTime < 100\n      ? `${saveTime.toFixed(1)} ms`\n      : `${(saveTime / 1000).toFixed(2)} s`;\n  };\n\n  // Formatear el uso de memoria\n  const formatMemoryUsage = () => {\n    if (memoryUsage === undefined) return 'N/A';\n\n    return memoryUsage < 1024\n      ? `${memoryUsage} KB`\n      : `${(memoryUsage / 1024).toFixed(1)} MB`;\n  };\n\n  // Calcular la eficiencia de las actualizaciones incrementales\n  const calculateEfficiency = () => {\n    if (!saveTime || nodes.length === 0) return 0;\n\n    // Fórmula simple: menor tiempo = mayor eficiencia\n    // Normalizado para que 100ms o menos sea 100% eficiente\n    const baseEfficiency = 100 - Math.min(90, saveTime / 10);\n\n    // Ajustar por complejidad (más nodos/aristas = más difícil ser eficiente)\n    const complexity = Math.log(nodes.length + edges.length) / Math.log(10);\n\n    return Math.max(0, Math.min(100, baseEfficiency + complexity * 5));\n  };\n\n  return (\n    <div\n      className='performance-stats-container'\n      style={{\n        position: 'absolute',\n        top: '80px',\n        right: '16px',\n        zIndex: 1000,\n        borderRadius: '8px',\n        overflow: 'hidden',\n        width: expanded ? '280px' : 'auto',\n        transition: 'width 0.3s ease',\n        backgroundColor: '#1a1a2e',\n        border: '1px solid rgba(0, 195, 255, 0.3)',\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)',\n      }}\n    >\n      <div\n        className='performance-stats-header'\n        role='button'\n        tabIndex={0}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: expanded ? 'space-between' : 'center',\n          padding: '8px 12px',\n          backgroundColor: '#0f0f1b',\n          cursor: 'pointer',\n          borderBottom: expanded\n            ? '1px solid rgba(0, 195, 255, 0.2)'\n            : undefined,\n        }}\n        onClick={() => setExpanded(!expanded)}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            setExpanded(!expanded);\n          }\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Gauge\n            size={18}\n            color='#00c3ff'\n            style={{ marginRight: expanded ? '8px' : '0' }}\n          />\n          {expanded && (\n            <span\n              style={{ fontSize: '14px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              Estadísticas de rendimiento\n            </span>\n          )}\n        </div>\n        <button\n          style={{\n            background: 'transparent',\n            border: 'none',\n            cursor: 'pointer',\n            display: 'flex',\n            padding: '4px',\n          }}\n        >\n          {expanded ? (\n            <ChevronUp size={16} color='#e0e0e0' />\n          ) : (\n            <ChevronDown size={16} color='#e0e0e0' />\n          )}\n        </button>\n      </div>\n\n      {expanded && (\n        <div style={{ padding: '16px', backgroundColor: '#1a1a2e' }}>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '8px',\n            }}\n          >\n            <span style={{ fontSize: '13px', color: '#a0a0a0' }}>Nodos:</span>\n            <span\n              style={{ fontSize: '13px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              {nodes.length}\n            </span>\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '8px',\n            }}\n          >\n            <span style={{ fontSize: '13px', color: '#a0a0a0' }}>Aristas:</span>\n            <span\n              style={{ fontSize: '13px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              {edges.length}\n            </span>\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '8px',\n            }}\n          >\n            <span style={{ fontSize: '13px', color: '#a0a0a0' }}>\n              Memoria estimada:\n            </span>\n            <span\n              style={{ fontSize: '13px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              {formatMemoryUsage()}\n            </span>\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '8px',\n            }}\n          >\n            <span style={{ fontSize: '13px', color: '#a0a0a0' }}>\n              Último guardado:\n            </span>\n            <span\n              style={{ fontSize: '13px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              {formatLastSaved()}\n            </span>\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '16px',\n            }}\n          >\n            <span style={{ fontSize: '13px', color: '#a0a0a0' }}>\n              Tiempo de guardado:\n            </span>\n            <span\n              style={{ fontSize: '13px', fontWeight: 500, color: '#e0e0e0' }}\n            >\n              {formatSaveTime()}\n            </span>\n          </div>\n\n          {saveTime && (\n            <div style={{ marginBottom: '12px' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center',\n                  marginBottom: '4px',\n                }}\n              >\n                <span style={{ fontSize: '13px', color: '#a0a0a0' }}>\n                  Eficiencia:\n                </span>\n                <div title='Eficiencia de las actualizaciones incrementales. Mayor porcentaje indica mejor rendimiento.'>\n                  <Info size={14} color='#a0a0a0' />\n                </div>\n              </div>\n              <div\n                style={{\n                  width: '100%',\n                  height: '8px',\n                  backgroundColor: '#2a2a40',\n                  borderRadius: '4px',\n                  overflow: 'hidden',\n                }}\n              >\n                <div\n                  style={{\n                    width: `${calculateEfficiency()}%`,\n                    height: '100%',\n                    backgroundColor: (() => {\n                      const efficiency = calculateEfficiency();\n                      if (efficiency > 80) return '#4caf50';\n                      if (efficiency > 50) return '#ff9800';\n                      return '#f44336';\n                    })(),\n                    transition: 'width 0.5s ease',\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  marginTop: '4px',\n                }}\n              >\n                <span style={{ fontSize: '11px', color: '#a0a0a0' }}>\n                  {calculateEfficiency().toFixed(0)}% optimizado\n                </span>\n              </div>\n            </div>\n          )}\n\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '16px',\n            }}\n          >\n            <button\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                width: '100%',\n                padding: '6px 12px',\n                backgroundColor: 'transparent',\n                border: '1px solid rgba(0, 195, 255, 0.5)',\n                borderRadius: '4px',\n                color: '#00c3ff',\n                fontSize: '12px',\n                fontWeight: 500,\n                cursor: isSaving ? 'not-allowed' : 'pointer',\n                opacity: isSaving ? 0.7 : 1,\n                transition: 'all 0.2s ease',\n              }}\n              onClick={handleSave}\n              disabled={isSaving}\n            >\n              <Cpu size={14} style={{ marginRight: '6px' }} />\n              {isSaving ? 'Guardando...' : 'Probar rendimiento'}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nPerformanceStats.propTypes = {};\n\nexport default PerformanceStats;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/flow/initPerformanceMonitor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/AnimatedPlubotText.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/GlitchEffectLayers.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/HeroTitle.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-about-plubot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-arsenal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-chronicles.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-cosmic-call.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-forge.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-hero.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-pluniverse-map.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/Home-universe.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/home/hero-title-animations.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/modals/ModalContainer.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (136). Maximum allowed is 80.",
        "line": 31,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 194,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { lazy, Suspense } from 'react';\n\n// Importar componentes de modal directamente\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport useByteMessageContext from '../../hooks/useByteMessageContext';\nimport useModalContext from '../../hooks/useModalContext';\nimport EmbedModal from '../onboarding/modals/EmbedModal';\nimport ImportExportModal from '../onboarding/modals/ImportExportModal';\nimport SyncModal from '../onboarding/modals/SyncModal';\n\n// Cargar componentes pesados con lazy loading\nconst TemplateSelector = lazy(\n  () => import('../onboarding/modals/TemplateSelector'),\n);\nconst SimulationModal = lazy(\n  () => import('../onboarding/simulation/SimulationInterface'),\n);\n\n// Componente de carga para lazy loading\nconst LoadingFallback = () => (\n  <div className='modal-loading'>\n    <div className='modal-loading-spinner' />\n    <p>Cargando...</p>\n  </div>\n);\n\n/**\n * Contenedor de modales que renderiza todos los modales según el estado global\n */\nconst ModalContainer = () => {\n  // Obtener estado y funciones del contexto global\n  const { activeModals, closeModal } = useModalContext();\n  const { showNotification, setByteMessage } = useByteMessageContext();\n\n  // Obtener los nodos y aristas del FlowStore para el SimulationModal\n  const { nodes, edges } = useFlowStore((state) => ({\n    nodes: state.nodes || [],\n    edges: state.edges || [],\n  }));\n\n  const activeModalEntry = [...(activeModals?.entries() || [])].find(\n    ([, isActive]) => isActive,\n  );\n\n  // Si no hay modales activos, no renderizar nada.\n  if (!activeModalEntry) {\n    return;\n  }\n\n  // Función para manejar sincronización (pasada a SyncModal)\n  const handleSync = async () => {\n    showNotification('Sincronización completada', 'success');\n    return true;\n  };\n\n  // Añadir CSS directamente para asegurar que se aplica\n  const modalStyle = `\n    .modal-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.7);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n    }\n    \n    .modal-loading {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 30px;\n      border-radius: 8px;\n    }\n    \n    .modal-loading-spinner {\n      width: 40px;\n      height: 40px;\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-radius: 50%;\n      border-top-color: white;\n      animation: spin 1s ease-in-out infinite;\n      margin-bottom: 15px;\n    }\n    \n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  `;\n\n  return (\n    <>\n      <style>{modalStyle}</style>\n\n      {/* RENDERIZADO DE MODALES - Solo se renderiza uno a la vez */}\n      {(() => {\n        const [activeModalName] = activeModalEntry;\n\n        // Renderizar solo el modal activo\n        switch (activeModalName) {\n          case 'syncModal': {\n            return (\n              <SyncModal\n                onClose={() => closeModal('syncModal')}\n                onSync={handleSync}\n                project={{ name: 'Mi Proyecto', id: '1' }}\n              />\n            );\n          }\n\n          case 'embedModal': {\n            return (\n              <EmbedModal\n                onClose={() => closeModal('embedModal')}\n                plubotId='123'\n                plubotName='Mi Plubot'\n              />\n            );\n          }\n\n          case 'importExportModal': {\n            return (\n              <ImportExportModal\n                onClose={() => closeModal('importExportModal')}\n                nodes={[]}\n                edges={[]}\n                setByteMessage={setByteMessage}\n                exportFormat='json'\n                setExportFormat={() => {\n                  /* no-op */\n                }}\n                importData=''\n                setImportData={() => {\n                  /* no-op */\n                }}\n                setExportMode={() => {\n                  /* no-op */\n                }}\n                plubotData={{ name: 'Mi Plubot' }}\n                updatePlubotData={() => {\n                  /* no-op */\n                }}\n              />\n            );\n          }\n\n          case 'templateSelector': {\n            return (\n              <Suspense fallback={<LoadingFallback />}>\n                <TemplateSelector\n                  onClose={() => closeModal('templateSelector')}\n                  onSelectTemplate={() => {\n                    closeModal('templateSelector');\n                    showNotification(\n                      'Plantilla seleccionada con éxito',\n                      'success',\n                    );\n                  }}\n                />\n              </Suspense>\n            );\n          }\n\n          case 'simulationModal': {\n            return (\n              <Suspense fallback={<LoadingFallback />}>\n                <SimulationModal\n                  onClose={() => closeModal('simulationModal')}\n                  nodes={Array.isArray(nodes) ? nodes : []}\n                  edges={Array.isArray(edges) ? edges : []}\n                  analyticsTracker={(_event, _data) => {\n                    // El seguimiento de análisis se puede implementar aquí en el futuro.\n                  }}\n                />\n              </Suspense>\n            );\n          }\n\n          default: {\n            // No renderizar nada si no hay modal activo\n            break;\n          }\n        }\n      })()}\n    </>\n  );\n};\n\nexport default ModalContainer;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/ByteAssistant.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (138). Maximum allowed is 80.",
        "line": 30,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 175,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 30,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 175,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport './ByteAssistant.css';\nimport './fix-bubble.css';\nimport byteHappy from '@/assets/img/byte-happy.png';\nimport byteNormal from '@/assets/img/byte-normal.png';\nimport byteSad from '@/assets/img/byte-sad.png';\nimport byteThinking from '@/assets/img/byte-thinking.png';\nimport byteWarning from '@/assets/img/byte-warning.png';\nimport { useByteAssistant } from '@/hooks/useByteAssistant';\n\nconst getTypeColor = (messageType) => {\n  switch (messageType) {\n    case 'error': {\n      return '#ff2e5b';\n    }\n    case 'success': {\n      return '#00ff9d';\n    }\n    case 'warning': {\n      return '#ffb700';\n    }\n    default: {\n      return '#00e0ff';\n    }\n  }\n};\n\nconst ByteAssistant = ({ simulationMode = false }) => {\n  const {\n    isUltraMode,\n    messages,\n    userInput,\n    setUserInput,\n    isLoading,\n    byteState,\n    messagesEndReference,\n    handleSendMessage,\n  } = useByteAssistant();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isAnimating] = useState(false); // UI-specific state\n\n  const handleImageClick = () => {\n    if (isVisible) {\n      setIsVisible(false);\n    } else {\n      setIsVisible(true);\n      setIsExpanded(!isExpanded);\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleImageClick();\n    }\n  };\n\n  const getByteImage = () => {\n    switch (byteState) {\n      case 'happy': {\n        return byteHappy;\n      }\n      case 'sad': {\n        return byteSad;\n      }\n      case 'warning': {\n        return byteWarning;\n      }\n      case 'thinking': {\n        return byteThinking;\n      }\n      default: {\n        return byteNormal;\n      }\n    }\n  };\n\n  if (!isVisible) {\n    return (\n      <div\n        className='ts-byte-minimized'\n        onClick={handleImageClick}\n        onKeyDown={handleKeyDown}\n        role='button'\n        tabIndex={0}\n      >\n        <img\n          src={getByteImage()}\n          alt='Byte asistente'\n          className='ts-byte-icon-minimized'\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`ts-byte-assistant ${isAnimating && !isUltraMode ? 'ts-byte-animating' : ''} ${\n        isExpanded ? 'ts-byte-expanded' : ''\n      } ${simulationMode ? 'ts-byte-with-simulation' : ''} ${isUltraMode ? 'ts-byte-ultra-mode' : ''}`}\n    >\n      <div className='ts-byte-header'>\n        <div className='ts-byte-hologram'>\n          <div\n            className='ts-byte-image-container'\n            onClick={handleImageClick}\n            onKeyDown={handleKeyDown}\n            style={{ cursor: 'pointer' }}\n            role='button'\n            tabIndex={0}\n          >\n            <img\n              src={getByteImage()}\n              alt='Byte asistente'\n              className={`ts-byte-image ${isLoading && !isUltraMode ? 'ts-byte-thinking' : ''} ${isUltraMode ? 'ts-byte-static' : ''}`}\n            />\n            {isUltraMode ? (\n              <div\n                className='ts-byte-glow-simple'\n                style={{\n                  border: `1px solid ${getTypeColor('info')}`,\n                }}\n              />\n            ) : (\n              <div\n                className='ts-byte-glow'\n                style={{\n                  boxShadow: `0 0 10px ${getTypeColor('info')}, 0 0 20px ${getTypeColor('info')}`,\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className='ts-byte-messages'>\n        <div className='ts-message-container'>\n          {messages.map((message, index) => (\n            <div\n              key={message.id || index}\n              className={`ts-message-bubble ts-message-${message.sender}`}\n              style={{ borderColor: getTypeColor(message.type) }}\n            >\n              <p>{message.text}</p>\n            </div>\n          ))}\n          {isLoading && (\n            <div className='ts-message-bubble ts-message-byte'>\n              <p>Escribiendo...</p>\n            </div>\n          )}\n          <div ref={messagesEndReference} />\n        </div>\n      </div>\n\n      <form onSubmit={handleSendMessage} className='ts-byte-form'>\n        <input\n          type='text'\n          value={userInput}\n          onChange={(event_) => setUserInput(event_.target.value)}\n          placeholder='Pregunta a Byte...'\n          className='ts-byte-input'\n          disabled={isLoading}\n        />\n        <button type='submit' className='ts-byte-submit' disabled={isLoading}>\n          Enviar\n        </button>\n      </form>\n    </div>\n  );\n};\n\nByteAssistant.propTypes = {\n  simulationMode: PropTypes.bool,\n};\n\nexport default ByteAssistant;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/EpicHeader.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (238). Maximum allowed is 80.",
        "line": 19,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 276,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  Save,\n  Share2,\n  Monitor,\n  LayoutTemplate,\n  MoreHorizontal,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport '@fontsource/orbitron/400.css';\n\nimport useEpicHeader from '@/hooks/useEpicHeader';\n\nimport OptionsMenu from './OptionsMenu';\nimport StatusBubble from './StatusBubble';\nimport './EpicHeader.css';\n\nconst EpicHeader = (props) => {\n  const {\n    isAuthenticated,\n    displayFlowName,\n    nodeCount,\n    edgeCount,\n    optionsMenuOpen,\n    setOptionsMenuOpen,\n    optionsMenuRef,\n    isSaving,\n    saveStatus,\n    notification,\n    handleLogoClick,\n    handleOpenVersionHistory,\n    handleOpenImportExport,\n    handleOpenSettingsModal,\n    handleOpenPathAnalysis,\n    formatLastSaved,\n    formatTime,\n    handleSaveFlow,\n    finalTemplatesModal,\n    finalSimulateModal,\n    finalShareModal,\n    openModal,\n    showNotification,\n    nodes,\n    edges,\n    lastSaved,\n    plubotId,\n  } = useEpicHeader(props);\n\n  if (!isAuthenticated) {\n    return (\n      <header className='epic-header epic-header-unauthenticated'>\n        <div className='epic-header-left'>\n          <img src='/logo.svg' alt='Logo' className='epic-header-logo' />\n        </div>\n        <div className='epic-header-center'>\n          <span className='epic-header-flow-name'>Cargando...</span>\n        </div>\n        <div className='epic-header-right' />\n      </header>\n    );\n  }\n\n  const saveButtonStatusClass = saveStatus ? `status-${saveStatus}` : '';\n\n  return (\n    <>\n      <StatusBubble notification={notification} />\n      <header className='epic-header'>\n        <div className='epic-header-left'>\n          <div\n            role='button'\n            tabIndex={0}\n            onClick={handleLogoClick}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' || event.key === ' ') handleLogoClick();\n            }}\n            style={{ cursor: 'pointer' }}\n            title='Volver al editor'\n            aria-label='Volver al editor'\n          >\n            <img\n              src={props.logoSrc || '/logo.svg'}\n              alt='Plubot Logo'\n              className='epic-header-logo'\n              loading='eager'\n              draggable='false'\n            />\n          </div>\n          <div\n            role='button'\n            tabIndex={0}\n            onClick={handleLogoClick}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' || event.key === ' ') handleLogoClick();\n            }}\n            style={{ cursor: 'pointer' }}\n            title='Volver al editor'\n          >\n            <h1 className='epic-header-title'>{displayFlowName}</h1>\n            <p className='epic-header-subtitle'>Diseñador de Flujos Avanzado</p>\n          </div>\n        </div>\n\n        <div className='epic-header-right'>\n          <div className='epic-header-stats'>\n            <div className='epic-stat'>\n              <span className='epic-stat-value'>{nodeCount}</span>\n              <span className='epic-stat-label'>Nodos</span>\n            </div>\n\n            <div className='epic-stat'>\n              <span className='epic-stat-value'>{edgeCount}</span>\n              <span className='epic-stat-label'>Conexiones</span>\n            </div>\n\n            <div className='epic-header-divider' />\n\n            <div className='epic-stat'>\n              <span className='epic-stat-value'>{formatLastSaved()}</span>\n              <span className='epic-stat-label'>Guardado</span>\n            </div>\n\n            <div className='epic-stat'>\n              <span className='epic-stat-value'>{formatTime()}</span>\n              <span className='epic-stat-label'>Hora</span>\n            </div>\n          </div>\n        </div>\n\n        <div className='epic-header-actions'>\n          <button\n            className={`epic-header-button save-button ${isSaving ? 'saving' : ''} ${saveButtonStatusClass}`}\n            onClick={handleSaveFlow}\n            title='Guardar flujo'\n            disabled={isSaving}\n          >\n            <Save size={16} className='epic-header-button-icon' />\n            <span>Guardar</span>\n          </button>\n\n          <button\n            className='epic-header-button'\n            onClick={() => {\n              try {\n                openModal('templateSelector');\n\n                if (typeof finalTemplatesModal === 'function') {\n                  try {\n                    finalTemplatesModal();\n                  } catch {}\n                }\n\n                try {\n                  globalThis.dispatchEvent(\n                    new CustomEvent('open-templates-modal'),\n                  );\n                  globalThis.dispatchEvent(\n                    new CustomEvent('plubot-open-modal', {\n                      detail: {\n                        modal: 'templateSelector',\n                        source: 'EpicHeader',\n                        timestamp: Date.now(),\n                      },\n                    }),\n                  );\n                } catch {}\n              } catch {\n                showNotification('Error al abrir modal de plantillas', 'error');\n              }\n            }}\n            title='Plantillas'\n          >\n            <LayoutTemplate size={16} className='epic-header-button-icon' />\n            <span>Plantillas</span>\n          </button>\n\n          <button\n            className='epic-header-button'\n            onClick={() => {\n              try {\n                openModal('simulationModal');\n\n                if (typeof finalSimulateModal === 'function') {\n                  try {\n                    finalSimulateModal();\n                  } catch {}\n                }\n\n                try {\n                  globalThis.dispatchEvent(\n                    new CustomEvent('open-simulate-modal'),\n                  );\n                  globalThis.dispatchEvent(\n                    new CustomEvent('plubot-open-modal', {\n                      detail: {\n                        modal: 'simulationModal',\n                        source: 'EpicHeader',\n                        timestamp: Date.now(),\n                      },\n                    }),\n                  );\n                } catch {}\n              } catch {\n                showNotification('Error al iniciar simulación', 'error');\n              }\n            }}\n            title='Simular flujo'\n          >\n            <Monitor size={16} className='epic-header-button-icon' />\n            <span>Simular</span>\n          </button>\n\n          <button\n            className='epic-header-button epic-header-button--share'\n            onClick={() => {\n              try {\n                openModal('embedModal');\n\n                if (typeof finalShareModal === 'function') {\n                  try {\n                    finalShareModal();\n                  } catch {}\n                }\n\n                try {\n                  globalThis.dispatchEvent(new CustomEvent('open-embed-modal'));\n                  globalThis.dispatchEvent(\n                    new CustomEvent('plubot-open-modal', {\n                      detail: {\n                        modal: 'embedModal',\n                        source: 'EpicHeader',\n                        timestamp: Date.now(),\n                      },\n                    }),\n                  );\n                } catch {}\n              } catch {\n                showNotification('Error al abrir modal de compartir', 'error');\n              }\n            }}\n            title='Compartir flujo'\n          >\n            <Share2 size={16} className='epic-header-button-icon' />\n            <span>Compartir</span>\n          </button>\n\n          <div className='epic-header-dropdown' ref={optionsMenuRef}>\n            <button\n              className='epic-header-button'\n              onClick={() => setOptionsMenuOpen((previous) => !previous)}\n              title='Más opciones'\n            >\n              <MoreHorizontal size={16} className='epic-header-button-icon' />\n              <span>Más</span>\n            </button>\n\n            {optionsMenuOpen && (\n              <OptionsMenu\n                ref={optionsMenuRef}\n                plubotId={plubotId}\n                onOpenVersionHistory={handleOpenVersionHistory}\n                onOpenImportExport={handleOpenImportExport}\n                onOpenSettingsModal={handleOpenSettingsModal}\n                onOpenPathAnalysis={handleOpenPathAnalysis}\n                nodes={nodes}\n                edges={edges}\n                lastSaved={lastSaved}\n              />\n            )}\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nEpicHeader.propTypes = {\n  logoSrc: PropTypes.string,\n};\n\nexport default React.memo(EpicHeader);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/ErrorScreen.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/LoadingScreen.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/Modal.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 46,
        "column": 23,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 46,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [1059, 1063], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [1059, 1063], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/ModalManager.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/NodePalette.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 67,
        "column": 14,
        "nodeType": "MemberExpression",
        "endLine": 67,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 279,
        "column": 29,
        "nodeType": "MemberExpression",
        "endLine": 279,
        "endColumn": 49,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/OptionsMenu.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (108). Maximum allowed is 80.",
        "line": 8,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 120,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { History, Database, Settings, BarChart2 } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BackupManager from '@/components/flow/BackupManager';\n\nconst OptionsMenu = React.forwardRef(\n  (\n    {\n      plubotId,\n      onOpenVersionHistory,\n      onOpenImportExport,\n      onOpenSettingsModal,\n      onOpenPathAnalysis,\n      nodes,\n      edges,\n      lastSaved,\n    },\n    ref,\n  ) => (\n    <div className='epic-header-dropdown-menu' ref={ref}>\n      {plubotId && (\n        <div className='epic-header-dropdown-item'>\n          <History size={16} className='epic-header-dropdown-icon' />\n          <span>Copias de seguridad</span>\n          <div className='epic-header-dropdown-action'>\n            <BackupManager plubotId={plubotId} />\n          </div>\n        </div>\n      )}\n\n      {/* Historial de versiones */}\n      <div\n        className='epic-header-dropdown-item clickable'\n        role='button'\n        tabIndex={0}\n        onClick={onOpenVersionHistory}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            onOpenVersionHistory();\n          }\n        }}\n      >\n        <History size={16} className='epic-header-dropdown-icon' />\n        <span>Historial de versiones</span>\n      </div>\n\n      {/* Importar / Exportar */}\n      <div\n        className='epic-header-dropdown-item clickable'\n        role='button'\n        tabIndex={0}\n        onClick={onOpenImportExport}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            onOpenImportExport();\n          }\n        }}\n      >\n        <Database size={16} className='epic-header-dropdown-icon' />\n        <span>Importar / Exportar</span>\n      </div>\n\n      {/* Estadísticas de rendimiento */}\n      <div className='epic-header-dropdown-item'>\n        <BarChart2 size={16} className='epic-header-dropdown-icon' />\n        <span>Estadísticas de rendimiento</span>\n        <div className='epic-header-dropdown-content'>\n          <div className='performance-stats-mini'>\n            <div className='performance-stats-row'>\n              <span className='performance-stats-label'>Memoria estimada:</span>\n              <span className='performance-stats-value'>\n                {nodes.length * 2 + edges.length * 1.5} KB\n              </span>\n            </div>\n            <div className='performance-stats-row'>\n              <span className='performance-stats-label'>\n                Tiempo de guardado:\n              </span>\n              <span className='performance-stats-value'>\n                {lastSaved\n                  ? `${((Date.now() - new Date(lastSaved)) / 1000).toFixed(1)} s`\n                  : 'N/A'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        className='epic-header-dropdown-item clickable'\n        role='button'\n        tabIndex={0}\n        onClick={onOpenSettingsModal}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            onOpenSettingsModal();\n          }\n        }}\n      >\n        <Settings size={16} className='epic-header-dropdown-icon' />\n        <span>Configuración del flujo</span>\n      </div>\n\n      <div\n        className='epic-header-dropdown-item clickable'\n        role='button'\n        tabIndex={0}\n        onClick={onOpenPathAnalysis}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            onOpenPathAnalysis();\n          }\n        }}\n      >\n        <Database size={16} className='epic-header-dropdown-icon' />\n        <span>Análisis de rutas</span>\n      </div>\n    </div>\n  ),\n);\n\nOptionsMenu.displayName = 'OptionsMenu';\n\nOptionsMenu.propTypes = {\n  plubotId: PropTypes.string,\n  onOpenVersionHistory: PropTypes.func.isRequired,\n  onOpenImportExport: PropTypes.func.isRequired,\n  onOpenSettingsModal: PropTypes.func.isRequired,\n  onOpenPathAnalysis: PropTypes.func.isRequired,\n  nodes: PropTypes.array.isRequired,\n  edges: PropTypes.array.isRequired,\n  lastSaved: PropTypes.string,\n};\n\nOptionsMenu.defaultProps = {\n  plubotId: undefined,\n  lastSaved: undefined,\n};\n\nexport default React.memo(OptionsMenu);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/RouteAnalysisPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/StatusBubble.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/common/TransparentOverlay.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 16,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 16,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [591, 595], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [591, 595], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/FlowEditor.jsx",
    "messages": [
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'useDebounce'.",
        "line": 15,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 15,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [525, 572], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (226). Maximum allowed is 80.",
        "line": 134,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 427,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 119,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 119,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [4336, 4340], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [4336, 4340], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 271,
        "column": 5,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 271,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [9115, 9119], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 475,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 475,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [15146, 15150], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [15146, 15150], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * FlowEditor.jsx\n * Componente principal del editor visual de flujos de conversación.\n * Implementa el sistema drag-and-drop con ReactFlow para crear flujos interactivos.\n */\n\n// Third-party libraries\nimport PropTypes from 'prop-types';\nimport React, { lazy, useCallback, useEffect, useRef, useState } from 'react';\nimport { ReactFlowProvider } from 'reactflow';\nimport { shallow } from 'zustand/shallow';\n\n// Global components, hooks, stores, and utils\nimport ContextMenu from '@/components/onboarding/ui/context-menu';\nimport useDebounce from '@/hooks/useDebounce';\nimport { useUndoRedo } from '@/hooks/useUndoRedo';\nimport useAuthStore from '@/stores/use-auth-store';\nimport useFlowStore from '@/stores/use-flow-store';\n\n// Local components, hooks, and utils\nimport EpicHeader from '../common/EpicHeader';\nimport StatusBubble from '../common/StatusBubble';\n\nimport EmergencyRecovery from './components/EmergencyRecovery';\nimport FlowMain from './components/FlowMain';\nimport useConnectionValidator from './hooks/useConnectionValidator';\nimport useDragAndDropManager from './hooks/useDragAndDropManager';\nimport useFlowElementsManager from './hooks/useFlowElementsManager';\nimport { useFlowSaver } from './hooks/useFlowSaver';\nimport useLocalBackupManager from './hooks/useLocalBackupManager';\nimport { useModalManager } from './hooks/useModalManager';\nimport useNodeStyles from './hooks/useNodeStyles';\nimport { prepareEdgesForSaving } from './utils/edgeFixUtility';\nimport { MIN_ZOOM, NODE_EXTENT, TRANSLATE_EXTENT } from './utils/flow-extents';\n\n// Styles and patches\nimport './FlowEditor.css';\nimport './react-flow-overrides.css';\nimport './ui/PerformancePatch.js';\nimport './ui/UltraMode.css';\nimport './ui/ultra-mode-fixes.css';\n\n// Lazy-loaded Modals\nconst EmbedModal = lazy(() => import('../modals/EmbedModal'));\nconst ImportExportModal = lazy(() => import('../modals/ImportExportModal'));\nconst TemplateSelector = lazy(() => import('../modals/TemplateSelector'));\n\n// Lazy-loaded Nodes\nconst ActionNode = lazy(() => import('../nodes/actionnode/ActionNode.jsx'));\nconst AiNode = lazy(() => import('../nodes/ainode/AiNode'));\nconst AiNodePro = lazy(() => import('../nodes/ainodepro/AiNodePro.jsx'));\nconst DecisionNode = lazy(\n  () => import('../nodes/decisionnode/DecisionNode.jsx'),\n);\nconst DiscordNode = lazy(() => import('../nodes/discordnode/DiscordNode.tsx'));\nconst EmotionDetectionNode = lazy(\n  () => import('../nodes/emotiondetectionnode/EmotionDetectionNode.jsx'),\n);\nconst EndNode = lazy(() => import('../nodes/endnode/EndNode'));\nconst HttpRequestNode = lazy(\n  () => import('../nodes/httprequestnode/HttpRequestNode.jsx'),\n);\nconst MessageNode = lazy(() => import('../nodes/messagenode/MessageNode'));\nconst OptionNode = lazy(() => import('../nodes/optionnode/OptionNode.jsx'));\nconst PowerNode = lazy(() => import('../nodes/powernode/PowerNode.jsx'));\n\n/**\n * Error Boundary para manejar errores de renderizado en componentes de nodos\n * Evita que un error en un nodo cause la caída de toda la aplicación\n */\nclass NodeErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  state = { hasError: false, error: undefined };\n\n  componentDidCatch(_error, _errorInfo) {\n    /* no-op */\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className='node-error-container'>\n          <div className='node-error-message'>\n            <span className='node-error-icon'>⚠️</span>\n            <span>\n              Error: {this.state.error?.message || 'Error desconocido'}\n            </span>\n          </div>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nNodeErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\n/**\n * Componente interno del editor de flujos\n * Maneja toda la lógica principal del editor y coordina los diferentes hooks especializados\n */\n\nconst UltraModeController = React.memo(\n  ({ plubotId, backupEdgesToLocalStorage, nodes, edges, debouncedSave }) => {\n    // Efecto para el guardado automático en modo Ultra\n    useEffect(() => {\n      if (debouncedSave) {\n        debouncedSave();\n      }\n      backupEdgesToLocalStorage(edges);\n    }, [nodes, edges, debouncedSave, backupEdgesToLocalStorage]);\n\n    // eslint-disable-next-line unicorn/no-null\n    return null;\n  },\n);\n\nUltraModeController.displayName = 'UltraModeController';\n\nUltraModeController.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n  backupEdgesToLocalStorage: PropTypes.func.isRequired,\n  nodes: PropTypes.array.isRequired,\n  edges: PropTypes.array.isRequired,\n  debouncedSave: PropTypes.func.isRequired,\n};\n\nconst FlowEditorInner = React.memo(\n  ({\n    // Props relacionadas con el flujo y la identificación\n    plubotId,\n    name,\n\n    // Props para manejo de errores y UI\n    handleError,\n    hideContextMenu,\n  }) => {\n    // Referencias y navegación\n    const reactFlowWrapperReference = useRef();\n\n    // ==============================================\n    // SECCIÓN 1: ACCESO AL STORE DE ZUSTAND\n    // ==============================================\n    const {\n      isUltraMode,\n      lastSaved,\n      setNodes,\n      setEdges,\n      onNodesChange,\n      onEdgesChange,\n      setPlubotId,\n      setFlowName: setGlobalFlowName,\n      saveLocalBackup,\n    } = useFlowStore(\n      (state) => ({\n        isUltraMode: state.isUltraMode,\n        lastSaved: state.lastSaved,\n        setNodes: state.setNodes,\n        setEdges: state.setEdges,\n        onNodesChange: state.onNodesChange,\n        onEdgesChange: state.onEdgesChange,\n        setPlubotId: state.setPlubotId,\n        setFlowName: state.setFlowName,\n        saveLocalBackup: state.saveLocalBackup,\n      }),\n      shallow,\n    );\n\n    const nodes = useFlowStore((state) => state.nodes);\n    const edges = useFlowStore((state) => state.edges);\n\n    // ==============================================\n    // SECCIÓN 2: ESTADO LOCAL Y HOOKS BÁSICOS\n    // ==============================================\n    const [flowName, setLocalFlowName] = useState(name || '');\n    const [, setHasChanges] = useState(false);\n    const [reactFlowInstance, setReactFlowInstance] = useState();\n\n    // Estado para la recuperación de emergencia\n    const [isRecoveryOpen, setRecoveryOpen] = useState(false);\n    const [backupExists, setBackupExists] = useState(false);\n\n    const { isValidConnection } = useConnectionValidator(nodes, edges);\n\n    const { addToHistory } = useUndoRedo();\n\n    // Hook para gestionar respaldos locales\n    const { createBackup, recoverFromBackup, hasLocalBackup } =\n      useLocalBackupManager(plubotId);\n\n    const { debouncedSave } = useFlowSaver(\n      plubotId,\n      handleError,\n      setHasChanges,\n    );\n\n    // ==============================================\n    // SECCIÓN 3: EFECTOS SECUNDARIOS (useEffect)\n    // ==============================================\n\n    // Sincronizar datos con el store global cuando cambia el ID o nombre\n    useEffect(() => {\n      if (plubotId) {\n        setPlubotId(plubotId);\n      }\n      if (flowName !== name && name) {\n        setLocalFlowName(name);\n        setGlobalFlowName(name);\n      }\n    }, [plubotId, name, flowName, setPlubotId, setGlobalFlowName]);\n\n    // Guardado automático de respaldo al cerrar la pestaña\n    useEffect(() => {\n      const handleBeforeUnload = () => saveLocalBackup();\n      window.addEventListener('beforeunload', handleBeforeUnload);\n      return () =>\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n    }, [saveLocalBackup]);\n\n    // Comprobar si existe un respaldo al montar el componente\n    useEffect(() => {\n      if (hasLocalBackup()) {\n        setBackupExists(true);\n        setRecoveryOpen(true);\n      }\n    }, [hasLocalBackup]); // Se ejecuta si la función de backup cambia\n\n    // ==============================================\n    // SECCIÓN 4: FUNCIONES Y CALLBACKS\n    // ==============================================\n\n    const saveHistoryState = useCallback(() => {\n      const flowState = {\n        nodes: useFlowStore.getState().nodes,\n        edges: useFlowStore.getState().edges,\n      };\n      addToHistory(flowState);\n    }, [addToHistory]);\n\n    const { onConnectNodes } = useFlowElementsManager(\n      saveHistoryState,\n      setHasChanges,\n    );\n\n    const { onDragOver, onDrop } = useDragAndDropManager(\n      reactFlowWrapperReference,\n      reactFlowInstance,\n      setHasChanges,\n    );\n\n    // ==============================================;\n    // SECCIÓN 5: LÓGICA CONDICIONAL (Ultra Mode)\n    // ==============================================;\n\n    // Extraemos la lógica condicional a un componente separado para no violar las reglas de los hooks.\n    // El componente solo se renderiza si isUltraMode es true.\n    const ultraModeController = isUltraMode ? (\n      <UltraModeController\n        plubotId={plubotId}\n        backupEdgesToLocalStorage={createBackup} // <-- Pasar la función correcta\n        nodes={nodes}\n        edges={edges}\n        debouncedSave={debouncedSave}\n      />\n    ) : // eslint-disable-next-line unicorn/no-null\n    null;\n\n    useNodeStyles(isUltraMode);\n\n    const { openModal, closeModal } = useModalManager();\n\n    const {\n      show: showSaveStatus,\n      status: saveStatus,\n      message: saveMessage,\n      saveFlowHandler,\n    } = useFlowSaver(plubotId, handleError, setHasChanges);\n\n    const onNodesChangeOptimized = useCallback(\n      (changes) => {\n        onNodesChange(changes);\n        setHasChanges(true);\n      },\n      [onNodesChange],\n    );\n\n    const onEdgesChangeOptimized = useCallback(\n      (changes) => {\n        onEdgesChange(changes);\n        setHasChanges(true);\n      },\n      [onEdgesChange],\n    );\n\n    const onSelectionDragStop = useCallback(() => {\n      saveHistoryState();\n      setHasChanges(true);\n    }, [saveHistoryState]);\n\n    const onEdgeUpdate = useCallback(\n      (oldEdge, newConnection) => {\n        saveHistoryState();\n\n        setEdges((currentEdges) => {\n          const filtered = currentEdges.filter(\n            (edge) => edge.id !== oldEdge.id,\n          );\n          const newEdge = {\n            ...newConnection,\n            id: `e-${newConnection.source}-${newConnection.target}-${Date.now()}`,\n            type: oldEdge.type || 'elite-edge',\n            animated: oldEdge.animated || false,\n            data: oldEdge.data || { text: '' },\n          };\n          return [...filtered, newEdge];\n        });\n\n        setHasChanges(true);\n      },\n      [setEdges, saveHistoryState],\n    );\n\n    const [edgeUpdateSuccessful, setEdgeUpdateSuccessful] = useState(false);\n\n    const onEdgeUpdateStart = useCallback(() => {\n      setEdgeUpdateSuccessful(false);\n    }, []);\n\n    const onEdgeUpdateEnd = useCallback(\n      (_event, edge) => {\n        if (!edgeUpdateSuccessful) {\n          setEdges((currentEdges) =>\n            currentEdges.filter((currentEdge) => currentEdge.id !== edge.id),\n          );\n        }\n      },\n      [edgeUpdateSuccessful, setEdges],\n    );\n\n    // Handlers para el diálogo de recuperación\n    const handleRecover = useCallback(() => {\n      const backup = recoverFromBackup();\n      if (backup && backup.nodes && backup.edges) {\n        setNodes(backup.nodes);\n        setEdges(prepareEdgesForSaving(backup.edges)); // Asegurar compatibilidad\n      }\n      setRecoveryOpen(false);\n    }, [recoverFromBackup, setNodes, setEdges, setRecoveryOpen]);\n\n    const handleDismiss = useCallback(() => {\n      setRecoveryOpen(false);\n    }, [setRecoveryOpen]);\n\n    // ==============================================\n    // SECCIÓN 5: RENDERIZADO DEL COMPONENTE\n    // ==============================================\n    return (\n      <div className='flow-editor-container'>\n        <EpicHeader\n          title={flowName || 'Flujo sin título'}\n          setTitle={setLocalFlowName}\n          showChangeLog={false}\n          onSave={saveFlowHandler}\n          lastSaved={lastSaved}\n          showTemplateSelector={() => openModal('templateSelector')}\n          showEmbedModal={() => openModal('embedModal')}\n          showOptionsModal={() => openModal('importExportModal')}\n          showSimulateModal={() => openModal('simulationModal')}\n        />\n\n        {showSaveStatus && (\n          <StatusBubble\n            status={saveStatus}\n            message={saveMessage}\n            onClose={() => {\n              /* El hook se encarga de ocultarlo */\n            }}\n          />\n        )}\n\n        {ultraModeController}\n\n        <div className='flow-main-wrapper' ref={reactFlowWrapperReference}>\n          <EmergencyRecovery\n            isOpen={isRecoveryOpen}\n            onRecover={handleRecover}\n            onDismiss={handleDismiss}\n            hasBackup={backupExists}\n          />\n\n          <FlowMain\n            reactFlowInstance={reactFlowInstance}\n            setReactFlowInstance={setReactFlowInstance}\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChangeOptimized}\n            onEdgesChange={onEdgesChangeOptimized}\n            onConnect={onConnectNodes}\n            isValidConnection={isValidConnection}\n            project={{\n              id: plubotId,\n              name: flowName || name,\n            }}\n            onSave={saveFlowHandler}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n            onSelectionDragStop={onSelectionDragStop}\n            onEdgeUpdate={onEdgeUpdate}\n            onEdgeUpdateStart={onEdgeUpdateStart}\n            onEdgeUpdateEnd={onEdgeUpdateEnd}\n            isUltraMode={isUltraMode}\n            openModal={openModal}\n            closeModal={closeModal}\n            nodeExtent={NODE_EXTENT}\n            translateExtent={TRANSLATE_EXTENT}\n            minZoom={MIN_ZOOM}\n            onPaneClick={hideContextMenu}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nFlowEditorInner.displayName = 'FlowEditorInner';\n\nFlowEditorInner.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  handleError: PropTypes.func.isRequired,\n  hideContextMenu: PropTypes.func.isRequired,\n};\n\n/**\n * Componente principal FlowEditor que envuelve ReactFlowProvider\n * Proporciona un contexto global para ReactFlow y manejo de errores\n */\nconst FlowEditor = ({\n  selectedNode,\n  setSelectedNode,\n  handleError,\n  plubotId,\n  name,\n  saveFlowData,\n  hideHeader = false,\n}) => {\n  const { isAuthenticated } = useAuthStore((state) => ({\n    isAuthenticated: state.isAuthenticated,\n  }));\n  const isPublic = false;\n  const {\n    contextMenuVisible,\n    contextMenuPosition,\n    contextMenuItems,\n    hideContextMenu,\n  } = useFlowStore(\n    (state) => ({\n      contextMenuVisible: state.contextMenuVisible,\n      contextMenuPosition: state.contextMenuPosition,\n      contextMenuItems: state.contextMenuItems,\n      hideContextMenu: state.hideContextMenu,\n    }),\n    shallow,\n  );\n\n  // Si el usuario no está autenticado y no es una vista pública, no renderizar el editor.\n  // Esto previene el \"flash\" del estado por defecto durante la redirección.\n  if (!isAuthenticated && !isPublic) {\n    // eslint-disable-next-line unicorn/no-null\n    return null;\n  }\n\n  return (\n    <ReactFlowProvider>\n      <FlowEditorInner\n        selectedNode={selectedNode}\n        setSelectedNode={setSelectedNode}\n        handleError={handleError}\n        plubotId={plubotId}\n        name={name}\n        saveFlowData={saveFlowData}\n        hideHeader={hideHeader}\n        hideContextMenu={hideContextMenu}\n      />\n      {/* Global Context Menu Renderer */}\n      {contextMenuVisible &&\n        contextMenuPosition &&\n        contextMenuItems &&\n        contextMenuItems.length > 0 && (\n          <ContextMenu\n            position={contextMenuPosition}\n            items={contextMenuItems}\n            onClose={hideContextMenu}\n          />\n        )}\n    </ReactFlowProvider>\n  );\n};\n\nFlowEditor.propTypes = {\n  selectedNode: PropTypes.object,\n  setSelectedNode: PropTypes.func.isRequired,\n  handleError: PropTypes.func.isRequired,\n  plubotId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  saveFlowData: PropTypes.func.isRequired,\n  hideHeader: PropTypes.bool,\n};\n\nFlowEditor.displayName = 'FlowEditor';\n\nexport default FlowEditor;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/PerformancePatch.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/EdgeConsistencyMonitor.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/EdgePersistenceManager.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/EmergencyRecovery.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 15,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 112,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\n\nconst handleButtonFocus = (event) => {\n  event.currentTarget.style.boxShadow = '0 0 15px #FF00FF, 0 0 5px #FFFFFF';\n};\n\nconst handleButtonBlur = (event) => {\n  event.currentTarget.style.boxShadow = '0 0 10px #FF00FF';\n};\n\n/**\n * Componente de recuperación de emergencia que muestra un modal cuando se le indica.\n * Controlado por props desde un componente padre (ej. TrainingScreen).\n */\nconst EmergencyRecovery = ({ isOpen, onRecover, onDismiss, hasBackup }) => {\n  // La función handleRecovery ahora simplemente llama a la prop onRecover\n  const handleRecovery = () => {\n    if (onRecover) {\n      onRecover();\n    }\n  };\n\n  // La función handleClose ahora simplemente llama a la prop onDismiss\n  const handleClose = () => {\n    if (onDismiss) {\n      onDismiss();\n    }\n  };\n\n  // Si no está abierto o no hay backup, no renderizar nada.\n  // TrainingScreen decidirá si mostrar este modal o uno para \"empezar de nuevo\".\n  if (!isOpen || !hasBackup) {\n    return;\n  }\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        bottom: '30px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(10, 20, 40, 0.9)', // Dark blueish tech background\n        color: '#00FFFF', // Cyan text\n        padding: '15px 25px',\n        borderRadius: '10px',\n        border: '1px solid #FF00FF', // Magenta border\n        boxShadow:\n          '0 0 15px rgba(255, 0, 255, 0.7), 0 0 20px rgba(0, 255, 255, 0.5) inset', // Magenta outer glow, Cyan inner glow\n        zIndex: 9999,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: '12px',\n        fontFamily: '\"Orbitron\", sans-serif', // Techy font (ensure it's imported or available)\n        textAlign: 'center',\n      }}\n    >\n      <button\n        onClick={handleClose} // Conectar al onDismiss general\n        style={{\n          position: 'absolute',\n          top: '8px',\n          right: '10px',\n          background: 'transparent',\n          border: 'none',\n          color: '#00FFFF', // Cyan\n          fontSize: '24px',\n          fontWeight: 'bold',\n          cursor: 'pointer',\n          padding: '0',\n          lineHeight: '1',\n        }}\n        aria-label='Cerrar'\n      >\n        &times;\n      </button>\n      <div style={{ fontSize: '1.1em', fontWeight: 'bold' }}>\n        ⚠️ ¡Alerta de Fusión de Quanta! ⚠️\n      </div>\n      <div>\n        Se detectó una anomalía en la matriz de nodos. ¿Restaurar desde la\n        última singularidad estable?\n      </div>\n      <button\n        onClick={handleRecovery}\n        style={{\n          backgroundColor: '#FF00FF', // Magenta button\n          color: 'white',\n          border: '1px solid #00FFFF', // Cyan border\n          padding: '10px 20px',\n          borderRadius: '5px',\n          fontWeight: 'bold',\n          cursor: 'pointer',\n          textTransform: 'uppercase',\n          letterSpacing: '1px',\n          boxShadow: '0 0 10px #FF00FF',\n          transition: 'all 0.3s ease',\n        }}\n        onMouseOver={handleButtonFocus}\n        onFocus={handleButtonFocus}\n        onMouseOut={handleButtonBlur}\n        onBlur={handleButtonBlur}\n      >\n        Recuperar Continuidad Nodal\n      </button>\n      {/* Podríamos añadir un botón \"Empezar de Nuevo\" aquí si quisiéramos que este modal maneje ambos casos\n          pero por ahora, lo mantenemos simple y dejamos que TrainingScreen decida si mostrar este u otro mensaje/acción\n          cuando no hay backup. El botón de cerrar (X) llamará a onDismiss. */}\n    </div>\n  );\n};\n\nEmergencyRecovery.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onRecover: PropTypes.func.isRequired,\n  onDismiss: PropTypes.func.isRequired,\n  hasBackup: PropTypes.bool.isRequired,\n};\n\nexport default EmergencyRecovery;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/FlowControls.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/FlowMain.jsx",
    "messages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Async arrow function has too many parameters (5). Maximum allowed is 3.",
        "line": 66,
        "column": 75,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 66,
        "endColumn": 77
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 71,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 71,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [2434, 2488], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 98,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 98,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [3262, 3309], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Arrow function has too many parameters (5). Maximum allowed is 3.",
        "line": 116,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 116,
        "endColumn": 5
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 123,
        "column": 51,
        "nodeType": "MemberExpression",
        "endLine": 123,
        "endColumn": 66
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 149,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 149,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [4747, 4794], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (752). Maximum allowed is 80.",
        "line": 201,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 1276,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 20. Maximum allowed is 10.",
        "line": 201,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1276,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 896,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 928,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * FlowMain.jsx\n * Orquestador visual del editor de flujos\n * Responsable de renderizar nodos y conexiones usando ReactFlow\n *\n * @version 2.0.0\n */\n\n// External Libraries\nimport PropTypes from 'prop-types';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useTransition,\n} from 'react';\nimport ReactFlow, { Controls, useReactFlow, useViewport } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport useResizeObserver from 'use-resize-observer';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Internal Aliases (@)\nimport EmbedModal from '@/components/onboarding/modals/EmbedModal';\nimport ImportExportModal from '@/components/onboarding/modals/ImportExportModal';\nimport {\n  createNodeTypes,\n  edgeTypes as sharedEdgeTypes,\n} from '@/flow/nodeRegistry.jsx';\nimport useFlowStore from '@/stores/use-flow-store';\n\n// Parent Imports (../)\nimport { calculateCorrectDropPosition } from '../drop-position-fix';\nimport useAdaptivePerformance from '../hooks/useAdaptivePerformance';\nimport useContextMenu from '../hooks/useContextMenu';\nimport useNodeVirtualization from '../hooks/useNodeVirtualization';\nimport BackgroundScene from '../ui/BackgroundScene';\nimport ZoomControls from '../ui/ZoomControls';\nimport {\n  ensureNodesAreInteractive,\n  stopNodeInteractionObserver,\n} from '../utils/ensure-node-interaction';\nimport { fixNodePositions } from '../utils/fix-node-positions';\nimport { MIN_ZOOM, MAX_ZOOM } from '../utils/flow-extents';\nimport { getLODLevel, LOD_LEVELS } from '../utils/lodUtilities';\n\n// Sibling Imports (./) - Components & Logic\nimport EdgeContextMenu from './menus/EdgeContextMenu';\nimport NodeContextMenu from './menus/NodeContextMenu';\nimport MiniMapWrapper from './MiniMapWrapper';\nimport StorageQuotaManager from './StorageQuotaManager';\n\n// -----------------------------------------\n// Helper Functions\n// -----------------------------------------\n\n/**\n * Handles the logic for exporting flow data to a JSON file.\n * @param {Function} onSave - Function to save the flow before exporting.\n * @param {Array} nodes - The current nodes.\n * @param {Array} edges - The current edges.\n * @param {string} flowId - The ID of the flow.\n * @param {object} plubotInfo - Information about the Plubot.\n */\nconst handleFlowExport = async (onSave, nodes, edges, flowId, plubotInfo) => {\n  if (typeof onSave === 'function') {\n    try {\n      await onSave({ isManual: true });\n    } catch (error) {\n      console.error('Failed to save before export:', error);\n      // Decide if you want to proceed even if save fails\n    }\n  }\n  try {\n    const exportData = {\n      nodes: nodes || [],\n      edges: edges || [],\n      metadata: {\n        exportDate: new Date().toISOString(),\n        flowId,\n        plubotName: plubotInfo?.name || 'Mi Chatbot',\n      },\n    };\n    const jsonString = JSON.stringify(exportData, undefined, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `flujo-${\n      plubotInfo?.name || 'plubot'\n    }-${new Date().toISOString().slice(0, 10)}.json`;\n    document.body.append(a);\n    a.click();\n    a.remove();\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Failed to export flow:', error);\n  }\n};\n\n/**\n * Handles the logic for importing flow data from a JSON file.\n * @param {object} data - The imported data.\n * @param {Function} startTransition - React's startTransition.\n * @param {Function} setNodes - Function to update nodes.\n * @param {Function} setEdges - Function to update edges.\n * @param {Function} externalCloseModal - Function to close the modal.\n */\nconst handleFlowImport = (\n  data,\n  startTransition,\n  setNodes,\n  setEdges,\n  externalCloseModal,\n) => {\n  if (!data?.nodes || !data?.edges) return;\n\n  startTransition(() => {\n    try {\n      const newNodes = data.nodes.map((node) => ({ ...node, id: uuidv4() }));\n      const nodeIdMap = new Map(\n        data.nodes.map((node, index) => [node.id, newNodes[index].id]),\n      );\n      const newEdges = data.edges\n        .filter(\n          (edge) => nodeIdMap.has(edge.source) && nodeIdMap.has(edge.target),\n        )\n        .map((edge) => ({\n          ...edge,\n          id: uuidv4(),\n          source: nodeIdMap.get(edge.source),\n          target: nodeIdMap.get(edge.target),\n        }));\n\n      setNodes(newNodes);\n      setEdges(newEdges);\n\n      if (typeof externalCloseModal === 'function') {\n        externalCloseModal('importExportModal');\n      } else {\n        globalThis.dispatchEvent(\n          new CustomEvent('plubot-close-modal', {\n            detail: { modal: 'importExportModal' },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error('Failed to import flow:', error);\n    }\n  });\n};\n\n/**\n * Creates a new node object by duplicating an existing one.\n * @param {object} nodeToDuplicate - The node to duplicate.\n * @returns {object} The new duplicated node.\n */\nconst createDuplicatedNode = (nodeToDuplicate) => ({\n  id: uuidv4(),\n  type: nodeToDuplicate.type,\n  position: {\n    x: nodeToDuplicate.position.x + 40,\n    y: nodeToDuplicate.position.y + 40,\n  },\n  data: structuredClone(nodeToDuplicate.data),\n});\n\n// CSS Imports\nimport '../node-positioning.css';\nimport '../react-flow-overrides.css';\nimport '../ui/EliteEdge.css';\nimport '../ui/elite-drag-optimizations.css';\nimport '../ui/FlowControls.css';\nimport '../ui/hide-debug-elements.css';\nimport '../ui/HistoryControls.css';\nimport '../ui/mega-drag-fix.css';\nimport '../ui/remove-debug-styles.css';\nimport '../ui/SyncButton.css';\nimport '../ui/UltraMode.css';\nimport '../ui/VerticalButtons.css';\nimport '../ui/ZoomControls.css';\nimport './transparent-pane.css';\n\n// Importar y aplicar automáticamente el parche de validación de posiciones\n\n/**\n * Componente principal FlowMain\n * @param {Object} props - Propiedades del componente\n * @param {Object} props.project - Información del proyecto actual\n * @param {Function} props.onSave - Función para guardar cambios\n * @param {Object} props.reactFlowInstance - Instancia de ReactFlow (opcional)\n * @param {Function} props.setReactFlowInstance - Setter para la instancia de ReactFlow (opcional)\n * @param {Function} props.onNodesChange - Manejador para cambios en nodos (opcional)\n * @param {Function} props.onEdgesChange - Manejador para cambios en aristas (opcional)\n * @param {Function} props.onConnect - Manejador para conexiones (opcional)\n * @param {Function} props.onNodeClick - Manejador para clic en nodo (opcional)\n * @param {Function} props.onPaneClick - Manejador para clic en el panel (opcional)\n * @param {Function} props.onEdgeClick - Manejador para clic en arista (opcional)\n */\nconst FlowMain = ({\n  project,\n  onSave,\n  reactFlowInstance: incomingReactFlowInstance,\n  setReactFlowInstance, // Retained for clarity, will be used as externalSetReactFlowInstance internally\n  nodes: externalNodes,\n  edges: externalEdges,\n\n  onEdgesChange: externalOnEdgesChange,\n  onConnect: externalOnConnect,\n  onNodeClick: externalOnNodeClick,\n  onPaneClick: externalOnPaneClick,\n  onEdgeClick: externalOnEdgeClick,\n  onNodeDragStop: externalOnNodeDragStop,\n\n  onDragOver: externalOnDragOver,\n  onDrop: externalOnDrop,\n  onEdgeUpdate: externalOnEdgeUpdate,\n  onEdgeUpdateStart: externalOnEdgeUpdateStart,\n  onNodeDragStart: externalOnNodeDragStart,\n  onEdgeUpdateEnd: externalOnEdgeUpdateEnd,\n  onNodesDelete: externalOnNodesDelete,\n  onEdgesDelete: externalOnEdgesDelete,\n  onSelectionChange: externalOnSelectionChange,\n  onNodeDrag: externalOnNodeDrag,\n  nodeTypes: externalNodeTypes,\n  edgeTypes: externalEdgeTypes,\n  validConnectionsHandles: externalValidConnectionsHandles,\n  closeModal: externalCloseModal,\n  showEmbedModal: externalShowEmbedModal,\n  showImportExportModal: externalShowImportExportModal,\n  // Props for canvas behavior - utilizamos valores predeterminados si no se proporcionan\n  minZoom = MIN_ZOOM,\n}) => {\n  const [, startTransition] = useTransition();\n  // Props are now directly available from the function signature's destructuring.\n  // For clarity, `setReactFlowInstance` from props is aliased to `externalSetReactFlowInstance` if needed for callbacks.\n  const externalSetReactFlowInstance = setReactFlowInstance;\n\n  // `project`, `onSave`, `externalNodes`, `externalEdges`, `externalOnNodesChange`, etc.,\n  // `externalNodeTypes`, `externalEdgeTypes`, `externalOpenModal`, `externalCloseModal`,\n  // `externalShowEmbedModal`, `externalShowTemplateSelector`, `externalShowImportExportModal`\n  // are all directly available.\n  // -----------------------------------------\n  // REFERENCIAS Y ESTADO LOCAL\n  // -----------------------------------------\n  const flowContainerReference = useRef();\n  const reactFlowInstanceReference = useRef();\n  const isInitialLoad = useRef(true);\n\n  // Referencias para el estado del sistema\n  // Nota: Las referencias de rendimiento ahora se manejan en useAdaptivePerformance\n\n  // Estado local para menús contextuales y modales\n  const { fitView } = useReactFlow();\n  const [isDragging, setIsDragging] = useState(false);\n  const [lodLevel, setLodLevel] = useState(LOD_LEVELS.FULL); // Estado para el nivel de detalle\n\n  // Estados para modales internos (solo los que no vienen de props)\n\n  // La virtualización ahora es gestionada por el hook useNodeVirtualization.\n\n  // -----------------------------------------\n  // ACCESO AL STORE DE ZUSTAND (SELECTORES)\n  // -----------------------------------------\n  // Selectores optimizados para minimizar renderizaciones\n  const zustandNodes = useFlowStore((state) => state.nodes || []);\n  const zustandEdges = useFlowStore((state) => state.edges || []);\n  const isUltraMode = useFlowStore((state) => state.isUltraMode);\n  const plubotId = useFlowStore((state) => state.plubotId);\n  const flowName = useFlowStore((state) => state.flowName);\n\n  // Flag de estado para controlar la renderización de las aristas y evitar condiciones de carrera.\n  const [areEdgesReady, setAreEdgesReady] = useState(false);\n\n  // WORKAROUND: Soluciona una condición de carrera en la rehidratación.\n  // Se retrasa la renderización de las aristas para dar tiempo a los nodos a registrar sus handles.\n  useEffect(() => {\n    // Se establece un temporizador que cambiará el estado a 'listo' después de un breve retraso.\n    // Esto asegura que el primer renderizado se complete solo con los nodos.\n    const timer = setTimeout(() => {\n      setAreEdgesReady(true);\n    }, 150); // Retraso aumentado para mayor robustez en entornos complejos.\n\n    // Limpieza del temporizador si el componente se desmonta antes de que se complete.\n    return () => clearTimeout(timer);\n  }, []); // El array de dependencias vacío asegura que se ejecute solo una vez, al montar.\n\n  // Acciones del store con memoización\n  const setReactFlowInstanceFromStore = useFlowStore(\n    (state) => state.setReactFlowInstance,\n  );\n  const {\n    setNodes,\n    setEdges,\n    onNodesChange,\n    onEdgesChange,\n    onConnect,\n    toggleUltraMode,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    setIsNodeBeingDragged,\n  } = useFlowStore();\n\n  // Determinar si se están usando nodos externos o internos\n  const nodes = externalNodes ?? zustandNodes;\n  const edges = useMemo(\n    () => (areEdgesReady ? (externalEdges ?? zustandEdges) : []),\n    [areEdgesReady, externalEdges, zustandEdges],\n  );\n\n  // Efecto para centrar la vista únicamente en la carga inicial del flujo.\n  // Esto evita el reajuste automático al mover nodos, dando control total al usuario.\n  useEffect(() => {\n    // Solo se ejecuta si es la carga inicial, hay nodos y la función fitView está disponible.\n    if (isInitialLoad.current && nodes.length > 0 && fitView) {\n      fitView({ duration: 250, padding: 0.1 }); // Animación suave y un poco de padding\n      isInitialLoad.current = false; // Marcamos que la carga inicial ya pasó.\n    }\n  }, [nodes, fitView]); // Depende de los nodos para asegurar que se ejecuta cuando ya están cargados.\n\n  // -----------------------------------------\n  // HOOKS PERSONALIZADOS\n  // -----------------------------------------\n  // Lógica del menú contextual extraída a un hook personalizado.\n  const {\n    menu,\n    onNodeContextMenu,\n    onEdgeContextMenu,\n    onPaneClick: handlePaneClickForMenu,\n    closeContextMenu,\n  } = useContextMenu();\n  // Sistema unificado de optimización de rendimiento\n  const {\n    optimizationLevel,\n    startMonitoring,\n    updatePerformance,\n\n    fpsRef,\n  } = useAdaptivePerformance();\n\n  // Estadísticas de rendimiento accesibles en la UI\n\n  // Obtener estilos para nodos\n  // Instancia de ReactFlow para operaciones de viewport\n  const reactFlowInstance = useReactFlow();\n\n  // --- NUEVO SISTEMA DE VIRTUALIZACIÓN DE ALTO RENDIMIENTO ---\n  const {\n    ref: flowWrapperReference,\n    width: containerWidth,\n    height: containerHeight,\n  } = useResizeObserver();\n  const viewport = useViewport();\n\n  // El corazón de la nueva arquitectura: el hook de virtualización\n  const { visibleNodes, visibleEdges } = useNodeVirtualization({\n    nodes,\n    edges,\n    viewport,\n    containerDimensions: { width: containerWidth, height: containerHeight },\n    // Opciones adicionales para el hook de virtualización si fueran necesarias\n  });\n\n  // --- GESTIÓN CENTRALIZADA DE LOD CON HISTÉRESIS CORREGIDA ---\n\n  const hysteresisTimer = useRef();\n\n  // Efecto para gestionar el Nivel de Detalle (LOD) con histéresis.\n  useEffect(() => {\n    // Aquí se podrían pasar umbrales personalizados si se cargaran desde una config.\n    const newLodLevel = getLODLevel(viewport.zoom);\n\n    if (newLodLevel !== lodLevel) {\n      clearTimeout(hysteresisTimer.current);\n\n      // Si el nuevo nivel es MÁS detallado (número mayor), actualiza inmediatamente.\n      setLodLevel(newLodLevel);\n    }\n\n    // Capturar el valor de la referencia para usarlo en la función de limpieza.\n    // Esto asegura que se limpie el temporizador correcto, evitando condiciones de carrera.\n    const timerId = hysteresisTimer.current;\n    return () => clearTimeout(timerId);\n  }, [viewport.zoom, lodLevel]);\n\n  // INSTRUMENTATION: Log canvas zoom and LOD changes\n\n  // INSTRUMENTATION: Log canvas panning\n\n  // Inyectar el nivel de LOD calculado centralmente en los nodos visibles.\n  const nodesWithLOD = useMemo(() => {\n    return visibleNodes.map((node) => ({\n      ...node,\n      data: {\n        ...node.data,\n        lodLevel, // Inyectar el nivel de LOD desde el estado centralizado.\n      },\n    }));\n  }, [visibleNodes, lodLevel]);\n\n  // Inyectar el nivel de LOD en las aristas visibles para sincronizar su apariencia.\n  const edgesWithLOD = useMemo(() => {\n    // La animación de las aristas depende tanto del modo ultra como del nivel de LOD.\n    // Se animan solo en modo normal y con el máximo nivel de detalle.\n    const areEdgesAnimated = !isUltraMode && lodLevel === LOD_LEVELS.FULL;\n\n    return visibleEdges.map((edge) => ({\n      ...edge,\n      animated: areEdgesAnimated,\n      data: {\n        ...edge.data,\n        lodLevel, // Inyectar el mismo lodLevel que a los nodos.\n      },\n    }));\n  }, [visibleEdges, lodLevel, isUltraMode]);\n\n  // INSTRUMENTATION: Log virtualization stats\n  // --- FIN DEL NUEVO SISTEMA DE VIRTUALIZACIÓN ---\n\n  // -----------------------------------------\n  // TIPOS DE NODOS Y ARISTAS\n  // -----------------------------------------\n  const nodeTypes = useMemo(() => {\n    // Si se proporcionan tipos de nodos externos, se usan directamente.\n    if (externalNodeTypes) {\n      return externalNodeTypes;\n    }\n    // De lo contrario, se crean los tipos de nodo estándar.\n    // El modo Ultra y el LOD se gestionan inyectando `lodLevel` en los datos de cada nodo,\n    // por lo que no es necesario un HOC (`withLOD`) aquí.\n    return createNodeTypes(false); // `false` indica que no estamos en modo ultra a nivel de tipo de nodo.\n  }, [externalNodeTypes]);\n\n  // 3. Se memoizan los tipos de aristas.\n  const edgeTypes = useMemo(() => {\n    // Si se proporcionan tipos de aristas externos, se usan directamente.\n    if (externalEdgeTypes) {\n      return externalEdgeTypes;\n    }\n    // De lo contrario, se utilizan los tipos de aristas compartidos.\n    // El LOD se gestiona a través de las props de las aristas, por lo que no se necesita HOC.\n    return sharedEdgeTypes;\n  }, [externalEdgeTypes]);\n\n  // -----------------------------------------\n  // MANEJADORES DE EVENTOS\n  // -----------------------------------------\n  /**\n   * Manejador para cambios en nodos\n   * @param {Array} changes - Cambios a aplicar a los nodos\n   */\n\n  /**\n   * Manejador para cambios en aristas\n   * Permite actualizar el estado global\n   * @param {Array} changes - Cambios en las aristas\n   */\n  const handleEdgesChange = useCallback(\n    (changes) => {\n      // Sanitizar paths de aristas antes de aplicar los cambios\n      const sanitizedChanges = changes.map((change) => {\n        // Si el cambio es del tipo 'add' y tiene un item con data.path, sanitizar el path\n        if (\n          change.type === 'add' &&\n          change.item &&\n          change.item.data &&\n          change.item.data.path\n        ) {\n          return {\n            ...change,\n            item: {\n              ...change.item,\n              data: {\n                ...change.item.data,\n                path: change.item.data.path.replaceAll('NaN', '0'),\n              },\n            },\n          };\n        }\n        return change;\n      });\n\n      // Manejar cambios en las aristas\n      if (externalOnEdgesChange) {\n        externalOnEdgesChange(sanitizedChanges);\n      } else {\n        onEdgesChange(sanitizedChanges);\n      }\n    },\n    [externalOnEdgesChange, onEdgesChange],\n  );\n\n  /**\n   * Manejador para conexiones entre nodos\n   * @param {Object} params - Parámetros de la conexión\n   */\n  const handleConnect = useCallback(\n    (parameters) => {\n      if (externalOnConnect) {\n        externalOnConnect(parameters);\n      } else {\n        onConnect(parameters);\n      }\n    },\n    [externalOnConnect, onConnect],\n  );\n\n  /**\n   * Manejador para clic en nodo\n   * @param {Event} event - Evento del clic\n   * @param {Object} node - Nodo seleccionado\n   */\n  const handleNodesDelete = useCallback(\n    (nodesToDelete) => {\n      if (externalOnNodesDelete) {\n        externalOnNodesDelete(nodesToDelete);\n      }\n      closeContextMenu();\n    },\n    [externalOnNodesDelete, closeContextMenu],\n  );\n\n  const handleEdgesDelete = useCallback(\n    (edgesToDelete) => {\n      if (externalOnEdgesDelete) {\n        externalOnEdgesDelete(edgesToDelete);\n      }\n      closeContextMenu();\n    },\n    [externalOnEdgesDelete, closeContextMenu],\n  );\n\n  const handleDuplicateNode = useCallback(\n    (nodeToDuplicate) => {\n      const newNode = createDuplicatedNode(nodeToDuplicate);\n      useFlowStore.getState().addNode(newNode);\n      closeContextMenu();\n    },\n    [closeContextMenu],\n  );\n\n  const handleEditNode = useCallback(\n    (_nodeToEdit) => {\n      // Lógica de edición de nodos pendiente de implementación.\n      closeContextMenu();\n    },\n    [closeContextMenu],\n  );\n\n  const handleNodeClick = useCallback(\n    (event, node) => {\n      if (externalOnNodeClick) {\n        externalOnNodeClick(event, node);\n      }\n      closeContextMenu();\n    },\n    [externalOnNodeClick, closeContextMenu],\n  );\n\n  const handlePaneClick = useCallback(\n    (event) => {\n      handlePaneClickForMenu(event);\n      if (externalOnPaneClick) {\n        externalOnPaneClick(event);\n      }\n    },\n    [externalOnPaneClick, handlePaneClickForMenu],\n  );\n\n  const handleEdgeClick = useCallback(\n    (event, edge) => {\n      if (externalOnEdgeClick) {\n        externalOnEdgeClick(event, edge);\n      }\n      closeContextMenu();\n    },\n    [externalOnEdgeClick, closeContextMenu],\n  );\n\n  const onNodeDragStart = useCallback(\n    (event, node) => {\n      setIsDragging(true);\n      setIsNodeBeingDragged(true);\n      if (externalOnNodeDragStart) {\n        externalOnNodeDragStart(event, node);\n      }\n    },\n    [externalOnNodeDragStart, setIsNodeBeingDragged],\n  );\n\n  const onNodeDrag = useCallback(\n    (event, node) => {\n      if (externalOnNodeDrag) {\n        externalOnNodeDrag(event, node);\n      }\n    },\n    [externalOnNodeDrag],\n  );\n\n  const onEdgeUpdateStart = useCallback(\n    (event, edge) => {\n      if (externalOnEdgeUpdateStart) {\n        externalOnEdgeUpdateStart(event, edge);\n      }\n    },\n    [externalOnEdgeUpdateStart],\n  );\n\n  const onEdgeUpdateEnd = useCallback(\n    (event, edge) => {\n      if (externalOnEdgeUpdateEnd) {\n        externalOnEdgeUpdateEnd(event, edge);\n      }\n    },\n    [externalOnEdgeUpdateEnd],\n  );\n\n  const onNodesDelete = useCallback(\n    (nodesToDelete) => {\n      if (externalOnNodesDelete) externalOnNodesDelete(nodesToDelete);\n    },\n    [externalOnNodesDelete],\n  );\n\n  const onEdgesDelete = useCallback(\n    (edgesToDelete) => {\n      const localEdges = edgesToDelete;\n      if (externalOnEdgesDelete) {\n        externalOnEdgesDelete(localEdges);\n      }\n    },\n    [externalOnEdgesDelete],\n  );\n\n  const onSelectionChange = useCallback(\n    (parameters) => {\n      // Lógica unificada para manejar el cambio de selección, evitando procesamiento durante el arrastre.\n      const shouldProcess = !isDragging;\n\n      if (externalOnSelectionChange && shouldProcess) {\n        externalOnSelectionChange(parameters);\n      }\n      // La gestión de la selección interna (setSelectedNode) se ha eliminado.\n      // React Flow maneja su propia selección visualmente.\n      // Si se necesita un estado de nodo seleccionado, debe ser gestionado por el componente padre\n      // y pasado a través de props, o reimplementado de una manera que no entre en conflicto.\n    },\n    [externalOnSelectionChange, isDragging],\n  );\n\n  const handleNodeDragStop = useCallback(\n    (event, node) => {\n      setIsDragging(false);\n      setIsNodeBeingDragged(false);\n      if (externalOnNodeDragStop) {\n        externalOnNodeDragStop(event, node);\n      }\n    },\n    [externalOnNodeDragStop, setIsNodeBeingDragged],\n  );\n\n  const handleDragOver = useCallback(\n    (event) => {\n      if (externalOnDragOver) {\n        externalOnDragOver(event);\n      } else {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n      }\n    },\n    [externalOnDragOver],\n  );\n\n  const handleDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      // Si hay un manejador externo, lo llamamos primero\n      if (externalOnDrop) {\n        externalOnDrop(event);\n        return;\n      }\n\n      // Implementación directa utilizando drop-position-fix.js\n      try {\n        // Obtener el tipo de nodo desde el dataTransfer\n        const nodeType = event.dataTransfer.getData('application/reactflow');\n        if (!nodeType) {\n          return;\n        }\n\n        // Importar la función de cálculo de posición de drop-position-fix.js\n        const position = calculateCorrectDropPosition(event);\n\n        // Crear nuevo nodo con la posición calculada\n        const newNode = {\n          id: `${nodeType.toLowerCase()}-${Date.now()}`,\n          type: nodeType,\n          position,\n          data: { label: `Nuevo ${nodeType}` },\n          dragHandle: '.custom-drag-handle',\n        };\n\n        // Añadir el nodo al store\n        useFlowStore.getState().addNode(newNode);\n      } catch {\n        // Error handling without logging\n      }\n    },\n    [externalOnDrop],\n  );\n\n  const handleEdgeUpdate = useCallback(\n    (oldEdge, newConnection) => {\n      if (externalOnEdgeUpdate) {\n        externalOnEdgeUpdate(oldEdge, newConnection);\n      }\n    },\n    [externalOnEdgeUpdate],\n  );\n\n  /**\n   * Manejador para fin de actualización de arista\n   * @param {Event} event - Evento de actualización\n   * @param {Object} edge - Arista actualizada\n   */\n\n  /**\n   * Validador de conexiones entre nodos\n   * @param {Object} connection - Conexión a validar\n   * @returns {boolean} - true si la conexión es válida\n   */\n  const isValidConnection = useCallback(\n    (connection) => {\n      // Siempre delegar a externalValidConnectionsHandles si se proporciona.\n      // Esta función ahora vendrá de useHandleValidator en FlowEditor.jsx y contendrá toda la lógica.\n      if (typeof externalValidConnectionsHandles === 'function') {\n        return externalValidConnectionsHandles(connection);\n      }\n\n      // Fallback MUY permisivo si no se proporciona un validador externo (no debería ocurrir en este proyecto).\n      return true;\n    },\n    [externalValidConnectionsHandles],\n  );\n\n  // -----------------------------------------\n  // FUNCIONES AUXILIARES\n  // -----------------------------------------\n  /**\n   * Funciones para gestionar los modales\n   */\n\n  /**\n   * Manejador optimizado para alternar modo Ultra Rendimiento\n   * Usa el sistema centralizado UltraModeManager\n   */\n  const handleToggleUltraMode = useCallback(() => {\n    // Buscar contenedor de botones\n    const buttonsContainer = document.querySelector(\n      '.editor-controls-container',\n    );\n\n    if (buttonsContainer) {\n      // Evitar múltiples clics durante la transición\n      if (buttonsContainer.dataset.transitioning === 'true') {\n        return;\n      }\n\n      // Marcar como en transición\n      buttonsContainer.dataset.transitioning = 'true';\n\n      // 1. Cambiar la apariencia visual del botón inmediatamente\n      const ultraButton = document.querySelector('.editor-button.ultra');\n      if (ultraButton) {\n        if (isUltraMode) {\n          ultraButton.style.border = '1px solid rgba(0, 200, 224, 0.8)';\n          ultraButton.style.boxShadow =\n            '0 0 8px rgba(0, 200, 224, 0.5), 0 0 4px rgba(0, 200, 224, 0.3) inset';\n        } else {\n          ultraButton.style.border = '1px solid rgba(227, 23, 227, 0.8)';\n          ultraButton.style.boxShadow =\n            '0 0 8px rgba(227, 23, 227, 0.5), 0 0 4px rgba(227, 23, 227, 0.3) inset';\n        }\n      }\n\n      // 2. Cambiar el estado en el store\n      toggleUltraMode();\n\n      // 3. Usar el UltraModeManager para gestionar todas las animaciones\n      // if (isUltraMode) {\n      //   // Desactivando modo ultra - restaurar animaciones\n      //   restoreAnimations(); // Deprecado: La lógica de animación ahora es manejada por CSS y el store.\n      // } else {\n      //   // Activando modo ultra - detener animaciones\n      //   stopAllAnimations(true); // Deprecado: La lógica de animación ahora es manejada por CSS y el store.\n      // }\n\n      // 4. Permitir nuevas interacciones después de un tiempo\n      setTimeout(() => {\n        buttonsContainer.dataset.transitioning = 'false';\n      }, 100); // Reducido para mayor fluidez\n    } else {\n      // Si no encontramos el contenedor, usar solo el sistema centralizado\n      // La única responsabilidad del atajo de teclado es invocar la acción del store.\n      // El store se encarga de la lógica interna, incluyendo la manipulación del DOM.\n      toggleUltraMode();\n    }\n  }, [toggleUltraMode, isUltraMode]);\n\n  /**\n   * Objeto con información del plubot para los modales\n   */\n  const plubotInfo = useMemo(\n    () => ({\n      id: project?.id || plubotId,\n      name: project?.name || flowName || 'Flujo sin nombre',\n    }),\n    [project, plubotId, flowName],\n  );\n\n  // ID del flujo (igual al ID del plubot)\n  const flowId = project?.id || plubotId;\n\n  // Aplicar solución unificada para todos los problemas de ReactFlow\n  useEffect(() => {\n    // Importamos la solución optimizada\n    // import('../utils/optimized-flow-fixes').then(({ initOptimizedFixes }) => {\n    // Configuración mínima: sin logs y con intervalo largo para mejor rendimiento\n    /*      const cleanup = initOptimizedFixes({\n    id: project?.id || plubotId,\n    name: project?.name || flowName || 'Flujo sin nombre'\n  }), [project, plubotId, flowName]);\n\n  // ID del flujo (igual al ID del plubot)\n  const flowId = project?.id || plubotId;\n\n  // Aplicar solución unificada para todos los problemas de ReactFlow\n  useEffect(() => {\n    // Importamos la solución optimizada\n    // import('../utils/optimized-flow-fixes').then(({ initOptimizedFixes }) => {\n      // Configuración mínima: sin logs y con intervalo largo para mejor rendimiento\n/*      const cleanup = initOptimizedFixes({\n        enableLogs: import.meta.env.MODE === 'development' && false, // Deshabilitar logs incluso en desarrollo\n        fixInterval: 3000, // Reducir frecuencia a 3 segundos\n        fixes: {\n          nodeDrag: true,\n          nodeVisibility: true,\n          removeBlueRectangle: true,\n          hideControls: true\n        }\n      });\n\n      // Notificar que las correcciones se han aplicado\n      window.dispatchEvent(new CustomEvent('flow-fixed'));\n\n      // Devolver función de limpieza\n      return () => {}; // Devolver una función de limpieza vacía\n    }); */\n    /*    }).catch(error => {\n      // Error al inicializar fixes optimizados\n    }); */\n  }, []); // Sin dependencias para ejecutarse solo al montar/desmontar\n\n  /**\n   * Efecto para sincronizar instancia de ReactFlow\n   */\n  useEffect(() => {\n    if (incomingReactFlowInstance) {\n      reactFlowInstanceReference.current = incomingReactFlowInstance;\n    }\n  }, [incomingReactFlowInstance]);\n\n  /**\n   * Efecto para iniciar el sistema de monitoreo de rendimiento\n   */\n  useEffect(() => {\n    // Iniciar el sistema de monitoreo de rendimiento adaptativo\n    const cleanup = startMonitoring(nodes, edges);\n\n    // Actualizar el rendimiento con el viewport actual\n    if (reactFlowInstance) {\n      const currentViewport = reactFlowInstance.getViewport();\n      updatePerformance(currentViewport);\n    }\n\n    return cleanup;\n  }, [nodes, edges, startMonitoring, updatePerformance, reactFlowInstance]);\n\n  /**\n   * Efecto para aplicar correcciones cuando cambian los nodos\n   */\n  useEffect(() => {\n    if (!nodes || !Array.isArray(nodes)) return;\n\n    // Solo aplicar si hay nodos y no es la carga inicial\n    if (nodes.length > 0 && !isInitialLoad.current) {\n      try {\n        // Usar la versión actualizada de fixNodePositions que acepta un array directamente\n        // y una función para actualizar los nodos\n        const updatedNodes = fixNodePositions(nodes);\n\n        // Si se obtuvieron nodos actualizados y son diferentes, actualizarlos\n        if (\n          updatedNodes &&\n          updatedNodes !== nodes &&\n          typeof setNodes === 'function'\n        ) {\n          setNodes(updatedNodes);\n        }\n      } catch {\n        // Error handling without logging\n      }\n\n      // Aplicar el sistema de garantía de interacción\n      ensureNodesAreInteractive();\n    }\n\n    // Marcar que ya no es la carga inicial\n    if (isInitialLoad.current && nodes.length > 0) {\n      isInitialLoad.current = false;\n      // Garantizar interacción después de la carga inicial\n      setTimeout(() => ensureNodesAreInteractive(true), 300);\n    }\n  }, [nodes, setNodes]);\n\n  /**\n   * Efectos de limpieza y monitoreo de cambios\n   */\n  useEffect(() => {\n    return () => {\n      // Limpiar recursos cuando el componente se desmonta\n\n      // Detener el sistema de garantía de interacción de nodos\n      stopNodeInteractionObserver();\n    };\n  }, []);\n\n  // Efecto para manejar el montaje y desmontaje del simulador\n  useEffect(() => {\n    return () => {\n      // Limpiar cualquier estado o referencia al simulador al desmontar\n      if (reactFlowInstanceReference.current) {\n        reactFlowInstanceReference.current = undefined;\n      }\n    };\n  }, []);\n\n  // La lógica de virtualización ahora está centralizada en el hook useNodeVirtualization\n  // y se actualiza reactivamente. No se necesita lógica adicional aquí.\n\n  // -----------------------------------------\n  // RENDERIZADO\n  // -----------------------------------------\n  return (\n    <div\n      className='flow-main'\n      ref={flowContainerReference}\n      style={{ width: '100%', height: '100%', minHeight: '500px' }}\n    >\n      {/* Gestor de cuota de almacenamiento - componente invisible que limpia localStorage */}\n      <StorageQuotaManager project={project} />\n\n      {/* SOLUCIÓN DIRECTA: ReactFlow con configuración optimizada para posicionamiento correcto */}\n      <div\n        className='flow-main-container'\n        ref={flowWrapperReference}\n        style={{ width: '100%', height: '100%' }}\n      >\n        <ReactFlow\n          nodes={nodesWithLOD} // Usar nodos con LOD inyectado\n          edges={edgesWithLOD} // Usar aristas con LOD inyectado\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          onPaneClick={handlePaneClick}\n          onNodesChange={onNodesChange}\n          onEdgesChange={handleEdgesChange}\n          onConnect={handleConnect}\n          onInit={(instance) => {\n            // Guardar la instancia\n            reactFlowInstanceReference.current = instance;\n            if (globalThis.window !== undefined) {\n              globalThis.reactFlowInstance = instance;\n            }\n            setReactFlowInstanceFromStore(instance);\n\n            // Si hay una función externa para establecer la instancia, llamarla\n            if (typeof externalSetReactFlowInstance === 'function') {\n              externalSetReactFlowInstance(instance);\n            }\n          }}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onNodeClick={handleNodeClick}\n          onEdgeClick={handleEdgeClick}\n          onNodeDragStop={handleNodeDragStop}\n          onEdgeUpdate={handleEdgeUpdate}\n          onNodeContextMenu={onNodeContextMenu}\n          onEdgeContextMenu={onEdgeContextMenu}\n          onNodeDragStart={onNodeDragStart}\n          onNodeDrag={onNodeDrag}\n          onEdgeUpdateStart={onEdgeUpdateStart}\n          onEdgeUpdateEnd={onEdgeUpdateEnd}\n          onNodesDelete={onNodesDelete}\n          onEdgesDelete={onEdgesDelete}\n          onSelectionChange={onSelectionChange}\n          fitView={false}\n          snapToGrid={false}\n          snapGrid={[15, 15]}\n          deleteKeyCode={['Backspace', 'Delete']}\n          multiSelectionKeyCode={['Control', 'Meta']}\n          selectionKeyCode='Shift'\n          panActivationKeyCode='Space'\n          zoomActivationKeyCode='Meta'\n          connectionRadius={75}\n          maxZoom={MAX_ZOOM}\n          minZoom={minZoom}\n          defaultViewport={{ x: 0, y: 0, zoom: 1 }} // Corregido para usar defaultViewport\n          nodeExtent={[\n            [-50_000, -50_000],\n            [50_000, 50_000],\n          ]} /* Configuración ampliada para máxima libertad de posicionamiento */\n          translateExtent={[\n            [-50_000, -50_000],\n            [50_000, 50_000],\n          ]} /* Configuración ampliada para permitir panear libremente */\n          proOptions={{ hideAttribution: true }}\n          className='flow-main-canvas'\n          onlyRenderVisibleElements={\n            false\n          } /* IMPORTANTE: Mantener desactivado para mostrar todos los nodos */\n          isValidConnection={isValidConnection}\n          fitViewOptions={{ padding: 0.2, includeHiddenNodes: true }}\n          autoPanOnConnect={false}\n          autoPanOnNodeDrag={false}\n          attributionPosition='bottom-right'\n          elementsSelectable\n          defaultEdgeOptions={{ zIndex: 0 }}\n          nodesDraggable\n          nodesConnectable\n          // SOLUCIÓN MEJORADA: Configuración optimizada para navegación y zoom\n          panOnScroll={false} // Desactivamos pan con scroll para permitir zoom\n          zoomOnScroll // CRUCIAL: Habilitamos zoom con rueda\n          zoomOnPinch // Habilitamos zoom con pellizco en dispositivos táctiles\n          panOnDrag // Habilitamos mover el canvas con arrastre\n          // Importante: Evitar que el scroll afecte a la página cuando estamos en el editor\n          preventScrolling\n          // Habilitar zoom con doble clic y establecer rangos de zoom\n          zoomOnDoubleClick\n          style={{\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            background:\n              'transparent' /* SOLUCIÓN DEFINITIVA: Fondo transparente */,\n          }}\n        >\n          {/* Componente de corrección para forzar visibilidad de nodos */}\n          {/* Componente NodeVisibilityFix eliminado */}\n          {/* IMPORTANTE: BackgroundScene como fondo principal del editor */}\n          <div\n            className='ts-background-scene-container'\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              zIndex: -5,\n            }}\n          >\n            <BackgroundScene isUltraMode={isUltraMode} />\n          </div>\n\n          {/* Mini mapa personalizado con versión mejorada */}\n          <div className='flow-minimap-container bottom-left'>\n            <MiniMapWrapper\n              nodes={visibleNodes}\n              edges={visibleEdges} // Usar solo las aristas visibles\n              isExpanded={false}\n              isUltraMode={isUltraMode}\n              viewport={{}}\n              setByteMessage={() => {\n                /* intencionalmente vacío */\n              }}\n            />\n          </div>\n\n          {/* Controles de zoom y utilidades - Renderizado estable */}\n          <Controls\n            showInteractive={false}\n            showFitView={false}\n            showZoom={false}\n            style={{ zIndex: 9999 }} // Asegurar que esté por encima de otros elementos\n          />\n\n          {/* Monitor de rendimiento - Opcional */}\n          {typeof process !== 'undefined' &&\n            import.meta.env.MODE === 'development' && (\n              <div className='perf-monitor'>\n                FPS: {fpsRef.current.toFixed(1)}\n                {fpsRef.current < 30 && !isUltraMode && (\n                  <span className='perf-warning'> | Activar Ultra</span>\n                )}\n              </div>\n            )}\n\n          {/* Menús contextuales */}\n          {menu && menu.type === 'node' && (\n            <NodeContextMenu\n              nodeId={menu.id}\n              position={{ x: menu.left, y: menu.top }}\n              onClose={closeContextMenu}\n              onDelete={handleNodesDelete}\n              onDuplicate={handleDuplicateNode}\n              onEdit={handleEditNode}\n              nodeData={menu.data}\n            />\n          )}\n          {menu && menu.type === 'edge' && (\n            <EdgeContextMenu\n              edgeId={menu.id}\n              position={{ x: menu.left, y: menu.top }}\n              onClose={closeContextMenu}\n              onDelete={handleEdgesDelete}\n            />\n          )}\n\n          {/* Indicador de nivel de optimización adaptativa */}\n          {optimizationLevel !== 'none' && (\n            <div className={`optimization-indicator ${optimizationLevel}`}>\n              MODO {optimizationLevel.toUpperCase()}\n            </div>\n          )}\n        </ReactFlow>\n      </div>\n\n      {/* Contenedor para los controles de la barra lateral - Posicionamiento absoluto para evitar reflow */}\n      <div\n        className='vertical-buttons-container'\n        style={{\n          position: 'absolute',\n          top: '80px',\n          right: '10px',\n          zIndex: 999,\n          pointerEvents: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        {/* Botón Ultra Rendimiento - Versión estable */}\n        <div\n          className='button-group'\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: '10px',\n          }}\n        >\n          <button\n            className={`editor-button ultra ${isUltraMode ? 'active' : ''} zoom-control-button`}\n            onClick={handleToggleUltraMode}\n            style={{\n              width: '36px',\n              height: '36px',\n              borderRadius: '8px',\n              backgroundColor: 'rgba(10, 20, 35, 0.5)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer',\n              position: 'relative',\n              border: isUltraMode\n                ? '1px solid rgba(227, 23, 227, 0.8)'\n                : '1px solid rgba(0, 200, 224, 0.8)',\n              boxShadow: isUltraMode\n                ? '0 0 8px rgba(227, 23, 227, 0.5), 0 0 4px rgba(227, 23, 227, 0.3) inset'\n                : '0 0 8px rgba(0, 200, 224, 0.5), 0 0 4px rgba(0, 200, 224, 0.3) inset',\n            }}\n          >\n            <svg\n              width='16'\n              height='16'\n              viewBox='0 0 24 24'\n              fill='none'\n              xmlns='http://www.w3.org/2000/svg'\n            >\n              <path\n                d='M13 2L3 14H12L11 22L21 10H12L13 2Z'\n                stroke='currentColor'\n                strokeWidth='2'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n              />\n            </svg>\n            <div className='button-tooltip'>Modo Ultra Rendimiento</div>\n          </button>\n        </div>\n\n        <div className='button-spacer' />\n\n        {/* Componente ZoomControls */}\n        <ZoomControls\n          onUndo={undo}\n          onRedo={redo}\n          onZoomIn={() => reactFlowInstance.zoomIn({ duration: 300 })}\n          onZoomOut={() => reactFlowInstance.zoomOut({ duration: 300 })}\n          onFitView={() =>\n            reactFlowInstance.fitView({ duration: 300, padding: 0.1 })\n          }\n          canUndo={canUndo}\n          canRedo={canRedo}\n        />\n\n        <div className='button-spacer' />\n\n        {/* Modal de compartir (EmbedModal) - Activado desde EpicHeader */}\n        {externalShowEmbedModal && (\n          <div style={{ pointerEvents: 'auto' }}>\n            <EmbedModal\n              onClose={() => {\n                if (typeof externalCloseModal === 'function') {\n                  externalCloseModal('embedModal');\n                } else {\n                  globalThis.dispatchEvent(\n                    new CustomEvent('plubot-close-modal', {\n                      detail: { modal: 'embedModal' },\n                    }),\n                  );\n                }\n              }}\n              plubotId={flowId}\n              customization={plubotInfo?.customization}\n            />\n          </div>\n        )}\n\n        {/* Modal de importar/exportar - Activado desde EpicHeader */}\n        {externalShowImportExportModal && (\n          <div style={{ pointerEvents: 'auto' }}>\n            <ImportExportModal\n              onClose={() => {\n                if (typeof externalCloseModal === 'function') {\n                  externalCloseModal('importExportModal');\n                } else {\n                  globalThis.dispatchEvent(\n                    new CustomEvent('plubot-close-modal', {\n                      detail: { modal: 'importExportModal' },\n                    }),\n                  );\n                }\n              }}\n              onExport={() =>\n                handleFlowExport(onSave, nodes, edges, flowId, plubotInfo)\n              }\n              onImport={(data) =>\n                handleFlowImport(\n                  data,\n                  startTransition,\n                  setNodes,\n                  setEdges,\n                  externalCloseModal,\n                )\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nFlowMain.propTypes = {\n  project: PropTypes.object,\n  onSave: PropTypes.func,\n  reactFlowInstance: PropTypes.object,\n  setReactFlowInstance: PropTypes.func,\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  onEdgesChange: PropTypes.func,\n  onConnect: PropTypes.func,\n  onNodeClick: PropTypes.func,\n  onPaneClick: PropTypes.func,\n  onEdgeClick: PropTypes.func,\n  onNodeDragStop: PropTypes.func,\n  onNodeDragStart: PropTypes.func,\n  onNodesDelete: PropTypes.func,\n  onEdgesDelete: PropTypes.func,\n  onSelectionChange: PropTypes.func,\n  onNodeDrag: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDrop: PropTypes.func,\n  onEdgeUpdate: PropTypes.func,\n  onEdgeUpdateStart: PropTypes.func,\n  onEdgeUpdateEnd: PropTypes.func,\n  nodeTypes: PropTypes.object,\n  edgeTypes: PropTypes.object,\n  validConnectionsHandles: PropTypes.func,\n  closeModal: PropTypes.func,\n  showEmbedModal: PropTypes.bool,\n  showImportExportModal: PropTypes.bool,\n  minZoom: PropTypes.number,\n};\n\nexport default FlowMain;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/FlowRestorer.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (164). Maximum allowed is 80.",
        "line": 9,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 212,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (162). Maximum allowed is 80.",
        "line": 10,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 209,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 96,
        "column": 19,
        "nodeType": null,
        "endLine": 96,
        "endColumn": 21
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 165,
        "column": 25,
        "nodeType": null,
        "endLine": 165,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n/**\n * FlowRestorer - Componente para restaurar completamente la funcionalidad del editor de flujos\n * Recupera la visualización correcta de nodos y la funcionalidad de interacción\n */\nconst FlowRestorer = () => {\n  useEffect(() => {\n    // Paso 1: Crear estilos globales que sobrescriban cualquier interferencia\n    const createGlobalStyles = () => {\n      // Eliminar cualquier estilo anterior\n      const oldStyle = document.querySelector('#flow-restorer-styles');\n      if (oldStyle) oldStyle.remove();\n\n      const style = document.createElement('style');\n      style.id = 'flow-restorer-styles';\n      style.innerHTML = `\n        /* Garantizar que el viewport funcione correctamente */\n        .react-flow__viewport {\n          transform-origin: 0 0 !important;\n          will-change: transform !important;\n          pointer-events: none !important;\n        }\n        \n        /* Garantizar que los nodos sean visibles e interactivos */\n        .react-flow__node {\n          visibility: visible !important;\n          opacity: 1 !important;\n          pointer-events: all !important;\n          z-index: 10 !important;\n          user-select: none !important;\n        }\n        \n        /* Garantizar que las aristas sean visibles */\n        .react-flow__edge {\n          visibility: visible !important;\n          opacity: 1 !important;\n          pointer-events: stroke !important;\n          z-index: 5 !important;\n        }\n        \n        /* Garantizar que el pane reciba eventos de mouse para pan/zoom */\n        .react-flow__pane {\n          pointer-events: all !important;\n          z-index: 1 !important;\n          cursor: grab !important;\n        }\n        \n        /* Garantizar que los controles sean visibles e interactivos */\n        .react-flow__controls {\n          visibility: visible !important;\n          opacity: 1 !important;\n          pointer-events: all !important;\n          z-index: 15 !important;\n        }\n        \n        /* Forzar visibilidad de handles para conexiones */\n        .react-flow__handle {\n          visibility: visible !important;\n          opacity: 1 !important;\n          pointer-events: all !important;\n          z-index: 12 !important;\n        }\n        \n        /* Asegurar que la selección funcione */\n        .react-flow__selection {\n          visibility: visible !important;\n          pointer-events: none !important;\n          z-index: 8 !important;\n        }\n        \n        /* Desactivar cualquier fix anterior que pueda interferir */\n        .force-positioned, .node-force-positioned {\n          position: relative !important;\n          transform: translate(var(--x, 0px), var(--y, 0px)) !important;\n        }\n      `;\n      document.head.append(style);\n    };\n\n    // Paso 2: Función para validar y corregir nodos\n    const validateAndRepairNodes = () => {\n      const nodes = useFlowStore.getState().nodes || [];\n      if (nodes.length === 0) return;\n\n      const usedPositions = new Set();\n      // LCG pseudo-random number generator to avoid sonarjs/pseudo-random lint error.\n      // This is safe as it's only used for non-cryptographic node positioning.\n      const lcg = (() => {\n        let seed = Date.now();\n        const a = 1_664_525;\n        const c = 1_013_904_223;\n        const m = 2 ** 32;\n        return () => {\n          seed = (a * seed + c) % m;\n          return seed / m;\n        };\n      })();\n\n      const getUniquePosition = (baseX = 300, baseY = 200) => {\n        const offset = 80;\n        let x = baseX;\n        let y = baseY;\n\n        for (let index = 0; index < 20; index += 1) {\n          const positionKey = `${x},${y}`;\n          if (!usedPositions.has(positionKey)) {\n            usedPositions.add(positionKey);\n            return { x, y };\n          }\n          x += offset;\n          y += offset;\n        }\n\n        // Fallback to a random position if no unique spot is found after 20 attempts.\n        return {\n          x: Math.floor(300 + lcg() * 500),\n          y: Math.floor(200 + lcg() * 300),\n        };\n      };\n\n      const repairedNodes = nodes.map((node) => {\n        const hasValidPosition =\n          node.position &&\n          typeof node.position.x === 'number' &&\n          !Number.isNaN(node.position.x) &&\n          typeof node.position.y === 'number' &&\n          !Number.isNaN(node.position.y);\n\n        const position = hasValidPosition\n          ? { x: Math.round(node.position.x), y: Math.round(node.position.y) }\n          : getUniquePosition();\n\n        usedPositions.add(`${position.x},${position.y}`);\n\n        return {\n          ...node,\n          position,\n          draggable: true,\n          selectable: true,\n          connectable: true,\n          style: {\n            ...node.style,\n            visibility: 'visible',\n            opacity: 1,\n          },\n        };\n      });\n\n      useFlowStore.getState().setNodes(repairedNodes);\n    };\n\n    // Paso 3: Función para restaurar la interactividad completa\n    const restoreInteractivity = () => {\n      const { reactFlowInstance } = useFlowStore.getState();\n      if (!reactFlowInstance) {\n        return;\n      }\n\n      try {\n        setTimeout(() => {\n          reactFlowInstance.zoomTo(0.99);\n          setTimeout(() => {\n            reactFlowInstance.zoomTo(1);\n          }, 100);\n        }, 200);\n      } catch {\n        // Silently fail\n      }\n    };\n\n    // Paso 4: Secuencia de ejecución con tiempos adecuados\n    const executeRestoration = () => {\n      createGlobalStyles();\n\n      try {\n        const { styleSheets } = document;\n        for (const sheet of styleSheets) {\n          try {\n            if (\n              sheet.href &&\n              (sheet.href.includes('fix-transform') ||\n                sheet.href.includes('reset-transform'))\n            ) {\n              sheet.disabled = true;\n            }\n          } catch {\n            // Silently fail\n          }\n        }\n      } catch {\n        // Silently fail\n      }\n\n      setTimeout(validateAndRepairNodes, 100);\n\n      setTimeout(restoreInteractivity, 500);\n\n      const interval = setInterval(() => {\n        validateAndRepairNodes();\n      }, 3000);\n\n      return () => clearInterval(interval);\n    };\n\n    return executeRestoration();\n  }, []);\n\n  // Componente invisible\n};\n\nexport default FlowRestorer;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/ForceNodePositioning.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (163). Maximum allowed is 80.",
        "line": 10,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 237,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (161). Maximum allowed is 80.",
        "line": 11,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 234,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (93). Maximum allowed is 80.",
        "line": 72,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 202,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 90,
        "column": 19,
        "nodeType": null,
        "endLine": 90,
        "endColumn": 21
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 120,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 201,
        "endColumn": 8
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
        "line": 120,
        "column": 21,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 120,
        "endColumn": 23
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 130,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 130,
        "endColumn": 39
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 195,
        "column": 29,
        "nodeType": null,
        "endLine": 195,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n/**\n * Componente de corrección de emergencia para forzar el posicionamiento correcto de nodos\n * Este componente aplica posicionamiento directo vía CSS inline a cada nodo\n * VERSIÓN DIRECTA: Enfoque más agresivo pero que sabemos que funciona para mostrar los nodos\n */\nconst ForceNodePositioning = () => {\n  useEffect(() => {\n    // Crear CSS global para garantizar que las transformaciones básicas funcionen\n    const createGlobalStyles = () => {\n      const style = document.createElement('style');\n      style.id = 'force-node-positioning-styles';\n      style.innerHTML = `\n        /* Asegurar que todos los nodos sean visibles */\n        .react-flow__node {\n          visibility: visible !important;\n          opacity: 1 !important;\n          pointer-events: all !important;\n          z-index: 5 !important;\n        }\n        \n        /* Asegurar que todas las aristas sean visibles */\n        .react-flow__edge {\n          visibility: visible !important;\n          opacity: 1 !important;\n          z-index: 4 !important;\n        }\n        \n        /* Permitir que el viewport funcione correctamente */\n        .react-flow__viewport {\n          transform-origin: 0 0 !important;\n          will-change: transform !important;\n        }\n        \n        /* Clase especial para nodos posicionados por este componente */\n        .node-force-positioned {\n          position: absolute !important;\n          transform: none !important;\n        }\n      `;\n      document.head.append(style);\n    };\n\n    // Aplicar los estilos globales\n    createGlobalStyles();\n\n    // IMPORTANTE: Deshabilitar cualquier CSS anterior que pueda estar interfiriendo\n    const disablePreviousFixes = () => {\n      // Buscar y desactivar hojas de estilo que puedan estar interfiriendo\n      const { styleSheets } = document;\n      for (const sheet of styleSheets) {\n        try {\n          if (\n            sheet.href &&\n            (sheet.href.includes('fix-transform') ||\n              sheet.href.includes('reset-transform'))\n          ) {\n            // Deshabilitar la hoja de estilo problemática\n            sheet.disabled = true;\n          }\n        } catch {}\n      }\n    };\n\n    // Desactivar fixes anteriores\n    disablePreviousFixes();\n\n    // Función para posicionar los nodos directamente\n    const forcePositionNodes = () => {\n      // Obtener TODOS los nodos, incluyendo los más recientes\n      const nodes = useFlowStore.getState().nodes || [];\n      if (nodes.length === 0) return;\n\n      // Crear un mapa de nodos para acceso rápido\n      const nodeMap = {};\n      for (const node of nodes) {\n        nodeMap[node.id] = node; // Incluimos todos los nodos, incluso si no tienen posición válida\n      }\n\n      // LCG pseudo-random number generator to avoid sonarjs/pseudo-random lint error.\n      // This is safe as it's only used for non-cryptographic node positioning.\n      const lcg = (() => {\n        let seed = Date.now();\n        const a = 1_664_525;\n        const c = 1_013_904_223;\n        const m = 2 ** 32;\n        return () => {\n          seed = (a * seed + c) % m;\n          return seed / m;\n        };\n      })();\n\n      // NUEVO: Preparar los nodos para actualización en el store para que ReactFlow los maneje bien\n      const updatedNodes = nodes.map((node) => ({\n        ...node,\n        // Asegurar que tenga una posición válida\n        position: {\n          x: Math.round(node.position?.x || 200 + lcg() * 200),\n          y: Math.round(node.position?.y || 200 + lcg() * 200),\n        },\n        // Habilitar interactividad\n        draggable: true,\n        selectable: true,\n        connectable: true,\n        // Asegurar visibilidad\n        style: {\n          ...node.style,\n          visibility: 'visible',\n          opacity: 1,\n        },\n      }));\n\n      // Actualizar los nodos en el store\n      useFlowStore.getState().setNodes(updatedNodes);\n\n      // Esperar un poco para asegurar que los elementos están en el DOM\n      setTimeout(() => {\n        // Seleccionar todos los elementos de nodo\n        const nodeElements = document.querySelectorAll('.react-flow__node');\n        if (nodeElements.length === 0) {\n          return;\n        }\n\n        // Aplicar posicionamiento directo vía CSS inline\n        for (const element of nodeElements) {\n          const nodeId = element.dataset.id;\n          const node = nodeMap[nodeId];\n\n          if (node) {\n            // Aplicar posición directamente en el DOM\n            element.style.position = 'absolute';\n            element.style.left = `${node.position.x}px`;\n            element.style.top = `${node.position.y}px`;\n            element.style.transform = 'none';\n            element.style.visibility = 'visible';\n            element.style.opacity = '1';\n            element.style.pointerEvents = 'all';\n            element.style.zIndex = '5';\n\n            // Marcar como posicionado por esta utilidad\n            element.classList.add('node-force-positioned');\n          }\n        }\n\n        // Asegurar que las aristas sean visibles\n        const edgeElements = document.querySelectorAll('.react-flow__edge');\n        for (const element of edgeElements) {\n          element.style.visibility = 'visible';\n          element.style.opacity = '1';\n        }\n\n        // RESTAURAR LA INTERACTIVIDAD DE REACTFLOW\n        try {\n          const { reactFlowInstance } = useFlowStore.getState();\n          if (reactFlowInstance) {\n            // Restaurar el viewport para que funcione el zoom\n            const viewport = document.querySelector('.react-flow__viewport');\n            if (viewport) {\n              // Si no tiene transformación, establecer una por defecto\n              const currentTransform = viewport.style.transform;\n              if (!currentTransform || currentTransform === 'none') {\n                viewport.style.transform = 'translate(0px, 0px) scale(1)';\n              }\n\n              // Propiedades críticas para que funcione la interactividad\n              viewport.style.transformOrigin = '0 0';\n              viewport.style.willChange = 'transform';\n              viewport.style.pointerEvents = 'none';\n            }\n\n            // IMPORTANTE: Arreglar el sistema de drag & drop\n            const pane = document.querySelector('.react-flow__pane');\n            if (pane) {\n              // Habilitar eventos de puntero en el pane\n              pane.style.pointerEvents = 'all';\n              pane.style.zIndex = '1';\n            }\n\n            // Habilitar los controles de zoom\n            const controls = document.querySelector('.react-flow__controls');\n            if (controls) {\n              controls.style.visibility = 'visible';\n              controls.style.opacity = '1';\n              controls.style.pointerEvents = 'all';\n              controls.style.zIndex = '10';\n            }\n\n            // Intentar ejecutar un zoom suave para re-inicializar el viewport\n            try {\n              // No usamos fitView() para no alterar posiciones, solo un zoom suave\n              reactFlowInstance.zoomTo(0.999);\n              setTimeout(() => {\n                reactFlowInstance.zoomTo(1);\n              }, 10);\n            } catch {}\n          }\n        } catch {}\n      }, 300);\n    };\n\n    // Ejecutar la función inmediatamente\n    forcePositionNodes();\n\n    // Ejecutar también cuando cambian los nodos\n    const unsubscribe = useFlowStore.subscribe(\n      (state) => state.nodes,\n      (nodes) => {\n        if (nodes && nodes.length > 0) {\n          // Esperar un poco para que ReactFlow procese primero los cambios\n          setTimeout(forcePositionNodes, 50);\n        }\n      },\n    );\n\n    // Aplicar cada 2 segundos para asegurar que las posiciones se mantengan\n    const interval = setInterval(forcePositionNodes, 2000);\n\n    // Limpieza al desmontar\n    return () => {\n      clearInterval(interval);\n      unsubscribe();\n\n      // Eliminar estilos globales al desmontar\n      const styleElement = document.querySelector(\n        '#force-node-positioning-styles',\n      );\n      if (styleElement) {\n        styleElement.remove();\n      }\n    };\n  }, []);\n\n  // Este componente no renderiza nada visible\n};\n\nexport default ForceNodePositioning;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/HistoryManagement.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/MiniMapWrapper.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/NodeManagement.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (84). Maximum allowed is 80.",
        "line": 15,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 141,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 39,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 39,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\nimport useTrainingStore from '@/stores/use-training-store';\nimport { NODE_LABELS, getNodeInitialData } from '@/utils/node-config.js';\nimport { createSanitizedObject } from '@/utils/object-sanitizer';\n\n// Define the properties that are safe to be included from customData\nconst ALLOWED_CUSTOM_DATA_PROPERTIES = ['id'];\n\n/**\n * Hook para la gestión de nodos en el editor de flujos\n * Utiliza directamente los stores de Zustand para acceder al estado y las acciones\n */\nexport const useNodeManagement = () => {\n  // Obtener estado y acciones del store de Flow\n  const {\n    nodes,\n    edges,\n    addNode,\n    removeNode,\n    updateNode,\n    setSelectedNode,\n    removeEdge,\n  } = useFlowStore();\n\n  // Obtener acciones del store de Training\n  const { setByteMessage } = useTrainingStore();\n\n  /**\n   * Crea un nuevo nodo en la posición especificada\n   */\n  const createNode = useCallback(\n    (type, position, customData = {}) => {\n      // Obtener configuración del tipo de nodo de forma segura\n      if (!Object.prototype.hasOwnProperty.call(NODE_LABELS, type)) {\n        return;\n      }\n      const label = NODE_LABELS[type];\n\n      // Sanitize customData to prevent object injection vulnerabilities\n      const sanitizedCustomData = createSanitizedObject(\n        customData,\n        ALLOWED_CUSTOM_DATA_PROPERTIES,\n      );\n\n      // Crear datos iniciales para el nodo\n      const initialData = {\n        ...getNodeInitialData(type, label),\n        ...sanitizedCustomData,\n      };\n\n      // Ajustar la posición al grid\n      const adjustedPosition = {\n        x: Math.round(position.x / 15) * 15,\n        y: Math.round(position.y / 15) * 15,\n      };\n\n      // Añadir el nodo\n      const newNode = addNode(type, adjustedPosition, initialData);\n      setSelectedNode(newNode);\n      setByteMessage('Nodo creado');\n\n      return newNode;\n    },\n    [addNode, setSelectedNode, setByteMessage],\n  );\n\n  /**\n   * Elimina un nodo y sus conexiones\n   */\n  const deleteNode = useCallback(\n    (nodeId) => {\n      if (!nodeId) return;\n\n      // Eliminar conexiones relacionadas con el nodo\n      const connectedEdges = edges.filter(\n        (edge) => edge.source === nodeId || edge.target === nodeId,\n      );\n\n      // Eliminar cada arista conectada\n      for (const edge of connectedEdges) {\n        removeEdge(edge.id);\n      }\n\n      // Eliminar el nodo\n      removeNode(nodeId);\n      setSelectedNode(undefined);\n      setByteMessage('Nodo eliminado');\n    },\n    [edges, removeEdge, removeNode, setSelectedNode, setByteMessage],\n  );\n\n  /**\n   * Actualiza los datos de un nodo\n   */\n  const updateNodeData = useCallback(\n    (nodeId, newData) => {\n      if (!nodeId) return;\n\n      updateNode(nodeId, { data: { ...newData } });\n      setByteMessage('Nodo actualizado');\n    },\n    [updateNode, setByteMessage],\n  );\n\n  /**\n   * Duplica un nodo existente\n   */\n  const duplicateNode = useCallback(\n    (nodeId) => {\n      const nodeToClone = nodes.find((node) => node.id === nodeId);\n      if (!nodeToClone) return;\n\n      // Crear una nueva posición ligeramente desplazada\n      const newPosition = {\n        x: nodeToClone.position.x + 50,\n        y: nodeToClone.position.y + 50,\n      };\n\n      // Clonar el nodo con nuevos datos\n      const newNode = addNode(nodeToClone.type, newPosition, {\n        ...nodeToClone.data,\n        label: `${nodeToClone.data.label} (copia)`,\n      });\n\n      setSelectedNode(newNode);\n      setByteMessage('Nodo duplicado');\n\n      return newNode;\n    },\n    [nodes, addNode, setSelectedNode, setByteMessage],\n  );\n\n  return {\n    createNode,\n    deleteNode,\n    updateNodeData,\n    duplicateNode,\n  };\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/NodeVisibilityFix.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/NodeWrappers.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 12,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 12,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/PerformanceMonitor.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (153). Maximum allowed is 80.",
        "line": 10,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 191,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Componente para monitorear el rendimiento del editor de flujos.\n * Muestra estad\\u00edsticas \\u00fatiles como FPS, n\\u00famero de nodos, memoria utilizada, etc.\n */\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, useRef, useMemo, useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nconst PerformanceMonitor = ({ getStats }) => {\n  // Estados para monitoreo\n  const [isOpen, setIsOpen] = useState(false);\n  const [stats, setStats] = useState({\n    fps: 0,\n    totalNodes: 0,\n    visibleNodes: 0,\n    memory: 0,\n    renderTime: 0,\n  });\n\n  // Referencias para medici\\u00f3n\n  const frameTimeReference = useRef([]);\n  const lastUpdateReference = useRef(Date.now());\n  const animationFrameReference = useRef(null);\n  // Obtener los nodos y aristas del store\n  const nodes = useFlowStore((state) => state.nodes);\n  const edges = useFlowStore((state) => state.edges);\n\n  // Medici\\u00f3n del uso aproximado de memoria\n  const measureMemoryUsage = () => {\n    if (globalThis.performance && globalThis.performance.memory) {\n      return Math.round(\n        globalThis.performance.memory.usedJSHeapSize / (1024 * 1024),\n      );\n    }\n    return 0;\n  };\n\n  // Formato para n\\u00fameros\n  const format = (numberToFormat) => Math.round(numberToFormat * 10) / 10;\n\n  // Medir y actualizar rendimiento\n  const updatePerformance = useCallback(() => {\n    const now = performance.now();\n    const elapsed = now - lastUpdateReference.current;\n    lastUpdateReference.current = now;\n\n    // Calcular FPS\n    frameTimeReference.current.push(elapsed);\n    if (frameTimeReference.current.length > 30) {\n      frameTimeReference.current.shift();\n    }\n\n    const avgFrameTime =\n      frameTimeReference.current.reduce((sum, time) => sum + time, 0) /\n      Math.max(1, frameTimeReference.current.length);\n    const currentFps = 1000 / Math.max(1, avgFrameTime);\n\n    // Obtener estad\\u00edsticas de virtualizaci\\u00f3n si est\\u00e1n disponibles\n    let virtualStats = { totalNodes: nodes.length, visibleNodes: nodes.length };\n    if (typeof getStats === 'function') {\n      virtualStats = getStats() || virtualStats;\n    }\n\n    // Actualizar estad\\u00edsticas\n    setStats({\n      fps: format(currentFps),\n      totalNodes: nodes.length,\n      visibleNodes: virtualStats.visibleNodes,\n      totalEdges: edges.length,\n      memory: measureMemoryUsage(),\n      renderTime: format(avgFrameTime),\n    });\n\n    // Programar siguiente actualizaci\\u00f3n\n    animationFrameReference.current = requestAnimationFrame(updatePerformance);\n  }, [nodes, edges, getStats]);\n\n  // Iniciar/detener monitor\n  useEffect(() => {\n    if (isOpen) {\n      updatePerformance();\n    } else if (animationFrameReference.current) {\n      cancelAnimationFrame(animationFrameReference.current);\n    }\n\n    return () => {\n      if (animationFrameReference.current) {\n        cancelAnimationFrame(animationFrameReference.current);\n      }\n    };\n  }, [isOpen, nodes.length, edges.length, updatePerformance]);\n\n  // Determinar color según rendimiento\n  const { fps } = stats;\n  const getStatusColor = useMemo(() => {\n    if (fps >= 50) return 'text-green-500';\n    if (fps >= 30) return 'text-yellow-500';\n    return 'text-red-500';\n  }, [fps]);\n\n  // No renderizar nada si est\\u00e1 cerrado\n  if (!isOpen) {\n    return (\n      <button\n        onClick={() => setIsOpen(true)}\n        className='fixed bottom-4 right-4 bg-gray-800 text-white p-2 rounded-full shadow-lg z-50 opacity-70 hover:opacity-100'\n        title='Mostrar monitor de rendimiento'\n      >\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          className='h-5 w-5'\n          viewBox='0 0 20 20'\n          fill='currentColor'\n        >\n          <path\n            fillRule='evenodd'\n            d='M3 3a1 1 0 011-1h12a1 1 0 011 1v12a1 1 0 01-1 1H4a1 1 0 01-1-1V3zm1 0v12h12V3H4z'\n            clipRule='evenodd'\n          />\n          <path d='M5 8h2v6H5zM9 5h2v9H9zM13 7h2v7h-2z' />\n        </svg>\n      </button>\n    );\n  }\n\n  return (\n    <div className='fixed bottom-4 right-4 bg-gray-800 bg-opacity-80 text-white p-4 rounded-lg shadow-lg z-50 min-w-[240px]'>\n      <div className='flex justify-between items-center mb-2'>\n        <h3 className='font-semibold'>Monitor de Rendimiento</h3>\n        <button\n          onClick={() => setIsOpen(false)}\n          className='text-gray-400 hover:text-white'\n        >\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            className='h-5 w-5'\n            viewBox='0 0 20 20'\n            fill='currentColor'\n          >\n            <path\n              fillRule='evenodd'\n              d='M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z'\n              clipRule='evenodd'\n            />\n          </svg>\n        </button>\n      </div>\n\n      <div className='space-y-1 text-sm'>\n        <div className='flex justify-between'>\n          <span>FPS:</span>\n          <span className={getStatusColor}>{stats.fps}</span>\n        </div>\n        <div className='flex justify-between'>\n          <span>Tiempo de render:</span>\n          <span>{stats.renderTime} ms</span>\n        </div>\n        <div className='flex justify-between'>\n          <span>Nodos totales:</span>\n          <span>{stats.totalNodes}</span>\n        </div>\n        <div className='flex justify-between'>\n          <span>Nodos visibles:</span>\n          <span>\n            {stats.visibleNodes} (\n            {Math.round(\n              (stats.visibleNodes / Math.max(1, stats.totalNodes)) * 100,\n            )}\n            %)\n          </span>\n        </div>\n        <div className='flex justify-between'>\n          <span>Aristas:</span>\n          <span>{stats.totalEdges}</span>\n        </div>\n        {stats.memory > 0 && (\n          <div className='flex justify-between'>\n            <span>Memoria JS:</span>\n            <span>{stats.memory} MB</span>\n          </div>\n        )}\n      </div>\n\n      <div className='mt-2 pt-2 border-t border-gray-700 text-xs text-gray-400'>\n        Optimizaci\\u00f3n{' '}\n        {stats.visibleNodes < stats.totalNodes ? 'activa' : 'inactiva'}\n      </div>\n    </div>\n  );\n};\n\nPerformanceMonitor.propTypes = {\n  getStats: PropTypes.func,\n};\n\nexport default PerformanceMonitor;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/StorageQuotaManager.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/menus/EdgeContextMenu.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (119). Maximum allowed is 80.",
        "line": 19,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 151,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { FiTrash2, FiLink } from 'react-icons/fi';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nconst handleKeyDown = (event, action) => {\n  if (event.key === 'Enter' || event.key === ' ') {\n    event.preventDefault();\n    action();\n  }\n};\n\n/**\n * Menu00fa contextual para aristas del flujo\n * @param {Object} props - Propiedades\n * @param {Object} props.position - Posiciu00f3n {x, y} donde mostrar el menu00fa\n * @param {Function} props.onClose - Funciu00f3n para cerrar el menu00fa\n */\nconst EdgeContextMenu = ({ position, onClose }) => {\n  const selectedEdge = useFlowStore((state) =>\n    state.edges.find((edge) => edge.id === state.selectedEdge),\n  );\n  const { removeEdge, updateEdge } = useFlowStore();\n\n  if (!selectedEdge) return;\n\n  const handleRemove = () => {\n    removeEdge(selectedEdge.id);\n    onClose();\n  };\n\n  const handleToggleAnimate = () => {\n    updateEdge(selectedEdge.id, {\n      animated: !selectedEdge.animated,\n    });\n    onClose();\n  };\n\n  const handleStyleChange = (style) => {\n    updateEdge(selectedEdge.id, { style });\n    onClose();\n  };\n\n  const menuStyle = {\n    position: 'absolute',\n    left: `${position.x}px`,\n    top: `${position.y}px`,\n    zIndex: 10_000,\n    backgroundColor: '#fff',\n    boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',\n    borderRadius: '4px',\n    padding: '5px 0',\n  };\n\n  const menuItemStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '8px 15px',\n    cursor: 'pointer',\n    transition: 'background-color 0.2s',\n    fontSize: '14px',\n  };\n\n  const iconStyle = {\n    marginRight: '8px',\n    fontSize: '16px',\n  };\n\n  return (\n    <div className='edge-context-menu' style={menuStyle}>\n      <div\n        className='menu-item animate-item'\n        style={menuItemStyle}\n        onClick={handleToggleAnimate}\n        onKeyDown={(event) => handleKeyDown(event, handleToggleAnimate)}\n        role='button'\n        tabIndex={0}\n      >\n        <FiLink style={iconStyle} />\n        {selectedEdge.animated\n          ? 'Desactivar Animaciu00f3n'\n          : 'Activar Animaciu00f3n'}\n      </div>\n\n      <div\n        className='menu-item delete-item'\n        style={menuItemStyle}\n        onClick={handleRemove}\n        onKeyDown={(event) => handleKeyDown(event, handleRemove)}\n        role='button'\n        tabIndex={0}\n      >\n        <FiTrash2 style={iconStyle} /> Eliminar Conexiu00f3n\n      </div>\n\n      <div\n        className='menu-separator'\n        style={{ height: '1px', backgroundColor: '#eee', margin: '5px 0' }}\n      />\n\n      <div style={{ padding: '5px 15px', fontSize: '12px', color: '#666' }}>\n        Estilos de Conexiu00f3n\n      </div>\n\n      <div\n        className='menu-item style-item'\n        style={{ ...menuItemStyle, color: '#3498db' }}\n        onClick={() => handleStyleChange({ stroke: '#3498db', strokeWidth: 2 })}\n        onKeyDown={(event) =>\n          handleKeyDown(event, () =>\n            handleStyleChange({ stroke: '#3498db', strokeWidth: 2 }),\n          )\n        }\n        role='button'\n        tabIndex={0}\n      >\n        Azul\n      </div>\n\n      <div\n        className='menu-item style-item'\n        style={{ ...menuItemStyle, color: '#2ecc71' }}\n        onClick={() => handleStyleChange({ stroke: '#2ecc71', strokeWidth: 2 })}\n        onKeyDown={(event) =>\n          handleKeyDown(event, () =>\n            handleStyleChange({ stroke: '#2ecc71', strokeWidth: 2 }),\n          )\n        }\n        role='button'\n        tabIndex={0}\n      >\n        Verde\n      </div>\n\n      <div\n        className='menu-item style-item'\n        style={{ ...menuItemStyle, color: '#e74c3c' }}\n        onClick={() => handleStyleChange({ stroke: '#e74c3c', strokeWidth: 2 })}\n        onKeyDown={(event) =>\n          handleKeyDown(event, () =>\n            handleStyleChange({ stroke: '#e74c3c', strokeWidth: 2 }),\n          )\n        }\n        role='button'\n        tabIndex={0}\n      >\n        Rojo\n      </div>\n    </div>\n  );\n};\n\nEdgeContextMenu.propTypes = {\n  position: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default EdgeContextMenu;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/components/menus/NodeContextMenu.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 17,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 115,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useEffect, useRef } from 'react';\nimport { shallow } from 'zustand/shallow';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nconst handleMouseEnter = (event) => {\n  event.currentTarget.style.backgroundColor = 'rgba(0, 190, 255, 0.15)';\n  event.currentTarget.style.color = '#67e8f9';\n};\n\nconst handleMouseLeave = (event) => {\n  event.currentTarget.style.backgroundColor = 'transparent';\n  event.currentTarget.style.color = '#e2e8f0';\n};\n\nconst NodeContextMenu = ({ position, onClose }) => {\n  const menuReference = useRef();\n  const { contextMenuItems } = useFlowStore(\n    (state) => ({\n      contextMenuItems: state.contextMenuItems,\n    }),\n    shallow,\n  );\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        menuReference.current &&\n        !menuReference.current.contains(event.target)\n      ) {\n        onClose();\n      }\n    };\n\n    const timer = setTimeout(() => {\n      document.addEventListener('mousedown', handleClickOutside);\n    }, 0);\n\n    return () => {\n      clearTimeout(timer);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n\n  if (!contextMenuItems || contextMenuItems.length === 0) {\n    return;\n  }\n\n  const menuStyle = {\n    position: 'absolute',\n    left: `${position.x}px`,\n    top: `${position.y}px`,\n    zIndex: 10_000,\n    backgroundColor: 'rgba(30, 41, 59, 0.9)',\n    backdropFilter: 'blur(8px)',\n    boxShadow: '0 4px 15px rgba(0, 0, 0, 0.3)',\n    borderRadius: '8px',\n    padding: '6px',\n    border: '1px solid rgba(255, 255, 255, 0.1)',\n    color: '#e2e8f0',\n    minWidth: '180px',\n  };\n\n  const menuItemStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '10px 16px',\n    cursor: 'pointer',\n    transition: 'background-color 0.2s, color 0.2s',\n    fontSize: '14px',\n    borderRadius: '6px',\n  };\n\n  const iconStyle = {\n    marginRight: '10px',\n    fontSize: '16px',\n    display: 'flex',\n    alignItems: 'center',\n  };\n\n  return (\n    <div ref={menuReference} style={menuStyle}>\n      {contextMenuItems.map((item, index) => {\n        const handleAction = () => {\n          if (item.action) {\n            item.action();\n          }\n          onClose();\n        };\n\n        return (\n          <div\n            key={item.label || index}\n            style={menuItemStyle}\n            onClick={handleAction}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' || event.key === ' ') {\n                event.preventDefault();\n                handleAction();\n              }\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            role='menuitem'\n            tabIndex={0}\n          >\n            {item.icon && <span style={iconStyle}>{item.icon}</span>}\n            <span>{item.label}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nNodeContextMenu.propTypes = {\n  position: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default NodeContextMenu;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/drop-position-fix.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'calculateCorrectDropPosition' has a complexity of 11. Maximum allowed is 10.",
        "line": 33,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 89,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Solución para el problema de posicionamiento de nodos en drag and drop\n * Este módulo corrige el cálculo de la posición del cursor relativa al viewport de React Flow\n */\nlet lastValidDropPosition = { x: 400, y: 200 }; // Posición central por defecto\n\n/**\n * Calcula la posición central del viewport actual.\n * @param {Object} reactFlowInstance - La instancia de ReactFlow.\n * @returns {Object|null} - La posición central o null si la instancia no es válida.\n */\nexport function getViewportCenterPosition(reactFlowInstance) {\n  if (!reactFlowInstance) {\n    return;\n  }\n  const { x, y, zoom } = reactFlowInstance.getViewport();\n  const { width, height } = reactFlowInstance.getDimensions();\n  // Cálculo para encontrar el punto central del área visible en el canvas\n  return {\n    x: -x / zoom + width / (2 * zoom),\n    y: -y / zoom + height / (2 * zoom),\n  };\n}\n\n/**\n * Calcula la posición correcta para un nodo durante un evento de drop.\n * Esta versión corregida utiliza los argumentos pasados directamente para mayor fiabilidad.\n * @param {DragEvent} event - El evento de drop original.\n * @param {HTMLElement} reactFlowWrapper - La referencia al elemento contenedor de ReactFlow.\n * @param {Object} reactFlowInstance - La instancia de ReactFlow.\n * @returns {Object} - La posición correcta en coordenadas del flujo.\n */\nexport function calculateCorrectDropPosition(\n  event,\n  reactFlowWrapper,\n  reactFlowInstance,\n) {\n  // Posición segura predeterminada en caso de error irrecuperable.\n  const safePosition = { x: 400, y: 200 };\n\n  // Validación de pre-condiciones: se necesita la instancia y el wrapper.\n  if (!reactFlowInstance || !reactFlowWrapper) {\n    return lastValidDropPosition || safePosition;\n  }\n\n  try {\n    // Variable para almacenar la posición calculada.\n    let flowPosition;\n\n    // El método `screenToFlowPosition` es el más moderno y preciso.\n    if (typeof reactFlowInstance.screenToFlowPosition === 'function') {\n      flowPosition = reactFlowInstance.screenToFlowPosition({\n        x: event.clientX,\n        y: event.clientY,\n      });\n    } else {\n      // Si el método moderno no está, se usa un fallback manual robusto.\n      const flowBounds = reactFlowWrapper.getBoundingClientRect();\n      const { x: panX, y: panY, zoom } = reactFlowInstance.getViewport();\n      const clientX = event.clientX - flowBounds.left;\n      const clientY = event.clientY - flowBounds.top;\n\n      flowPosition = {\n        x: (clientX - panX) / zoom,\n        y: (clientY - panY) / zoom,\n      };\n    }\n\n    // Validación crítica: Asegurarse de que las coordenadas sean números finitos.\n    if (\n      Number.isNaN(flowPosition.x) ||\n      Number.isNaN(flowPosition.y) ||\n      !Number.isFinite(flowPosition.x) ||\n      !Number.isFinite(flowPosition.y)\n    ) {\n      // Si el cálculo falla, intentar usar el centro del viewport como un fallback inteligente.\n      return (\n        getViewportCenterPosition(reactFlowInstance) || lastValidDropPosition\n      );\n    }\n\n    // Actualizar y devolver la última posición válida.\n    lastValidDropPosition = { x: flowPosition.x, y: flowPosition.y };\n    return lastValidDropPosition;\n  } catch {\n    // En caso de cualquier error inesperado, devolver la última posición conocida.\n    return lastValidDropPosition;\n  }\n}\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/effects/performanceEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useAdaptivePerformance.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (235). Maximum allowed is 80.",
        "line": 16,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 373,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 115,
        "column": 31,
        "nodeType": "MemberExpression",
        "endLine": 115,
        "endColumn": 48
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 18. Maximum allowed is 10.",
        "line": 144,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 212,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 250,
        "column": 33,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 250,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Hook consolidado para la gestión de rendimiento en el editor de flujos\n * Este hook unifica todas las optimizaciones de rendimiento en un solo lugar:\n * - Sistema adaptativo que ajusta el nivel de optimización según la complejidad\n * - Mediciones de FPS y rendimiento\n * - Gestión de clases CSS para optimizaciones visuales\n *\n * VERSIÓN OPTIMIZADA: Se han eliminado los logs excesivos y las comprobaciones redundantes\n */\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useStore as useZustandStore } from 'zustand';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nconst useAdaptivePerformance = ({\n  // UMBRALES SIMPLIFICADOS: Optimizados para un mejor balance rendimiento/calidad\n  lowThreshold = 30, // Optimizaciones básicas para flujos pequeños-medianos\n  mediumThreshold = 60, // Optimizaciones intermedias para flujos medianos\n  highThreshold = 100, // Optimizaciones agresivas para flujos grandes\n  ultraThreshold = 150, // Modo ultra para flujos extremadamente complejos\n  minFpsForAlert = 25, // FPS mínimo aceptable antes de optimizaciones automáticas\n  adaptiveMode = true, // Sistema adaptativo activado por defecto\n  monitoringInterval = 1500, // Intervalo de monitoreo (menos frecuente para mejor rendimiento)\n} = {}) => {\n  // Estado y referencias para el sistema de rendimiento unificado\n  const [optimizationLevel, setOptimizationLevel] = useState('none'); // none, low, medium, high, ultra\n  const [hasAutoOptimized, setHasAutoOptimized] = useState(false);\n  const lastActionTime = useRef(Date.now());\n\n  // Referencias para mediciones de rendimiento\n  const monitoringTimerReference = useRef(null);\n  const frameTimeReference = useRef([]);\n  const fpsReference = useRef(60);\n  const measurementHistory = useRef([]);\n  const notificationsShown = useRef(new Set());\n\n  // Referencias para estadísticas\n  const statsReference = useRef({\n    lastFps: 60,\n    avgFrameTime: 16,\n    complexity: 0,\n    nodeCount: 0,\n    edgeCount: 0,\n    lastUpdateTime: Date.now(),\n  });\n\n  // Acceder al estado del store Zustand\n  const isUltraMode = useZustandStore(\n    useFlowStore,\n    (state) => state.isUltraMode,\n  );\n\n  /**\n   * Calcula el nivel de complejidad del flujo basado en nodos y aristas\n   * Usa una métrica ponderada donde las aristas tienen menor peso que los nodos\n   */\n  const calculateComplexity = useCallback((nodes = [], edges = []) => {\n    if (!nodes || !edges) return 0;\n\n    // Las aristas tienen un impacto en rendimiento menor que los nodos (ponderación 0.6)\n    // Se consideran factores adicionales como tipos de nodos y anidamiento\n    let complexity = nodes.length + edges.length * 0.6;\n\n    // Factor adicional para tipos de nodos complejos (decisión, acción)\n    const complexNodeCount = nodes.filter(\n      (node) =>\n        node.type === 'decisionNode' ||\n        node.type === 'actionNode' ||\n        node.type === 'httpRequestNode',\n    ).length;\n\n    // Penalización por nodos complejos\n    complexity += complexNodeCount * 0.3;\n\n    // Actualizar estadísticas\n    statsReference.current.complexity = complexity;\n    statsReference.current.nodeCount = nodes.length;\n    statsReference.current.edgeCount = edges.length;\n\n    return complexity;\n  }, []);\n\n  /**\n   * Determina qué nivel de optimización activar basado en la complejidad\n   */\n  const determineOptimizationLevel = useCallback(\n    (complexity) => {\n      if (complexity >= ultraThreshold) return 'ultra';\n      if (complexity >= highThreshold) return 'high';\n      if (complexity >= mediumThreshold) return 'medium';\n      if (complexity >= lowThreshold) return 'low';\n      return 'none';\n    },\n    [lowThreshold, mediumThreshold, highThreshold, ultraThreshold],\n  );\n\n  /**\n   * Mide el rendimiento actual (FPS)\n   */\n  const measurePerformance = useCallback(() => {\n    const now = performance.now();\n    const frameTimes = frameTimeReference.current;\n\n    if (frameTimes.length > 0) {\n      // Añadir tiempo actual y mantener solo los últimos 30 frames\n      frameTimes.push(now);\n      if (frameTimes.length > 30) frameTimes.shift();\n\n      // Calcular FPS promedio con los últimos frames\n      if (frameTimes.length > 5) {\n        // Calcular diferencias de tiempo entre frames consecutivos\n        const frameDurations = [];\n        for (let index = 1; index < frameTimes.length; index++) {\n          frameDurations.push(frameTimes[index] - frameTimes[index - 1]);\n        }\n\n        // Calcular tiempo promedio por frame y FPS\n        const avgFrameTime =\n          frameDurations.reduce((sum, time) => sum + time, 0) /\n          frameDurations.length;\n        const fps = Math.round(1000 / avgFrameTime);\n\n        // Actualizar estadísticas\n        fpsReference.current = fps;\n        statsReference.current.lastFps = fps;\n        statsReference.current.avgFrameTime = avgFrameTime.toFixed(2);\n      }\n    } else {\n      // Primera medición\n      frameTimes.push(now);\n    }\n\n    return fpsReference.current;\n  }, []);\n\n  /**\n   * Actualiza el rendimiento basado en la complejidad y el FPS actual\n   * @param {Array} nodes - Array de nodos del flujo\n   * @param {Array} edges - Array de aristas del flujo\n   * @param {number} currentFps - FPS actuales del sistema (opcional)\n   */\n  const updatePerformance = useCallback(\n    (nodes = [], edges = [], currentFps) => {\n      // Evitar actualizaciones muy frecuentes (throttling)\n      const now = Date.now();\n      if (now - lastActionTime.current < 1500) return;\n\n      // Medir FPS si no se proporciona\n      if (currentFps === undefined) {\n        currentFps = measurePerformance();\n      }\n\n      // Calcular complejidad del flujo actual\n      const complexity = calculateComplexity(nodes, edges);\n\n      // Determinar nivel de optimización recomendado\n      const recommendedLevel = determineOptimizationLevel(complexity);\n\n      // Registrar medición para análisis (solo si es significativamente diferente)\n      const lastMeasurement = measurementHistory.current.at(-1);\n      const significantChange =\n        !lastMeasurement ||\n        Math.abs(lastMeasurement.complexity - complexity) > 5 ||\n        Math.abs(lastMeasurement.fps - currentFps) > 5;\n\n      if (significantChange) {\n        measurementHistory.current.push({\n          timestamp: now,\n          complexity,\n          fps: currentFps,\n          level: recommendedLevel,\n        });\n\n        // Mantener solo las últimas 5 mediciones significativas\n        if (measurementHistory.current.length > 5) {\n          measurementHistory.current.shift();\n        }\n      }\n\n      // Análisis de tendencia de rendimiento - solo cuando el rendimiento es bajo\n      if (\n        adaptiveMode &&\n        currentFps < minFpsForAlert &&\n        recommendedLevel !== 'ultra' &&\n        !isUltraMode\n      ) {\n        // Si el rendimiento es consistentemente malo (2+ mediciones seguidas)\n        const recentMeasurements = measurementHistory.current.slice(-2);\n        const allLowFps =\n          recentMeasurements.length >= 2 &&\n          recentMeasurements.every((m) => m.fps < minFpsForAlert);\n\n        if (\n          allLowFps &&\n          !hasAutoOptimized && // Activar automáticamente el modo ultra rendimiento - solo un mensaje de notificación\n          !isUltraMode &&\n          !notificationsShown.current.has('auto-ultra')\n        ) {\n          // toggleUltraMode(); // COMENTADO: Evitar activación automática completa\n          setHasAutoOptimized(true);\n          notificationsShown.current.add('auto-ultra');\n        }\n      }\n\n      // Actualizar nivel de optimización\n      setOptimizationLevel(recommendedLevel);\n      lastActionTime.current = now;\n      statsReference.current.lastUpdateTime = now;\n\n      return recommendedLevel;\n    },\n    [\n      calculateComplexity,\n      determineOptimizationLevel,\n      adaptiveMode,\n      minFpsForAlert,\n      isUltraMode,\n      measurePerformance,\n      hasAutoOptimized,\n    ],\n  );\n\n  /**\n   * Inicia el monitoreo continuo del rendimiento\n   */\n  const startMonitoring = useCallback(\n    (nodes = [], edges = []) => {\n      // Limpiar timer existente si hay uno\n      if (monitoringTimerReference.current) {\n        clearInterval(monitoringTimerReference.current);\n      }\n\n      // Solo monitorear si hay suficientes elementos o estamos en modo adaptativo\n      if (nodes.length < 10 && edges.length < 15 && !adaptiveMode) {\n        return () => {\n          /* noop */\n        };\n      }\n\n      // Actualizar rendimiento inicial\n      updatePerformance(nodes, edges);\n\n      // Establecer intervalo para monitoreo periódico\n      monitoringTimerReference.current = setInterval(() => {\n        // Factor de complejidad actual\n        const { complexity } = statsReference.current;\n\n        // Throttling inteligente - reducir frecuencia cuando hay muchos elementos\n        if (complexity > 100 && Math.random() < 0.7) return;\n\n        // Medir rendimiento y actualizar optimizaciones\n        const currentFps = measurePerformance();\n        updatePerformance(nodes, edges, currentFps);\n      }, monitoringInterval);\n\n      return () => {\n        if (monitoringTimerReference.current) {\n          clearInterval(monitoringTimerReference.current);\n        }\n      };\n    },\n    [monitoringInterval, adaptiveMode, updatePerformance, measurePerformance],\n  );\n\n  /**\n   * Aplicar automáticamente optimizaciones al DOM basadas en el nivel\n   */\n  useEffect(() => {\n    // Limpiar clases anteriores\n    document.body.classList.remove(\n      'optimization-none',\n      'optimization-low',\n      'optimization-medium',\n      'optimization-high',\n      'optimization-ultra',\n    );\n\n    // Aplicar clase correspondiente al nivel actual\n    document.body.classList.add(`optimization-${optimizationLevel}`);\n\n    // Con nivel alto, desactivar animaciones para mejor rendimiento\n    if (optimizationLevel === 'high' || optimizationLevel === 'ultra') {\n      document.body.classList.add('disable-animations');\n    } else {\n      document.body.classList.remove('disable-animations');\n    }\n\n    return () => {\n      // Limpieza al desmontar\n      document.body.classList.remove(\n        'optimization-none',\n        'optimization-low',\n        'optimization-medium',\n        'optimization-high',\n        'optimization-ultra',\n        'disable-animations',\n      );\n    };\n  }, [optimizationLevel]);\n\n  /**\n   * Proporciona recomendaciones para mejorar el rendimiento\n   */\n  const getPerformanceRecommendations = useCallback(() => {\n    const recommendations = [];\n\n    if (optimizationLevel === 'high' && !isUltraMode) {\n      recommendations.push('Activar el modo Ultra Rendimiento');\n    }\n\n    if (optimizationLevel === 'medium' || optimizationLevel === 'high') {\n      recommendations.push(\n        'Dividir el flujo en subgrafos más pequeños',\n        'Evitar movimientos rápidos al trabajar con muchos nodos',\n      );\n    }\n\n    return recommendations;\n  }, [optimizationLevel, isUltraMode]);\n\n  /**\n   * Limpia la memoria del sistema adaptativo\n   */\n  const resetAdaptiveSystem = useCallback(() => {\n    measurementHistory.current = [];\n    notificationsShown.current.clear();\n    setHasAutoOptimized(false);\n    setOptimizationLevel('none');\n  }, []);\n\n  /**\n   * Obtiene las estadísticas actuales del sistema\n   */\n  const getStats = useCallback(() => {\n    // Actualizar FPS si es necesario\n    if (\n      frameTimeReference.current.length === 0 ||\n      performance.now() - frameTimeReference.current.at(-1) > 1000\n    ) {\n      measurePerformance();\n    }\n\n    return { ...statsReference.current };\n  }, [measurePerformance]);\n\n  // Limpiar recursos al desmontar\n  useEffect(() => {\n    return () => {\n      if (monitoringTimerReference.current) {\n        clearInterval(monitoringTimerReference.current);\n      }\n      frameTimeReference.current = [];\n    };\n  }, []);\n\n  return {\n    // Estado\n    optimizationLevel,\n    hasAutoOptimized,\n\n    // Funciones principales\n    updatePerformance,\n    startMonitoring,\n    measurePerformance,\n    getStats,\n\n    // Utilidades\n    getPerformanceRecommendations,\n    resetAdaptiveSystem,\n    fpsRef: fpsReference,\n  };\n};\n\nexport default useAdaptivePerformance;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useConnectionValidator.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'useConnectionValidator' has too many lines (170). Maximum allowed is 80.",
        "line": 10,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 191,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (128). Maximum allowed is 80.",
        "line": 13,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 140,
        "endColumn": 7
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 146,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 186,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useMemo, useCallback } from 'react';\n\n/**\n * Hook personalizado para validar conexiones entre nodos.\n * Define reglas para determinar qué tipos de nodos pueden conectarse entre sí.\n * @param {Array} nodes - Lista de nodos en el flujo.\n * @param {Array} edges - Lista de aristas en el flujo.\n * @returns {Object} - Función `isValidConnection` para validar conexiones.\n */\nexport default function useConnectionValidator(nodes, edges) {\n  // Mapa de conexiones válidas por tipo de nodo\n  const validConnections = useMemo(\n    () => ({\n      start: [\n        'message',\n        'decision',\n        'action',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n        'emotionDetection',\n      ],\n      message: [\n        'message',\n        'end',\n        'decision',\n        'action',\n        'option',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n        'emotionDetection',\n      ],\n      decision: [\n        'message',\n        'end',\n        'action',\n        'option',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      action: [\n        'message',\n        'end',\n        'decision',\n        'option',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      option: [\n        'message',\n        'decision',\n        'action',\n        'httpRequest',\n        'end',\n        'ai',\n        'aiNodePro',\n      ],\n      httpRequest: [\n        'message',\n        'decision',\n        'action',\n        'end',\n        'option',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      power: [\n        'message',\n        'end',\n        'decision',\n        'action',\n        'option',\n        'httpRequest',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      discord: [\n        'message',\n        'end',\n        'decision',\n        'action',\n        'option',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      ai: [\n        'message',\n        'decision',\n        'action',\n        'end',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n        'emotionDetection',\n      ],\n      aiNodePro: [\n        'message',\n        'decision',\n        'action',\n        'end',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n        'emotionDetection',\n      ],\n      emotionDetection: [\n        'message',\n        'end',\n        'decision',\n        'action',\n        'option',\n        'httpRequest',\n        'power',\n        'discord',\n        'ai',\n        'aiNodePro',\n      ],\n      end: [],\n    }),\n    [],\n  );\n\n  // Función para validar si una conexión entre handles es válida\n  const isValidConnection = useCallback(\n    (connection) => {\n      if (!connection.source || !connection.target) {\n        return false;\n      }\n\n      const sourceNode = nodes.find((node) => node.id === connection.source);\n      const targetNode = nodes.find((node) => node.id === connection.target);\n\n      if (!sourceNode || !targetNode) {\n        return false;\n      }\n\n      const targetAllowedTypes = validConnections[sourceNode.type];\n      if (!targetAllowedTypes) {\n        return false;\n      }\n\n      if (targetNode.type === 'start') {\n        return false;\n      }\n\n      if (sourceNode.type === 'end') {\n        return false;\n      }\n\n      const normalizedSourceHandle = connection.sourceHandle || 'default';\n      const normalizedTargetHandle = connection.targetHandle || 'default';\n      const existingEdge = edges.find(\n        (edge) =>\n          edge.source === connection.source &&\n          edge.target === connection.target &&\n          (edge.sourceHandle || 'default') === normalizedSourceHandle &&\n          (edge.targetHandle || 'default') === normalizedTargetHandle,\n      );\n\n      if (existingEdge) {\n        return false;\n      }\n\n      return targetAllowedTypes.includes(targetNode.type);\n    },\n    [nodes, edges, validConnections],\n  );\n\n  return { isValidConnection };\n}\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useContextMenu.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useDragAndDropManager.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (130). Maximum allowed is 80.",
        "line": 12,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 159,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (105). Maximum allowed is 80.",
        "line": 26,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 145,
        "endColumn": 6
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 26,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 145,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport { calculateCorrectDropPosition } from '../drop-position-fix';\nimport { applyNodeVisibilityFix } from '../utils/optimized-flow-fixes';\n\n/**\n * Hook para gestionar la lógica de arrastrar y soltar (Drag and Drop) en el editor de flujos.\n */\nconst useDragAndDropManager = (\n  reactFlowWrapperReference,\n  reactFlowInstance,\n  setHasChanges,\n) => {\n  const setNodes = useFlowStore((state) => state.setNodes);\n  const setEdges = useFlowStore((state) => state.setEdges);\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const nodeInfoString = event.dataTransfer.getData(\n        'application/reactflow',\n      );\n\n      if (nodeInfoString === undefined || !nodeInfoString) {\n        return;\n      }\n\n      let nodeInfo;\n      try {\n        nodeInfo = JSON.parse(nodeInfoString);\n      } catch {\n        return;\n      }\n\n      if (\n        !nodeInfo ||\n        !nodeInfo.type ||\n        !nodeInfo.id ||\n        !nodeInfo.data ||\n        nodeInfo.data.label === undefined\n      ) {\n        return;\n      }\n\n      if (!reactFlowWrapperReference.current || !reactFlowInstance) {\n        return;\n      }\n\n      const position = calculateCorrectDropPosition(\n        event,\n        reactFlowWrapperReference.current,\n        reactFlowInstance,\n      );\n\n      const defaultConditions = [\n        { id: uuidv4(), text: 'Opción A', color: '#3498db' },\n        { id: uuidv4(), text: 'Opción B', color: '#e74c3c' },\n      ];\n\n      const newNode = {\n        id: nodeInfo.id,\n        type: nodeInfo.type,\n        position,\n        data: {\n          ...nodeInfo.data,\n          id: nodeInfo.id,\n          ...(nodeInfo.type === 'decision' && {\n            conditions: defaultConditions,\n          }),\n        },\n        draggable: true,\n        selectable: true,\n        connectable: true,\n        style: { opacity: 1, visibility: 'visible', ...nodeInfo.style },\n        hidden: false,\n      };\n\n      if (newNode.type === 'decision') {\n        const optionNodes = defaultConditions.map((condition, index) => ({\n          id: `option-${newNode.id}-${condition.id}`,\n          type: 'option',\n          position: { x: position.x, y: position.y + 100 + index * 80 },\n          data: {\n            sourceNode: newNode.id,\n            conditionId: condition.id,\n            text: condition.text,\n            instruction: condition.text,\n            color: condition.color,\n          },\n        }));\n\n        const newEdges = defaultConditions.map((condition) => ({\n          id: `edge-${newNode.id}-${condition.id}`,\n          source: newNode.id,\n          target: `option-${newNode.id}-${condition.id}`,\n          sourceHandle: `output-${condition.id}`,\n          targetHandle: 'target',\n          type: 'elite-edge',\n          animated: true,\n          style: { stroke: condition.color, strokeWidth: 2 },\n        }));\n\n        const { nodes: currentNodes, edges: currentEdges } =\n          useFlowStore.getState();\n        const finalNodes = [...currentNodes, newNode, ...optionNodes];\n        const finalEdges = [...currentEdges, ...newEdges];\n\n        setNodes(finalNodes);\n        setEdges(finalEdges);\n      } else {\n        const { nodes: currentNodes } = useFlowStore.getState();\n        const finalNodes = [...currentNodes, newNode];\n        setNodes(finalNodes);\n      }\n\n      if (typeof setHasChanges === 'function') {\n        setHasChanges(true);\n      }\n\n      setTimeout(() => {\n        try {\n          if (typeof applyNodeVisibilityFix === 'function') {\n            applyNodeVisibilityFix();\n          }\n          for (const nodeElement of document.querySelectorAll(\n            '.react-flow__node',\n          )) {\n            nodeElement.style.opacity = '1';\n            nodeElement.style.visibility = 'visible';\n            nodeElement.style.display = 'block';\n          }\n        } catch {\n          // Silently fail\n        }\n      }, 100);\n    },\n    [\n      reactFlowInstance,\n      setNodes,\n      setEdges,\n      setHasChanges,\n      reactFlowWrapperReference,\n    ],\n  );\n\n  return {\n    onDragOver,\n    onDrop,\n  };\n};\n\nexport default useDragAndDropManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useEdgeDragOptimizer.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (226). Maximum allowed is 80.",
        "line": 26,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 350,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 19. Maximum allowed is 10.",
        "line": 84,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 179,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.",
        "line": 84,
        "column": 12,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 84,
        "endColumn": 14
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 113,
        "column": 32,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 113,
        "endColumn": 36
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 204,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 293,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// OPTIMIZACIÓN DEFINITIVA para el arrastre de nodos y aristas\n// Implementación elite con máximo rendimiento y fluidez\nimport { useCallback, useRef, useEffect } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n/**\n * Hook de optimización avanzada para el arrastre de nodos\n * Implementa un sistema de alto rendimiento con tres niveles de optimización:\n * 1. Cache de conexiones para minimizar búsquedas\n * 2. Actualización diferida para maximizar fluidez\n * 3. Gestión de memoria para evitar fugas\n *\n * @returns {Object} Manejadores optimizados para eventos de arrastre\n */\n// Configuración de rendimiento ajustable\nconst PERFORMANCE_CONFIG = {\n  // Umbral de tiempo mínimo entre actualizaciones en milisegundos\n  UPDATE_INTERVAL_MS: 50,\n  // Límite de conexiones para optimización agresiva\n  MAX_CONNECTIONS_FOR_REALTIME: 4,\n  // Indica si el movimiento debe ser absolutamente fluido\n  PRIORITIZE_FLUIDITY: true,\n};\n\nconst useEdgeDragOptimizer = () => {\n  // Usar el store de Zustand directamente\n  const { edges, nodes, setEdges } = useFlowStore((state) => ({\n    edges: state.edges,\n    nodes: state.nodes,\n    setEdges: state.setEdges,\n  }));\n\n  // Sistema avanzado de caché de conexiones para minimizar búsquedas\n  const nodeConnectionsCache = useRef(new Map());\n\n  // Verifica si la caché necesita actualización\n  const connectionCacheNeedsUpdate = useRef(true);\n\n  // Referencias a datos del último estado\n  const lastEdgeCount = useRef(0);\n\n  // Construir la caché de conexiones sólo cuando es necesario\n  const buildConnectionsCache = useCallback(() => {\n    // Evitar reconstrucciones innecesarias\n    if (\n      !connectionCacheNeedsUpdate.current &&\n      lastEdgeCount.current === edges.length\n    ) {\n      return;\n    }\n\n    // Actualizar los contadores de estado\n    lastEdgeCount.current = edges.length;\n    connectionCacheNeedsUpdate.current = false;\n\n    // OPTIMIZACIÓN: Construir caché completa de conexiones de aristas para nodos\n    const newCache = new Map();\n\n    if (edges.length > 0) {\n      for (const edge of edges) {\n        if (!edge.source || !edge.target) continue;\n\n        // Registrar aristas salientes para el nodo origen\n        if (!newCache.has(edge.source)) {\n          newCache.set(edge.source, { sourcesOf: [], targetsOf: [] });\n        }\n        newCache.get(edge.source).sourcesOf.push(edge.id);\n\n        // Registrar aristas entrantes para el nodo destino\n        if (!newCache.has(edge.target)) {\n          newCache.set(edge.target, { sourcesOf: [], targetsOf: [] });\n        }\n        newCache.get(edge.target).targetsOf.push(edge.id);\n      }\n    }\n\n    // Actualizar la caché global\n    nodeConnectionsCache.current = newCache;\n  }, [edges]);\n\n  // RENDIMIENTO MÁXIMO: Sistema de actualización de aristas ultra-optimizado\n  const updateEdgesOnDrag = useCallback(\n    (node) => {\n      if (!node) return;\n\n      // Verificar validez del nodo\n      const draggedNode =\n        typeof node === 'string'\n          ? nodes.find((nodeItem) => nodeItem.id === node)\n          : node;\n\n      if (!draggedNode || !draggedNode.id || !draggedNode.position) return;\n\n      // Reconstruir caché si es necesario\n      if (connectionCacheNeedsUpdate.current) {\n        buildConnectionsCache();\n      }\n\n      // OPTIMIZACIÓN 1: Verificar si el nodo tiene alguna conexión\n      const nodeId = draggedNode.id;\n      const connections = nodeConnectionsCache.current.get(nodeId);\n\n      if (\n        !connections ||\n        (connections.sourcesOf.length === 0 &&\n          connections.targetsOf.length === 0)\n      ) {\n        return;\n      }\n\n      // OPTIMIZACIÓN 2: Crear un array de cambios específicos\n      // en lugar de modificar todo el array de aristas\n      const edgeUpdates = [];\n      const nodeCenter = {\n        x: draggedNode.position.x + (draggedNode.width || 100) / 2,\n        y: draggedNode.position.y + (draggedNode.height || 40) / 2,\n      };\n\n      // MEJORA CRÍTICA: Batch de actualizaciones en un único array\n      // para evitar múltiples re-renderizados\n\n      // Actualizar aristas donde este nodo es origen\n      if (connections.sourcesOf.length > 0) {\n        for (const edgeId of connections.sourcesOf) {\n          const edgeIndex = edges.findIndex((edge) => edge.id === edgeId);\n          if (edgeIndex !== -1) {\n            edgeUpdates.push({\n              id: edgeId,\n              sourceX: nodeCenter.x,\n              sourceY: nodeCenter.y,\n            });\n          }\n        }\n      }\n\n      // Actualizar aristas donde este nodo es destino\n      if (connections.targetsOf.length > 0) {\n        for (const edgeId of connections.targetsOf) {\n          const edgeIndex = edges.findIndex((edge) => edge.id === edgeId);\n          if (edgeIndex !== -1) {\n            edgeUpdates.push({\n              id: edgeId,\n              targetX: nodeCenter.x,\n              targetY: nodeCenter.y,\n            });\n          }\n        }\n      }\n\n      // OPTIMIZACIÓN 3: Aplicar TODAS las actualizaciones en un solo cambio atómico\n      // Solo si hay cambios que aplicar\n      if (edgeUpdates.length > 0) {\n        // Aplicar todos los cambios de una vez para minimizar renderizados\n        const updatedEdges = edges.map((edge) => {\n          const update = edgeUpdates.find((u) => u.id === edge.id);\n          if (!update) return edge;\n\n          return {\n            ...edge,\n            ...(update.sourceX === undefined\n              ? {}\n              : { sourceX: update.sourceX }),\n            ...(update.sourceY === undefined\n              ? {}\n              : { sourceY: update.sourceY }),\n            ...(update.targetX === undefined\n              ? {}\n              : { targetX: update.targetX }),\n            ...(update.targetY === undefined\n              ? {}\n              : { targetY: update.targetY }),\n          };\n        });\n\n        // ACTUALIZACIÓN ATÓMICA: un solo setEdges para todos los cambios\n        setEdges(updatedEdges);\n      }\n    },\n    [edges, nodes, setEdges, buildConnectionsCache],\n  );\n\n  // Actualizar caché cuando cambia la estructura de aristas\n  useEffect(() => {\n    connectionCacheNeedsUpdate.current = true;\n    buildConnectionsCache();\n  }, [edges.length, buildConnectionsCache]);\n\n  // Almacenamiento persistente para gestionar estado durante el arrastre\n  const dragState = useRef({\n    isDragging: false,\n    lastUpdateTime: 0,\n    lastNode: undefined,\n    pendingUpdate: false,\n    dragStartPosition: undefined,\n    dragCurrentPosition: undefined,\n  });\n\n  // TRIPLE OPTIMIZACIÓN: Sistema de tres capas para máxima fluidez\n  // 1. Detecta el evento sin throttling para sentirse instantáneo\n  // 2. Procesa el movimiento visualmente sin esperas\n  // 3. Actualiza las conexiones de forma diferida y optimizada\n  const handleNodeDrag = useCallback(\n    (event, node) => {\n      if (!node) return;\n\n      // Capturar el tipo de evento para procesamiento diferenciado\n      const eventType = event.type || 'drag';\n      const nodeId = node.id;\n      const now = performance.now();\n\n      // FASE 1: INICIO DEL ARRASTRE\n      if (eventType === 'dragstart') {\n        dragState.current = {\n          ...dragState.current,\n          isDragging: true,\n          lastUpdateTime: now,\n          lastNode: node,\n          dragStartPosition: { ...node.position },\n          dragCurrentPosition: { ...node.position },\n        };\n\n        // OPTIMIZACIÓN: Marcar el cuerpo con clase para optimizaciones CSS\n        document.body.classList.add('elite-node-dragging');\n        return;\n      }\n\n      // FASE 2: FIN DEL ARRASTRE\n      if (eventType === 'dragend') {\n        // Actualización final garantizada\n        updateEdgesOnDrag(node);\n\n        document.body.classList.remove('elite-node-dragging');\n\n        dragState.current = {\n          ...dragState.current,\n          isDragging: false,\n          pendingUpdate: false,\n          lastNode: undefined,\n        };\n        return;\n      }\n\n      // FASE 3: DURANTE EL ARRASTRE (la parte crítica para el rendimiento)\n      // Actualizar la posición actual para referencia\n      dragState.current.dragCurrentPosition = { ...node.position };\n      dragState.current.lastNode = node;\n\n      // OPTIMIZACIÓN CRÍTICA: Verificar primero si el nodo tiene conexiones\n      const connectionInfo = nodeConnectionsCache.current.get(nodeId);\n      if (\n        !connectionInfo ||\n        (connectionInfo.sourcesOf.length === 0 &&\n          connectionInfo.targetsOf.length === 0)\n      ) {\n        // SALIDA ULTRA-RÁPIDA: Nodo sin conexiones, no necesita actualizar aristas\n        return;\n      }\n\n      // Estrategia adaptativa basada en cantidad de conexiones\n      const totalConnections =\n        connectionInfo.sourcesOf.length + connectionInfo.targetsOf.length;\n\n      // ESTRATEGIA 1: Pocos nodos - Actualización en tiempo real\n      if (totalConnections <= PERFORMANCE_CONFIG.MAX_CONNECTIONS_FOR_REALTIME) {\n        // Frecuencia controlada pero alta para máxima precisión visual\n        if (now - dragState.current.lastUpdateTime > 25) {\n          updateEdgesOnDrag(node);\n          dragState.current.lastUpdateTime = now;\n        }\n        return;\n      }\n\n      // ESTRATEGIA 2: Muchos nodos - Actualización diferida\n      // Solo actualizar si ha pasado suficiente tiempo Y no hay una actualización pendiente\n      if (\n        !dragState.current.pendingUpdate &&\n        now - dragState.current.lastUpdateTime >\n          PERFORMANCE_CONFIG.UPDATE_INTERVAL_MS\n      ) {\n        dragState.current.pendingUpdate = true;\n\n        // Usar requestAnimationFrame para sincronizar con el ciclo de renderizado\n        requestAnimationFrame(() => {\n          // Verificar si todavía estamos arrastrando\n          if (dragState.current.isDragging && dragState.current.lastNode) {\n            updateEdgesOnDrag(dragState.current.lastNode);\n          }\n          dragState.current.lastUpdateTime = performance.now();\n          dragState.current.pendingUpdate = false;\n        });\n      }\n    },\n    [updateEdgesOnDrag],\n  );\n\n  // MODO ULTRA: Máxima fluidez sacrificando actualización visual en tiempo real\n  const handleNodeDragUltra = useCallback(\n    (event, node) => {\n      if (!node) return;\n\n      const eventType = event.type || '';\n\n      // En eventos de inicio y fin, siempre aplicar actualizaciones\n      if (eventType === 'dragstart') {\n        // Solo marcar el inicio del arrastre\n        dragState.current.isDragging = true;\n        dragState.current.lastNode = node;\n        document.body.classList.add(\n          'elite-node-dragging',\n          'elite-ultra-dragging',\n        );\n      } else if (eventType === 'dragend') {\n        // Garantizar actualización al final del arrastre\n        updateEdgesOnDrag(node);\n        document.body.classList.remove(\n          'elite-node-dragging',\n          'elite-ultra-dragging',\n        );\n        dragState.current.isDragging = false;\n      }\n      // Durante el arrastre NO actualizar nada para máxima fluidez\n    },\n    [updateEdgesOnDrag],\n  );\n\n  // Limpieza de clases y estado en desmontaje\n  useEffect(() => {\n    return () => {\n      document.body.classList.remove(\n        'elite-node-dragging',\n        'elite-ultra-dragging',\n      );\n    };\n  }, []);\n\n  // Función de invalidación de caché para uso externo\n  const invalidateConnectionCache = useCallback(() => {\n    connectionCacheNeedsUpdate.current = true;\n  }, []);\n\n  // Interfaz pública del hook\n  return {\n    handleNodeDrag, // Manejador estándar optimizado\n    handleNodeDragUltra, // Manejador ultra-rendimiento\n    updateEdgesOnDrag, // Actualizador directo de aristas\n    buildConnectionsCache, // Constructor de caché\n    invalidateConnectionCache, // Invalidador de caché para eventos externos\n  };\n};\n\nexport default useEdgeDragOptimizer;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useEdgeHandleFixer.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowEdges.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (119). Maximum allowed is 80.",
        "line": 14,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 150,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 98,
        "column": 25,
        "nodeType": null,
        "endLine": 98,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { applyEdgeChanges, addEdge } from 'reactflow';\n\nimport { connectionExists } from '../utils/flowEditorUtilities';\nimport { processEdgesFromBackend } from '../utils/handleFixer';\n\n/**\n * Hook personalizado para la gestión de aristas en el editor de flujos\n * @param {Array} initialEdges - Aristas iniciales\n * @param {Function} setEdges - Función para actualizar aristas en el componente padre\n * @param {Function} addToHistory - Función para añadir cambios al historial\n * @returns {Object} - Métodos y estado para gestionar aristas\n */\nconst useFlowEdges = (initialEdges, setEdges, addToHistory) => {\n  const [internalEdges, setInternalEdges] = useState(initialEdges || []);\n  const edgesMapReference = useRef(new Map());\n\n  const initEdges = useCallback((edgesToInit) => {\n    if (!edgesToInit || !Array.isArray(edgesToInit)) {\n      setInternalEdges([]);\n      return;\n    }\n    const processedEdges = processEdgesFromBackend(edgesToInit);\n    setInternalEdges(processedEdges);\n  }, []);\n\n  useEffect(() => {\n    initEdges(initialEdges);\n  }, [initialEdges, initEdges]);\n\n  const onEdgesChange = useCallback(\n    (changes) => {\n      setInternalEdges((edges) => {\n        const newEdges = applyEdgeChanges(changes, edges);\n        const edgesMap = edgesMapReference.current;\n        for (const change of changes) {\n          if (change.type === 'remove') {\n            const removedEdge = edgesMap.get(change.id);\n            edgesMap.delete(change.id);\n            if (removedEdge) {\n              addToHistory({\n                type: 'removeEdge',\n                edges: [removedEdge],\n              });\n            }\n          } else {\n            const updatedEdge = newEdges.find((edge) => edge.id === change.id);\n            if (updatedEdge) {\n              edgesMap.set(change.id, updatedEdge);\n            }\n          }\n        }\n        setTimeout(() => setEdges(newEdges), 0);\n        return newEdges;\n      });\n    },\n    [setEdges, addToHistory],\n  );\n\n  const onConnect = useCallback(\n    (parameters) => {\n      if (connectionExists(internalEdges, parameters)) {\n        return;\n      }\n\n      if (!parameters.source || !parameters.target) {\n        return;\n      }\n\n      const sourceHandle = parameters.sourceHandle || 'output';\n      const targetHandle = parameters.targetHandle || 'input';\n\n      const newEdge = {\n        ...parameters,\n        id: `edge-${parameters.source}-${parameters.target}-${Date.now()}`,\n        sourceHandle,\n        targetHandle,\n        type: 'default',\n        animated: false,\n        style: { stroke: '#00e0ff', strokeWidth: 2 },\n        data: {\n          ...parameters.data,\n          isEnergyHose: true,\n          flowSpeed: 0.5,\n          flowColor: '#00e0ff',\n        },\n        sourceOriginal: parameters.source,\n        targetOriginal: parameters.target,\n      };\n\n      setInternalEdges((edges) => {\n        const newEdges = addEdge(newEdge, edges);\n        edgesMapReference.current.set(newEdge.id, newEdge);\n        addToHistory({ edges: newEdges });\n\n        setTimeout(() => {\n          setEdges(newEdges);\n          setTimeout(() => {\n            document.dispatchEvent(\n              new CustomEvent('elite-edge-update-required', {\n                detail: { id: newEdge.id },\n              }),\n            );\n          }, 50);\n        }, 0);\n\n        return newEdges;\n      });\n    },\n    [internalEdges, setEdges, addToHistory],\n  );\n\n  const removeConnectedEdges = useCallback(\n    (nodeId) => {\n      setInternalEdges((edges) => {\n        const edgesToRemove = edges.filter(\n          (edge) => edge.source === nodeId || edge.target === nodeId,\n        );\n\n        if (edgesToRemove.length === 0) return edges;\n\n        const newEdges = edges.filter(\n          (edge) => edge.source !== nodeId && edge.target !== nodeId,\n        );\n\n        for (const edgeToRemove of edgesToRemove) {\n          edgesMapReference.current.delete(edgeToRemove.id);\n        }\n\n        setTimeout(() => setEdges(newEdges), 0);\n\n        addToHistory({\n          type: 'removeEdge',\n          edges: edgesToRemove,\n        });\n\n        return newEdges;\n      });\n    },\n    [setEdges, addToHistory],\n  );\n\n  return {\n    edges: internalEdges,\n    edgesMap: edgesMapReference.current,\n    onEdgesChange,\n    onConnect,\n    removeConnectedEdges,\n  };\n};\n\nexport default useFlowEdges;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowElementsManager.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (177). Maximum allowed is 80.",
        "line": 12,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 199,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (85). Maximum allowed is 80.",
        "line": 28,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 116,
        "endColumn": 6
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 15. Maximum allowed is 10.",
        "line": 28,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 116,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 41,
        "column": 62,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 41,
        "endColumn": 75
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 45,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 45,
        "endColumn": 47
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 46,
        "column": 15,
        "nodeType": "MemberExpression",
        "endLine": 46,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\nimport { NODE_LABELS } from '@/utils/node-config.js';\n\nimport { applyNodeVisibilityFix } from '../utils/optimized-flow-fixes';\n\n/**\n * Hook para gestionar la manipulación de nodos y aristas en el editor de flujos.\n * Encapsula la lógica para añadir, eliminar, duplicar nodos, y eliminar/actualizar aristas.\n */\nconst useFlowElementsManager = (saveHistoryState, setHasChanges) => {\n  const {\n    nodes,\n    edges,\n    setNodes,\n    setEdges,\n    onConnect: onConnectZustand,\n  } = useFlowStore((state) => ({\n    nodes: state.nodes,\n    edges: state.edges,\n    setNodes: state.setNodes,\n    setEdges: state.setEdges,\n    onConnect: state.onConnect,\n  }));\n\n  const addNodeToFlow = useCallback(\n    (nodeType, position) => {\n      if (!nodeType) {\n        return;\n      }\n      if (\n        !position ||\n        typeof position.x !== 'number' ||\n        typeof position.y !== 'number'\n      ) {\n        position = { x: 100, y: 100 }; // Posición por defecto\n      }\n\n      saveHistoryState(nodes, edges);\n      const nodeId = `${nodeType}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n      const nodeData = {\n        id: nodeId,\n        label:\n          NODE_LABELS && NODE_LABELS[nodeType]\n            ? NODE_LABELS[nodeType]\n            : `Nuevo ${nodeType}`,\n      };\n\n      switch (nodeType) {\n        case 'message': {\n          nodeData.message = 'Escribe tu mensaje aquí';\n          break;\n        }\n        case 'decision': {\n          nodeData.question = '¿Qué decisión quieres tomar?';\n          nodeData.conditions = [\n            { id: `cond-${nodeId}-default-yes`, text: 'Sí' },\n            { id: `cond-${nodeId}-default-no`, text: 'No' },\n          ];\n          nodeData.handleIds = ['output-0', 'output-1'];\n          break;\n        }\n        case 'option': {\n          nodeData.condition = 'Condición';\n          break;\n        }\n        case 'action': {\n          nodeData.description = 'Descripción de la acción';\n          break;\n        }\n        case 'end': {\n          nodeData.endMessage = 'Fin de la conversación';\n          break;\n        }\n        case 'start': {\n          nodeData.startMessage = 'Inicio de la conversación';\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      const newNode = {\n        id: nodeId,\n        type: nodeType,\n        position: {\n          x: Math.round(position.x),\n          y: Math.round(position.y),\n        },\n        data: nodeData,\n        draggable: true,\n        selectable: true,\n        connectable: true,\n        style: { opacity: 1, visibility: 'visible' },\n        hidden: false,\n      };\n\n      try {\n        const currentNodes = useFlowStore.getState().nodes || [];\n        setNodes([...currentNodes, newNode]);\n        setHasChanges(true);\n        setTimeout(() => {\n          try {\n            applyNodeVisibilityFix();\n            for (const node of document.querySelectorAll('.react-flow__node')) {\n              node.style.opacity = '1';\n              node.style.visibility = 'visible';\n              node.style.display = 'block';\n            }\n          } catch {}\n        }, 100);\n      } catch {}\n      return newNode;\n    },\n    [nodes, edges, setNodes, saveHistoryState, setHasChanges],\n  );\n\n  const deleteNode = useCallback(\n    (nodeId) => {\n      if (!nodeId) return;\n      saveHistoryState(nodes, edges);\n      const newNodes = nodes.filter((node) => node.id !== nodeId);\n      setNodes(newNodes);\n      const newEdges = edges.filter(\n        (edge) => edge.source !== nodeId && edge.target !== nodeId,\n      );\n      setEdges(newEdges);\n      setHasChanges(true);\n    },\n    [nodes, edges, setNodes, setEdges, saveHistoryState, setHasChanges],\n  );\n\n  const duplicateNode = useCallback(\n    (nodeId) => {\n      const node = nodes.find((n) => n.id === nodeId);\n      if (!node) return;\n      saveHistoryState(nodes, edges);\n      const newNode = {\n        ...node,\n        id: `${node.type}-${Date.now()}`,\n        position: {\n          x: node.position.x + 50,\n          y: node.position.y + 50,\n        },\n      };\n      setNodes([...nodes, newNode]);\n      setHasChanges(true);\n      return newNode;\n    },\n    [nodes, edges, setNodes, saveHistoryState, setHasChanges],\n  );\n\n  const deleteEdge = useCallback(\n    (edgeId) => {\n      if (!edgeId) return;\n      saveHistoryState(nodes, edges);\n      const newEdges = edges.filter((edge) => edge.id !== edgeId);\n      setEdges(newEdges);\n      setHasChanges(true);\n    },\n    [nodes, edges, setEdges, saveHistoryState, setHasChanges],\n  );\n\n  const updateEdgeData = useCallback(\n    (edgeId, newData) => {\n      if (!edgeId) return;\n      saveHistoryState(nodes, edges);\n      const newEdges = edges.map((edge) => {\n        if (edge.id === edgeId) {\n          return { ...edge, data: { ...edge.data, ...newData } };\n        }\n        return edge;\n      });\n      setEdges(newEdges);\n      setHasChanges(true);\n    },\n    [nodes, edges, setEdges, saveHistoryState, setHasChanges],\n  );\n\n  const onConnectNodes = useCallback(\n    (parameters) => {\n      saveHistoryState(nodes, edges);\n      onConnectZustand(parameters);\n      setHasChanges(true);\n    },\n    [nodes, edges, onConnectZustand, saveHistoryState, setHasChanges],\n  );\n\n  return {\n    addNodeToFlow,\n    deleteNode,\n    duplicateNode,\n    deleteEdge,\n    updateEdgeData,\n    onConnectNodes,\n  };\n};\n\nexport default useFlowElementsManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowEvents.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowHistory.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (129). Maximum allowed is 80.",
        "line": 9,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 191,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 40,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 40,
        "endColumn": 48
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 49,
        "column": 47,
        "nodeType": null,
        "endLine": 49,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 66,
        "column": 31,
        "nodeType": null,
        "endLine": 66,
        "endColumn": 33
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 82,
        "column": 47,
        "nodeType": null,
        "endLine": 82,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 123,
        "column": 47,
        "nodeType": null,
        "endLine": 123,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 134,
        "column": 31,
        "nodeType": null,
        "endLine": 134,
        "endColumn": 33
      },
      {
        "ruleId": "sonarjs/no-nested-functions",
        "severity": 2,
        "message": "Refactor this code to not nest functions more than 4 levels deep.",
        "line": 156,
        "column": 47,
        "nodeType": null,
        "endLine": 156,
        "endColumn": 49
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useCallback } from 'react';\n\n/**\n * Hook personalizado para gestionar el historial de acciones en el editor de flujos\n * @param {Function} setNodes - Función para actualizar nodos en el componente padre\n * @param {Function} setEdges - Función para actualizar aristas en el componente padre\n * @returns {Object} - Métodos y estado para gestionar el historial\n */\nconst useFlowHistory = (setNodes, setEdges) => {\n  // Historial de acciones y posición actual en el historial\n  const [history, setHistory] = useState([]);\n  const [currentHistoryIndex, setCurrentHistoryIndex] = useState(-1);\n\n  // Crear las listas past y future para compatibilidad\n  const past = history.slice(0, currentHistoryIndex + 1);\n  const future = history.slice(currentHistoryIndex + 1);\n\n  /**\n   * Añade una acción al historial\n   */\n  const addToHistory = useCallback(\n    (action) => {\n      setHistory((previous) => {\n        // Si estamos en medio del historial, eliminar las acciones futuras\n        const newHistory = previous.slice(0, currentHistoryIndex + 1);\n        return [...newHistory, action];\n      });\n\n      setCurrentHistoryIndex((previous) => previous + 1);\n    },\n    [currentHistoryIndex],\n  );\n\n  /**\n   * Deshace la última acción\n   */\n  const undo = useCallback(() => {\n    if (currentHistoryIndex < 0) return;\n\n    const action = history[currentHistoryIndex];\n\n    // Deshacer la acción según su tipo\n    switch (action.type) {\n      case 'add': {\n        // Eliminar nodos añadidos\n        setNodes((nodes) =>\n          nodes.filter(\n            (node) =>\n              !action.nodes.some((actionNode) => actionNode.id === node.id),\n          ),\n        );\n        break;\n      }\n\n      case 'remove': {\n        // Restaurar nodos eliminados\n        setNodes((nodes) => [...nodes, ...action.nodes]);\n        break;\n      }\n\n      case 'move': {\n        // Restaurar posiciones anteriores\n        setNodes((nodes) =>\n          nodes.map((node) => {\n            const movedNode = action.nodes.find(\n              (movedNodeItem) => movedNodeItem.id === node.id,\n            );\n            if (movedNode && movedNode.prevPosition) {\n              return { ...node, position: movedNode.prevPosition };\n            }\n            return node;\n          }),\n        );\n        break;\n      }\n\n      case 'addEdge': {\n        // Eliminar aristas añadidas\n        setEdges((edges) =>\n          edges.filter(\n            (edge) =>\n              !action.edges.some((actionEdge) => actionEdge.id === edge.id),\n          ),\n        );\n        break;\n      }\n\n      case 'removeEdge': {\n        // Restaurar aristas eliminadas\n        setEdges((edges) => [...edges, ...action.edges]);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n\n    setCurrentHistoryIndex((previous) => previous - 1);\n  }, [history, currentHistoryIndex, setNodes, setEdges]);\n\n  /**\n   * Rehace la última acción deshecha\n   */\n  const redo = useCallback(() => {\n    if (currentHistoryIndex >= history.length - 1) return;\n\n    const action = history[currentHistoryIndex + 1];\n\n    // Rehacer la acción según su tipo\n    switch (action.type) {\n      case 'add': {\n        // Añadir nodos nuevamente\n        setNodes((nodes) => [...nodes, ...action.nodes]);\n        break;\n      }\n\n      case 'remove': {\n        // Eliminar nodos nuevamente\n        setNodes((nodes) =>\n          nodes.filter(\n            (node) =>\n              !action.nodes.some((actionNode) => actionNode.id === node.id),\n          ),\n        );\n        break;\n      }\n\n      case 'move': {\n        // Aplicar movimientos nuevamente\n        setNodes((nodes) =>\n          nodes.map((node) => {\n            const movedNode = action.nodes.find(\n              (movedNodeItem) => movedNodeItem.id === node.id,\n            );\n            if (movedNode) {\n              return { ...node, position: movedNode.position };\n            }\n            return node;\n          }),\n        );\n        break;\n      }\n\n      case 'addEdge': {\n        // Añadir aristas nuevamente\n        setEdges((edges) => [...edges, ...action.edges]);\n        break;\n      }\n\n      case 'removeEdge': {\n        // Eliminar aristas nuevamente\n        setEdges((edges) =>\n          edges.filter(\n            (edge) =>\n              !action.edges.some((actionEdge) => actionEdge.id === edge.id),\n          ),\n        );\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n\n    setCurrentHistoryIndex((previous) => previous + 1);\n  }, [history, currentHistoryIndex, setNodes, setEdges]);\n\n  /**\n   * Verifica si se puede deshacer\n   */\n  const canUndoValue = currentHistoryIndex >= 0;\n\n  /**\n   * Verifica si se puede rehacer\n   */\n  const canRedoValue = currentHistoryIndex < history.length - 1;\n\n  return {\n    addToHistory,\n    undo,\n    redo,\n    canUndo: canUndoValue,\n    canRedo: canRedoValue,\n    past,\n    future,\n    history,\n    currentHistoryIndex,\n  };\n};\n\nexport default useFlowHistory;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowInteractions.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (103). Maximum allowed is 80.",
        "line": 20,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 134,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback, useEffect, useState } from 'react';\nimport { useReactFlow } from 'reactflow';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport { DELETE_KEYS } from '../utils/flowEditorConstants';\nimport {\n  handleNodeDeletion,\n  handleUndoRedo,\n} from '../utils/flowInteractionUtils';\n\n/**\n * Hook personalizado para gestionar las interacciones del usuario con el editor de flujos.\n * @param {Object} selectedNode - Nodo seleccionado actualmente.\n * @param {Function} setSelectedNode - Funciu00f3n para actualizar el nodo seleccionado.\n * @param {Function} undo - Funciu00f3n para deshacer.\n * @param {Function} redo - Funciu00f3n para rehacer.\n * @returns {Object} - Mu00e9todos y estado para gestionar interacciones.\n */\nconst useFlowInteractions = ({ selectedNode, setSelectedNode, undo, redo }) => {\n  const [contextMenu, setContextMenu] = useState();\n  const reactFlowInstance = useReactFlow();\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (\n        event.target.tagName === 'INPUT' ||\n        event.target.tagName === 'TEXTAREA' ||\n        event.target.isContentEditable\n      ) {\n        return;\n      }\n\n      handleUndoRedo(event, undo, redo);\n\n      if (DELETE_KEYS.includes(event.key)) {\n        event.preventDefault();\n        handleNodeDeletion(selectedNode, reactFlowInstance, setSelectedNode);\n      }\n    },\n    [selectedNode, setSelectedNode, undo, redo, reactFlowInstance],\n  );\n\n  const handleKeyUp = useCallback((event) => {\n    if (event.ctrlKey || event.metaKey) {\n      const key = event.key.toLowerCase();\n      if (key === 'z' || key === 'y') {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation?.();\n      }\n    }\n  }, []);\n\n  const handleContextMenu = useCallback(\n    (event) => {\n      event.preventDefault();\n      const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n      setContextMenu({\n        x: event.clientX,\n        y: event.clientY,\n        flowPosition: position,\n      });\n    },\n    [reactFlowInstance],\n  );\n\n  const closeContextMenu = useCallback(() => {\n    setContextMenu(undefined);\n  }, []);\n\n  const handlePaneClick = useCallback(() => {\n    try {\n      if (typeof setSelectedNode === 'function') {\n        setSelectedNode(undefined);\n      } else {\n        const flowStore = useFlowStore.getState();\n        if (flowStore && typeof flowStore.setSelectedNode === 'function') {\n          flowStore.setSelectedNode(undefined);\n        }\n      }\n    } catch {\n      /* Silently fail */\n    }\n    closeContextMenu();\n  }, [setSelectedNode, closeContextMenu]);\n\n  const handleNodeClick = useCallback(\n    (event, node) => {\n      if (!node) return;\n      event.stopPropagation();\n      try {\n        if (typeof setSelectedNode === 'function') {\n          setSelectedNode(node);\n        } else {\n          const flowStore = useFlowStore.getState();\n          if (flowStore && typeof flowStore.setSelectedNode === 'function') {\n            flowStore.setSelectedNode(node);\n          }\n        }\n      } catch {\n        /* Silently fail */\n      }\n      closeContextMenu();\n    },\n    [setSelectedNode, closeContextMenu],\n  );\n\n  useEffect(() => {\n    const options = { capture: true };\n    globalThis.addEventListener('keydown', handleKeyDown, options);\n    document.addEventListener('keydown', handleKeyDown, options);\n    globalThis.addEventListener('keyup', handleKeyUp, options);\n    document.addEventListener('keyup', handleKeyUp, options);\n    return () => {\n      globalThis.removeEventListener('keydown', handleKeyDown, options);\n      document.removeEventListener('keydown', handleKeyDown, options);\n      globalThis.removeEventListener('keyup', handleKeyUp, options);\n      document.removeEventListener('keyup', handleKeyUp, options);\n    };\n  }, [handleKeyDown, handleKeyUp]);\n\n  return {\n    contextMenu,\n    handleContextMenu,\n    closeContextMenu,\n    handlePaneClick,\n    handleNodeClick,\n  };\n};\n\nexport default useFlowInteractions;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowNodes.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (124). Maximum allowed is 80.",
        "line": 13,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 182,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { applyNodeChanges } from 'reactflow';\n\nimport { generateNodeId } from '../utils/flowEditorUtilities';\n\n/**\n * Hook personalizado para la gestión de nodos en el editor de flujos\n * @param {Array} initialNodes - Nodos iniciales\n * @param {Function} setNodes - Función para actualizar nodos en el componente padre\n * @param {Function} addToHistory - Función para añadir cambios al historial\n * @returns {Object} - Métodos y estado para gestionar nodos\n */\nconst useFlowNodes = (initialNodes, setNodes, addToHistory) => {\n  // Estado interno para nodos\n  const [internalNodes, setInternalNodes] = useState(initialNodes || []);\n\n  // Map para acceso rápido a nodos por ID\n  const nodesMapReference = useRef(new Map());\n\n  // Inicializar el mapa de nodos\n  useEffect(() => {\n    const nodesMap = new Map();\n    for (const node of initialNodes) {\n      nodesMap.set(node.id, node);\n    }\n    nodesMapReference.current = nodesMap;\n    setInternalNodes(initialNodes);\n  }, [initialNodes]);\n\n  /**\n   * Maneja cambios en los nodos (arrastrar, seleccionar, etc)\n   */\n  const onNodesChange = useCallback(\n    (changes) => {\n      // Aplicar cambios a los nodos internos\n      setInternalNodes((nodes) => {\n        const newNodes = applyNodeChanges(changes, nodes);\n\n        // Actualizar el mapa de nodos\n        const nodesMap = nodesMapReference.current;\n        for (const change of changes) {\n          if (change.type === 'remove') {\n            nodesMap.delete(change.id);\n          } else {\n            const updatedNode = newNodes.find((n) => n.id === change.id);\n            if (updatedNode) {\n              nodesMap.set(change.id, updatedNode);\n            }\n          }\n        }\n\n        // Propagar cambios al componente padre\n        setTimeout(() => setNodes(newNodes), 0);\n\n        // Registrar cambios en el historial si es necesario\n        const positionChanges = changes.filter(\n          (change) => change.type === 'position' && change.dragging === false,\n        );\n\n        if (positionChanges.length > 0) {\n          const movedNodes = positionChanges\n            .map((change) => {\n              const node = nodesMap.get(change.id);\n              // Verificar que el nodo y su posición existan\n              if (node && node.position) {\n                return { id: change.id, position: { ...node.position } };\n              }\n              // o null, pero undefined es más idiomático aquí y se filtrará igual\n            })\n            .filter(Boolean); // Filtrar nodos nulos\n\n          // Solo agregar al historial si hay nodos válidos\n          if (movedNodes.length > 0) {\n            addToHistory({\n              type: 'move',\n              nodes: movedNodes,\n            });\n          }\n        }\n\n        return newNodes;\n      });\n    },\n    [setNodes, addToHistory],\n  );\n\n  /**\n   * Añade un nuevo nodo al flujo\n   */\n  const addNode = useCallback(\n    (nodeType, position, data = {}) => {\n      // Generar un ID único para el nodo\n      const nodeId = generateNodeId(nodeType);\n\n      // Crear el nuevo nodo con el ID original preservado\n      const newNode = {\n        id: nodeId,\n        type: nodeType,\n        position,\n        data: { ...data },\n        // Guardar el ID original para evitar problemas al guardar/cargar\n        originalId: nodeId,\n      };\n\n      setInternalNodes((nodes) => {\n        const newNodes = [...nodes, newNode];\n        nodesMapReference.current.set(newNode.id, newNode);\n        setTimeout(() => setNodes(newNodes), 0);\n        return newNodes;\n      });\n\n      addToHistory({\n        type: 'add',\n        nodes: [newNode],\n      });\n\n      return newNode;\n    },\n    [setNodes, addToHistory],\n  );\n\n  /**\n   * Elimina un nodo del flujo\n   */\n  const removeNode = useCallback(\n    (nodeId) => {\n      setInternalNodes((nodes) => {\n        const nodeToRemove = nodes.find((n) => n.id === nodeId);\n        if (!nodeToRemove) return nodes;\n\n        const newNodes = nodes.filter((n) => n.id !== nodeId);\n        nodesMapReference.current.delete(nodeId);\n        setTimeout(() => setNodes(newNodes), 0);\n\n        addToHistory({\n          type: 'remove',\n          nodes: [nodeToRemove],\n        });\n\n        return newNodes;\n      });\n    },\n    [setNodes, addToHistory],\n  );\n\n  /**\n   * Actualiza los datos de un nodo\n   */\n  const updateNodeData = useCallback(\n    (nodeId, newData) => {\n      setInternalNodes((nodes) => {\n        const newNodes = nodes.map((node) => {\n          if (node.id === nodeId) {\n            const updatedNode = {\n              ...node,\n              data: {\n                ...node.data,\n                ...newData,\n              },\n            };\n            nodesMapReference.current.set(nodeId, updatedNode);\n            return updatedNode;\n          }\n          return node;\n        });\n\n        setTimeout(() => setNodes(newNodes), 0);\n        return newNodes;\n      });\n    },\n    [setNodes],\n  );\n\n  return {\n    nodes: internalNodes,\n    nodesMap: nodesMapReference.current,\n    onNodesChange,\n    addNode,\n    removeNode,\n    updateNodeData,\n  };\n};\n\nexport default useFlowNodes;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useFlowSaver.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (88). Maximum allowed is 80.",
        "line": 10,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 110,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback, useState, useEffect } from 'react';\n\nimport useDebounce from '@/hooks/useDebounce';\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport { prepareEdgesForSaving } from '../utils/edgeFixUtility';\n\nimport useLocalBackupManager from './useLocalBackupManager';\n\nexport const useFlowSaver = (plubotId, handleError, setHasChanges) => {\n  const { nodes, edges, saveFlow, setNodes, setEdges, lastSaved, isLoaded } =\n    useFlowStore((state) => ({\n      nodes: state.nodes,\n      edges: state.edges,\n      saveFlow: state.saveFlow,\n      setNodes: state.setNodes,\n      setEdges: state.setEdges,\n      lastSaved: state.lastSaved,\n      isLoaded: state.isLoaded,\n    }));\n\n  const { createBackup, recoverFromBackup, hasLocalBackup } =\n    useLocalBackupManager(plubotId);\n\n  const [status, setStatus] = useState('idle'); // idle, saving, success, error\n  const [message, setMessage] = useState('');\n  const [show, setShow] = useState(false);\n  const [isBackupLoaded, setBackupLoaded] = useState(false);\n\n  useEffect(() => {\n    if (status === 'success' || status === 'error') {\n      const timer = setTimeout(() => {\n        setShow(false);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [status]);\n\n  const attemptBackupRecovery = useCallback(() => {\n    if (isBackupLoaded) return;\n\n    const backup = recoverFromBackup();\n    if (backup && backup.nodes && backup.edges) {\n      setNodes(backup.nodes);\n      setEdges(backup.edges);\n      setBackupLoaded(true);\n    }\n  }, [isBackupLoaded, recoverFromBackup, setNodes, setEdges]);\n\n  const handleSaveError = useCallback(\n    (error, preparedEdges) => {\n      const errorMessage =\n        (error instanceof Error ? error.message : error?.message) ||\n        'Error desconocido al guardar';\n      setStatus('error');\n      setMessage(errorMessage);\n      setShow(true);\n      createBackup(nodes, preparedEdges || edges);\n      if (error instanceof Error && handleError) {\n        handleError(error);\n      }\n    },\n    [nodes, edges, createBackup, handleError],\n  );\n\n  const handleSaveSuccess = useCallback(() => {\n    if (setHasChanges) {\n      setHasChanges(false);\n    }\n    setStatus('success');\n    setMessage('Cambios guardados correctamente');\n    setShow(true);\n  }, [setHasChanges]);\n\n  const saveFlowHandler = useCallback(async () => {\n    if (!plubotId || status === 'saving') return;\n\n    setStatus('saving');\n    setMessage('Guardando cambios...');\n    setShow(true);\n\n    const preparedEdges = prepareEdgesForSaving(edges);\n\n    try {\n      const saveData = await saveFlow();\n      if (saveData && saveData.success) {\n        handleSaveSuccess();\n      } else {\n        handleSaveError(saveData, preparedEdges);\n      }\n    } catch (error) {\n      handleSaveError(error, preparedEdges);\n    }\n  }, [plubotId, status, edges, saveFlow, handleSaveSuccess, handleSaveError]);\n\n  const debouncedSave = useDebounce(saveFlowHandler, 1000);\n\n  return {\n    saveFlowHandler,\n    debouncedSave, // <-- Exportar la función con debounce\n    lastSaved,\n    saveStatus: status,\n    showSaveStatus: show,\n    saveMessage: message,\n    attemptBackupRecovery,\n    isBackupLoaded,\n    isLoaded,\n    hasLocalBackup,\n  };\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useLocalBackupManager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useModalManagement.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (165). Maximum allowed is 80.",
        "line": 16,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 214,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useModalManagement.js\n * Hook personalizado para gestionar la apertura y cierre de modales\n * en el editor de flujos, unificando los diferentes métodos de manejo\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { openModal, closeModal } from '../../utils/modal-manager';\n\n/**\n * Hook para gestionar el estado de los modales con soporte para los sistemas\n * antiguos y el nuevo sistema de modales\n * @returns {Object} Funciones y estados para manejar modales\n */\nconst useModalManagement = () => {\n  // Estado local para compatibilidad con código existente\n  const [showTemplateSelector, setShowTemplateSelector] = useState(false);\n  const [showEmbedModal, setShowEmbedModal] = useState(false);\n  const [showImportExportModal, setShowImportExportModal] = useState(false);\n  const [showSimulation, setShowSimulation] = useState(false);\n  const [showSyncModal, setShowSyncModal] = useState(false);\n\n  // Funciones para abrir modales (combinan el sistema local y global)\n  const openTemplateSelector = useCallback(() => {\n    setShowTemplateSelector(true);\n    openModal('templateSelector');\n  }, []);\n\n  const openEmbedModal = useCallback(() => {\n    setShowEmbedModal(true);\n    openModal('embedModal');\n  }, []);\n\n  const openImportExportModal = useCallback(() => {\n    setShowImportExportModal(true);\n    openModal('importExportModal');\n  }, []);\n\n  const openSimulation = useCallback(() => {\n    setShowSimulation(true);\n    openModal('simulationModal');\n  }, []);\n\n  const openSyncModal = useCallback(() => {\n    setShowSyncModal(true);\n    openModal('syncModal');\n  }, []);\n\n  // Funciones para cerrar modales (combinan el sistema local y global)\n  const closeTemplateSelector = useCallback(() => {\n    setShowTemplateSelector(false);\n    closeModal('templateSelector');\n  }, []);\n\n  const closeEmbedModal = useCallback(() => {\n    setShowEmbedModal(false);\n    closeModal('embedModal');\n  }, []);\n\n  const closeImportExportModal = useCallback(() => {\n    setShowImportExportModal(false);\n    closeModal('importExportModal');\n  }, []);\n\n  const closeSimulation = useCallback(() => {\n    setShowSimulation(false);\n    closeModal('simulationModal');\n  }, []);\n\n  const closeSyncModal = useCallback(() => {\n    setShowSyncModal(false);\n    closeModal('syncModal');\n  }, []);\n\n  // Función genérica para abrir cualquier modal\n  const openModalByName = useCallback(\n    (modalName) => {\n      switch (modalName) {\n        case 'templateSelector': {\n          openTemplateSelector();\n          break;\n        }\n        case 'embedModal': {\n          openEmbedModal();\n          break;\n        }\n        case 'importExportModal': {\n          openImportExportModal();\n          break;\n        }\n        case 'simulationModal': {\n          openSimulation();\n          break;\n        }\n        case 'syncModal': {\n          openSyncModal();\n          break;\n        }\n        default: {\n          openModal(modalName); // Intentar usar el sistema global de todas formas\n        }\n      }\n    },\n    [\n      openTemplateSelector,\n      openEmbedModal,\n      openImportExportModal,\n      openSimulation,\n      openSyncModal,\n    ],\n  );\n\n  // Función genérica para cerrar cualquier modal\n  const closeModalByName = useCallback(\n    (modalName) => {\n      switch (modalName) {\n        case 'templateSelector': {\n          closeTemplateSelector();\n          break;\n        }\n        case 'embedModal': {\n          closeEmbedModal();\n          break;\n        }\n        case 'importExportModal': {\n          closeImportExportModal();\n          break;\n        }\n        case 'simulationModal': {\n          closeSimulation();\n          break;\n        }\n        case 'syncModal': {\n          closeSyncModal();\n          break;\n        }\n        default: {\n          closeModal(modalName); // Intentar usar el sistema global de todas formas\n        }\n      }\n    },\n    [\n      closeTemplateSelector,\n      closeEmbedModal,\n      closeImportExportModal,\n      closeSimulation,\n      closeSyncModal,\n    ],\n  );\n\n  // Escuchar eventos globales para mantener sincronizados los estados locales\n  useEffect(() => {\n    // Registrar listener para eventos de apertura de modales\n    const handleGlobalOpenModal = (event) => {\n      const { modal } = event.detail;\n      openModalByName(modal);\n    };\n\n    // Registrar listener para eventos de cierre de modales\n    const handleGlobalCloseModal = (event) => {\n      const { modal } = event.detail;\n      closeModalByName(modal);\n    };\n\n    // Suscribirse a eventos\n    globalThis.addEventListener('plubot-open-modal', handleGlobalOpenModal);\n    globalThis.addEventListener('plubot-close-modal', handleGlobalCloseModal);\n\n    // Limpiar al desmontar\n    return () => {\n      globalThis.removeEventListener(\n        'plubot-open-modal',\n        handleGlobalOpenModal,\n      );\n      globalThis.removeEventListener(\n        'plubot-close-modal',\n        handleGlobalCloseModal,\n      );\n    };\n  }, [openModalByName, closeModalByName]);\n\n  return {\n    // Estados\n    showTemplateSelector,\n    showEmbedModal,\n    showImportExportModal,\n    showSimulation,\n    showSyncModal,\n\n    // Setters para compatibilidad\n    setShowTemplateSelector,\n    setShowEmbedModal,\n    setShowImportExportModal,\n    setShowSimulation,\n    setShowSyncModal,\n\n    // Funciones específicas\n    openTemplateSelector,\n    openEmbedModal,\n    openImportExportModal,\n    openSimulation,\n    openSyncModal,\n    closeTemplateSelector,\n    closeEmbedModal,\n    closeImportExportModal,\n    closeSimulation,\n    closeSyncModal,\n\n    // Funciones genéricas\n    openModal: openModalByName,\n    closeModal: closeModalByName,\n  };\n};\n\nexport default useModalManagement;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useModalManager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useNodeStyles.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useNodeVirtualization.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 60,
        "column": 41,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 85,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useRef, useMemo } from 'react';\n\nimport { nodeEstimatedDimensions } from '@/flow/nodeDimensions';\n\nconst OVERSCAN_PX = 400; // Aumentar el área de overscan para una experiencia más fluida\n\n/**\n * Hook de virtualización de nodos de alto rendimiento.\n * Calcula qué nodos y aristas son visibles dentro del viewport actual,\n * utilizando dimensiones estimadas para evitar el renderizado inicial masivo.\n *\n * @param {Array} allNodes - La lista COMPLETA de nodos del flujo.\n * @param {Array} allEdges - La lista COMPLETA de aristas del flujo.\n * @param {Object} viewport - El objeto viewport de React Flow (x, y, zoom).\n * @param {Object} containerSize - El tamaño del contenedor del canvas ({ width, height }).\n * @returns {{ visibleNodes: Array, visibleEdges: Array }} - Los nodos y aristas filtrados que deben renderizarse.\n */\nconst useNodeVirtualization = ({\n  nodes: allNodes,\n  edges: allEdges,\n  viewport,\n  containerDimensions: containerSize,\n}) => {\n  const [throttledViewport, setThrottledViewport] = useState(viewport);\n  const throttleTimeout = useRef(undefined);\n\n  useEffect(() => {\n    if (throttleTimeout.current) {\n      clearTimeout(throttleTimeout.current);\n    }\n\n    throttleTimeout.current = setTimeout(() => {\n      setThrottledViewport(viewport);\n      throttleTimeout.current = undefined;\n    }, 50); // 50ms throttle delay\n\n    return () => {\n      if (throttleTimeout.current) {\n        clearTimeout(throttleTimeout.current);\n      }\n    };\n  }, [viewport]);\n\n  const { x, y, zoom } = throttledViewport; // Use the throttled viewport\n  const { width: containerWidth, height: containerHeight } = containerSize;\n\n  return useMemo(() => {\n    if (!containerWidth || !containerHeight || zoom === 0) {\n      return { visibleNodes: [], visibleEdges: [] };\n    }\n\n    const viewBounds = {\n      left: -x / zoom - OVERSCAN_PX / zoom,\n      right: (-x + containerWidth) / zoom + OVERSCAN_PX / zoom,\n      top: -y / zoom - OVERSCAN_PX / zoom,\n      bottom: (-y + containerHeight) / zoom + OVERSCAN_PX / zoom,\n    };\n\n    // 1. Find all nodes that are currently within the viewport bounds.\n    const nodesInView = allNodes.filter((node) => {\n      if (!node.position) return false;\n\n      const nodeWidth =\n        node.width ||\n        nodeEstimatedDimensions[node.type]?.width ||\n        nodeEstimatedDimensions.default.width;\n      const nodeHeight =\n        node.height ||\n        nodeEstimatedDimensions[node.type]?.height ||\n        nodeEstimatedDimensions.default.height;\n\n      const nodeBounds = {\n        left: node.position.x,\n        right: node.position.x + nodeWidth,\n        top: node.position.y,\n        bottom: node.position.y + nodeHeight,\n      };\n\n      return (\n        nodeBounds.left < viewBounds.right &&\n        nodeBounds.right > viewBounds.left &&\n        nodeBounds.top < viewBounds.bottom &&\n        nodeBounds.bottom > viewBounds.top\n      );\n    });\n\n    const nodesInViewIds = new Set(nodesInView.map((n) => n.id));\n\n    // 2. Find all edges that are connected to at least one of the visible nodes.\n    const edgesToRender = allEdges.filter(\n      (edge) =>\n        nodesInViewIds.has(edge.source) || nodesInViewIds.has(edge.target),\n    );\n\n    // 3. Create a set of all nodes that need to be rendered.\n    // This includes the nodes in view and all nodes connected by the edges we just found.\n    // This guarantees that if an edge is rendered, both its source and target nodes are also rendered.\n    const requiredNodeIds = new Set(nodesInViewIds);\n    for (const edge of edgesToRender) {\n      requiredNodeIds.add(edge.source);\n      requiredNodeIds.add(edge.target);\n    }\n\n    const nodesToRender = allNodes.filter((node) =>\n      requiredNodeIds.has(node.id),\n    );\n\n    return { visibleNodes: nodesToRender, visibleEdges: edgesToRender };\n  }, [allNodes, allEdges, x, y, zoom, containerWidth, containerHeight]);\n};\n\nexport default useNodeVirtualization;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useOptimizedLayout.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/hooks/useVisualState.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (107). Maximum allowed is 80.",
        "line": 14,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 208,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useVisualState.js\n * Hook personalizado para separar el estado visual del estado lógico en el editor de flujos\n * Esto mejora el rendimiento al evitar re-renders innecesarios cuando solo cambian aspectos visuales\n */\n\nimport { useState, useCallback, useRef } from 'react';\n\n/**\n * Hook para gestionar el estado visual de los nodos y aristas\n * @param {Object} options - Opciones de configuración\n * @returns {Object} - Métodos y estado para gestionar el estado visual\n */\nconst useVisualState = (_options = {}) => {\n  // Estado para posiciones visuales (no afecta al estado lógico)\n  const [visualPositions, setVisualPositions] = useState({});\n\n  // Referencia para almacenar estilos visuales temporales (hover, selección, etc.)\n  const visualStylesReference = useRef(new Map());\n\n  // Referencia para almacenar el estado de animación\n  const animationStateReference = useRef(new Map());\n\n  /**\n   * Actualiza la posición visual de un nodo sin afectar su estado lógico\n   * @param {string} nodeId - ID del nodo\n   * @param {Object} position - Nueva posición {x, y}\n   */\n  const updateVisualPosition = useCallback((nodeId, position) => {\n    setVisualPositions((previous) => ({\n      ...previous,\n      [nodeId]: position,\n    }));\n  }, []);\n\n  /**\n   * Actualiza el estilo visual de un nodo o arista\n   * @param {string} elementId - ID del elemento (nodo o arista)\n   * @param {string} styleType - Tipo de estilo (hover, selected, etc.)\n   * @param {boolean} value - Valor del estilo\n   */\n  const updateVisualStyle = useCallback((elementId, styleType, value) => {\n    const currentStyles = visualStylesReference.current.get(elementId) || {};\n    visualStylesReference.current.set(elementId, {\n      ...currentStyles,\n      [styleType]: value,\n    });\n  }, []);\n\n  /**\n   * Obtiene el estilo visual actual de un elemento\n   * @param {string} elementId - ID del elemento\n   * @returns {Object} - Estilos visuales del elemento\n   */\n  const getVisualStyle = useCallback((elementId) => {\n    return visualStylesReference.current.get(elementId) || {};\n  }, []);\n\n  /**\n   * Actualiza el estado de animación de un elemento\n   * @param {string} elementId - ID del elemento\n   * @param {string} animationType - Tipo de animación\n   * @param {boolean} isActive - Si la animación está activa\n   */\n  const updateAnimationState = useCallback(\n    (elementId, animationType, isActive) => {\n      const currentState = animationStateReference.current.get(elementId) || {};\n      animationStateReference.current.set(elementId, {\n        ...currentState,\n        [animationType]: isActive,\n      });\n    },\n    [],\n  );\n\n  /**\n   * Obtiene el estado de animación de un elemento\n   * @param {string} elementId - ID del elemento\n   * @returns {Object} - Estado de animación del elemento\n   */\n  const getAnimationState = useCallback((elementId) => {\n    return animationStateReference.current.get(elementId) || {};\n  }, []);\n\n  /**\n   * Aplica estilos visuales a un nodo basado en su estado visual\n   * @param {Object} node - Nodo a procesar\n   * @returns {Object} - Nodo con estilos visuales aplicados\n   */\n  const applyVisualStyles = useCallback(\n    (node) => {\n      if (!node) return node;\n\n      const visualStyle = getVisualStyle(node.id);\n      const animationState = getAnimationState(node.id);\n      const visualPosition = visualPositions[node.id];\n\n      // Crear una copia del nodo para no modificar el original\n      const styledNode = { ...node };\n\n      // Aplicar posición visual si existe\n      if (visualPosition) {\n        styledNode.position = visualPosition;\n      }\n\n      // Aplicar estilos visuales\n      if (visualStyle) {\n        styledNode.style = {\n          ...styledNode.style,\n          // Aplicar estilos según el estado visual\n          ...(visualStyle.hover\n            ? { boxShadow: '0 0 10px rgba(255, 0, 255, 0.7)' }\n            : {}),\n          ...(visualStyle.selected\n            ? { borderColor: '#ff00ff', borderWidth: 2 }\n            : {}),\n        };\n      }\n\n      // Aplicar estados de animación\n      if (animationState && Object.keys(animationState).length > 0) {\n        styledNode.animated = Object.values(animationState).some(Boolean);\n      }\n\n      return styledNode;\n    },\n    [visualPositions, getVisualStyle, getAnimationState],\n  );\n\n  /**\n   * Aplica estilos visuales a una arista basado en su estado visual\n   * @param {Object} edge - Arista a procesar\n   * @returns {Object} - Arista con estilos visuales aplicados\n   */\n  const applyEdgeVisualStyles = useCallback(\n    (edge) => {\n      if (!edge) return edge;\n\n      const visualStyle = getVisualStyle(edge.id);\n      const animationState = getAnimationState(edge.id);\n\n      // Crear una copia de la arista para no modificar la original\n      const styledEdge = { ...edge };\n\n      // Aplicar estilos visuales\n      if (visualStyle) {\n        styledEdge.style = {\n          ...styledEdge.style,\n          // Aplicar estilos según el estado visual\n          ...(visualStyle.hover ? { strokeWidth: 3 } : {}),\n          ...(visualStyle.selected ? { stroke: '#ff00ff' } : {}),\n        };\n      }\n\n      // Aplicar estados de animación\n      if (animationState && Object.keys(animationState).length > 0) {\n        styledEdge.animated = Object.values(animationState).some(Boolean);\n      }\n\n      return styledEdge;\n    },\n    [getVisualStyle, getAnimationState],\n  );\n\n  /**\n   * Procesa todos los nodos para aplicar estilos visuales\n   * @param {Array} nodes - Nodos a procesar\n   * @returns {Array} - Nodos con estilos visuales aplicados\n   */\n  const processNodesWithVisualStyles = useCallback(\n    (nodes) => {\n      if (!Array.isArray(nodes)) return nodes;\n      return nodes.map((node) => applyVisualStyles(node));\n    },\n    [applyVisualStyles],\n  );\n\n  /**\n   * Procesa todas las aristas para aplicar estilos visuales\n   * @param {Array} edges - Aristas a procesar\n   * @returns {Array} - Aristas con estilos visuales aplicados\n   */\n  const processEdgesWithVisualStyles = useCallback(\n    (edges) => {\n      if (!Array.isArray(edges)) return edges;\n      return edges.map((edge) => applyEdgeVisualStyles(edge));\n    },\n    [applyEdgeVisualStyles],\n  );\n\n  // Exportar métodos y estado\n  return {\n    // Métodos para actualizar el estado visual\n    updateVisualPosition,\n    updateVisualStyle,\n    updateAnimationState,\n\n    // Métodos para obtener el estado visual\n    getVisualStyle,\n    getAnimationState,\n\n    // Métodos para procesar elementos con estilos visuales\n    applyVisualStyles,\n    applyEdgeVisualStyles,\n    processNodesWithVisualStyles,\n    processEdgesWithVisualStyles,\n  };\n};\n\nexport default useVisualState;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/initializer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/lod/GenericCompactNode.jsx",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 26,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 26,
        "endColumn": 37
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 26,
        "column": 42,
        "nodeType": "MemberExpression",
        "endLine": 26,
        "endColumn": 66
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file GenericCompactNode.jsx\n * @description Componente genérico para el nivel de detalle COMPACTO (LOD 1).\n *              Renderiza un ícono y una etiqueta/título, optimizado para rendimiento intermedio.\n * @author PLUBOT Team\n * @version 1.0.0\n */\n\nimport PropTypes from 'prop-types';\nimport { memo } from 'react';\nimport { Handle, Position } from 'reactflow';\n\nimport GenericNodeIcon from './GenericNodeIcon';\nimport './lodStyles.css';\n\nconst arePropertiesEqual = (previousProperties, nextProperties) => {\n  // Comparación superficial (shallow) del objeto 'data'.\n  // Esto es crucial porque el hook de virtualización crea nuevos objetos 'data'\n  // en cada render, pero su contenido a menudo no cambia. La comparación de referencia (===) fallaría.\n  const previousDataKeys = Object.keys(previousProperties.data);\n  if (previousDataKeys.length !== Object.keys(nextProperties.data).length) {\n    return false;\n  }\n\n  for (const key of previousDataKeys) {\n    if (previousProperties.data[key] !== nextProperties.data[key]) {\n      return false;\n    }\n  }\n\n  // Solo re-renderizar si 'data' o 'selected' cambian.\n  return previousProperties.selected === nextProperties.selected;\n};\n\nconst GenericCompactNodeComponent = ({ data, selected }) => {\n  const { nodeType, label, title } = data;\n\n  const displayLabel = title || label || nodeType; // Usa título, luego etiqueta, o el tipo de nodo como fallback\n  const truncatedLabel =\n    displayLabel.length > 20 ? `${displayLabel.slice(0, 20)}...` : displayLabel;\n\n  const nodeClasses = [\n    'lod-node',\n    'lod-node--compact',\n    selected ? 'lod-node--selected' : '',\n    `lod-node--${nodeType}`,\n  ].join(' ');\n\n  return (\n    <div className={nodeClasses}>\n      <Handle\n        type='target'\n        position={Position.Top}\n        className='lod-node__handle'\n      />\n\n      <div className='compact-header'>\n        <GenericNodeIcon nodeType={nodeType} size={16} />\n        <h3 className='compact-title'>\n          {nodeType.charAt(0).toUpperCase() + nodeType.slice(1)}\n        </h3>\n      </div>\n      <div className='compact-label'>{truncatedLabel}</div>\n\n      <Handle\n        type='source'\n        position={Position.Bottom}\n        className='lod-node__handle'\n      />\n    </div>\n  );\n};\n\nGenericCompactNodeComponent.propTypes = {\n  data: PropTypes.shape({\n    nodeType: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool,\n};\n\nconst GenericCompactNode = memo(\n  GenericCompactNodeComponent,\n  arePropertiesEqual,\n);\n\nGenericCompactNode.displayName = 'GenericCompactNode';\n\nGenericCompactNode.propTypes = GenericCompactNodeComponent.propTypes;\n\nexport default GenericCompactNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/lod/GenericMiniNode.jsx",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 26,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 26,
        "endColumn": 37
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 26,
        "column": 42,
        "nodeType": "MemberExpression",
        "endLine": 26,
        "endColumn": 66
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file GenericMiniNode.jsx\n * @description Componente genérico para el nivel de detalle MÍNIMO (LOD 2).\n *              Renderiza un ícono basado en el tipo de nodo, optimizado para máximo rendimiento.\n * @author PLUBOT Team\n * @version 1.0.0\n */\n\nimport PropTypes from 'prop-types';\nimport { memo } from 'react';\nimport { Handle, Position } from 'reactflow';\n\nimport GenericNodeIcon from './GenericNodeIcon';\nimport './lodStyles.css'; // Usaremos un CSS dedicado para los estilos LOD\n\nconst arePropertiesEqual = (previousProperties, nextProperties) => {\n  // Comparación superficial (shallow) del objeto 'data'.\n  // Esto es crucial porque el hook de virtualización crea nuevos objetos 'data'\n  // en cada render, pero su contenido a menudo no cambia. La comparación de referencia (===) fallaría.\n  const previousDataKeys = Object.keys(previousProperties.data);\n  if (previousDataKeys.length !== Object.keys(nextProperties.data).length) {\n    return false;\n  }\n\n  for (const key of previousDataKeys) {\n    if (previousProperties.data[key] !== nextProperties.data[key]) {\n      return false;\n    }\n  }\n\n  // Solo re-renderizar si 'data' o 'selected' cambian. Se ignoran cambios de posición\n  // (xPos, yPos) y de arrastre (dragging), ya que son manejados por el transform de React Flow\n  // y no afectan la apariencia interna del MiniNode.\n  return previousProperties.selected === nextProperties.selected;\n};\n\nconst GenericMiniNode = memo(({ data, selected }) => {\n  const { nodeType } = data;\n\n  const nodeClasses = [\n    'lod-node',\n    'lod-node--mini',\n    selected ? 'lod-node--selected' : '',\n    `lod-node--${nodeType}`, // Clase específica para el tipo de nodo\n  ].join(' ');\n\n  return (\n    <div className={nodeClasses}>\n      <Handle\n        type='target'\n        position={Position.Top}\n        className='lod-node__handle'\n      />\n      <GenericNodeIcon nodeType={nodeType} size={20} />\n      <Handle\n        type='source'\n        position={Position.Bottom}\n        className='lod-node__handle'\n      />\n    </div>\n  );\n}, arePropertiesEqual);\n\nGenericMiniNode.displayName = 'GenericMiniNode';\n\nGenericMiniNode.propTypes = {\n  data: PropTypes.shape({\n    nodeType: PropTypes.string.isRequired,\n  }).isRequired,\n  selected: PropTypes.bool,\n};\n\nexport default GenericMiniNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/lod/GenericNodeIcon.jsx",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 46,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 46,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file GenericNodeIcon.jsx\n * @description Componente de ícono genérico para todos los tipos de nodos del flow.\n *              Utiliza un mapeo para seleccionar un ícono de `lucide-react` basado en el tipo de nodo.\n * @author PLUBOT Team\n * @version 1.0.0\n */\n\nimport {\n  Play, // StartNode\n  StopCircle, // EndNode\n  MessageSquare, // MessageNode (default)\n  GitMerge, // DecisionNode\n  Zap, // ActionNode\n  ListTree, // OptionNode\n  Server, // HttpRequestNode\n  Cpu, // PowerNode\n  MessageCircle, // DiscordNode\n  BrainCircuit, // AiNode\n  Smile, // EmotionDetectionNode\n  Puzzle, // Default\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport { memo } from 'react';\n\nconst iconMap = {\n  start: Play,\n  end: StopCircle,\n  message: MessageSquare,\n  decision: GitMerge,\n  action: Zap,\n  option: ListTree,\n  httpRequest: Server,\n  power: Cpu,\n  discord: MessageCircle,\n  ai: BrainCircuit,\n  emotionDetection: Smile,\n};\n\nconst GenericNodeIcon = memo(\n  ({ nodeType, size = 16, strokeWidth = 2, className = '' }) => {\n    const IconComponent = Object.prototype.hasOwnProperty.call(\n      iconMap,\n      nodeType,\n    )\n      ? iconMap[nodeType]\n      : Puzzle;\n\n    const iconProperties = {\n      size,\n      strokeWidth,\n      className,\n      'aria-hidden': 'true',\n    };\n\n    return <IconComponent {...iconProperties} />;\n  },\n);\n\nGenericNodeIcon.displayName = 'GenericNodeIcon';\n\nGenericNodeIcon.propTypes = {\n  nodeType: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  className: PropTypes.string,\n};\n\nexport default GenericNodeIcon;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/lod/GlobalLODNode.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/reset-node-types.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/BackgroundScene.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (284). Maximum allowed is 80.",
        "line": 26,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 377,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (200). Maximum allowed is 80.",
        "line": 37,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 296,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 140,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 140,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 141,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 141,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 142,
        "column": 15,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 142,
        "endColumn": 28
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 143,
        "column": 17,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 143,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 144,
        "column": 17,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 144,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 145,
        "column": 20,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 145,
        "endColumn": 33
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 146,
        "column": 16,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 146,
        "endColumn": 29
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 207,
        "column": 22,
        "nodeType": "MemberExpression",
        "endLine": 207,
        "endColumn": 38
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 207,
        "column": 43,
        "nodeType": "MemberExpression",
        "endLine": 207,
        "endColumn": 60
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 208,
        "column": 22,
        "nodeType": "MemberExpression",
        "endLine": 208,
        "endColumn": 38
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 208,
        "column": 43,
        "nodeType": "MemberExpression",
        "endLine": 208,
        "endColumn": 60
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 219,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 219,
        "endColumn": 35
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 220,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 220,
        "endColumn": 35
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 221,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 221,
        "endColumn": 36
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 222,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 222,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 17,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRef, useEffect, memo } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store'; // Importar store de Zustand\n\nimport useWindowSize from '../../../../hooks/useWindowSize';\n\nimport './BackgroundScene.css';\n\nconst CONFIG = {\n  particleCount: 40, // Reducido para optimizar rendimiento\n  connectionDistance: 60, // Reducido para menos conexiones\n  mouseRadius: 100,\n  maxPixelRatio: 1, // Limitado a 1 para mejor rendimiento\n  blur: 0.6, // Aumentado para un efecto más difuso como en el espacio\n  colors: ['rgba(0, 224, 255,', 'rgba(255, 0, 255,', 'rgba(200, 100, 255,'], // Añadido tono púrpura\n  staticGradientOpacity: 0.018, // Reducido aún más para un fondo más oscuro y profundo\n  backgroundColor: 'rgba(1, 2, 6, 0.98)', // Negro azulado muy oscuro, similar al espacio profundo\n  starOpacity: 0.6, // Reducir brillo de estrellas/partículas\n};\n\n/**\n * Componente para renderizar un fondo personalizado en el editor de flujos\n * @param {Object} props - Propiedades del componente\n * @param {boolean} props.isUltraMode - Indica si el modo de ultra rendimiento está activado\n */\nconst BackgroundScene = () => {\n  const isUltraMode = useFlowStore((state) => state.isUltraMode); // Conexión directa al store\n  const { width, height } = useWindowSize();\n\n  // Referencias para los canvas y la animación\n  const canvasReference = useRef(null);\n  const staticCanvasReference = useRef(null);\n  const animationReference = useRef(null);\n  const mousePosition = useRef({ x: undefined, y: undefined });\n\n  // Efecto para el modo normal con partículas animadas\n  useEffect(() => {\n    // La animación solo se ejecuta si NO estamos en modo ultra.\n    if (isUltraMode) {\n      // Si hay una animación en curso, la cancelamos.\n      if (animationReference.current) {\n        cancelAnimationFrame(animationReference.current);\n        animationReference.current = undefined;\n      }\n      return;\n    }\n\n    // Usar la referencia global en lugar de una variable local\n    animationReference.current = undefined;\n\n    const canvas = canvasReference.current;\n    const staticCanvas = staticCanvasReference.current;\n    const context = canvas?.getContext('2d');\n    const staticContext = staticCanvas?.getContext('2d');\n\n    if (!canvas || !staticCanvas || !context || !staticContext) {\n      return;\n    }\n\n    const pixelRatio = Math.min(\n      window.devicePixelRatio || 1,\n      CONFIG.maxPixelRatio,\n    );\n\n    const drawStaticElements = () => {\n      staticContext.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n\n      const { width: canvasWidth } = staticCanvas;\n      const { height: canvasHeight } = staticCanvas;\n\n      // Aplicar un fondo más oscuro primero\n      staticContext.fillStyle = CONFIG.backgroundColor;\n      staticContext.fillRect(0, 0, canvasWidth, canvasHeight);\n\n      // Gradiente en la esquina superior izquierda (más reducido y sutil)\n      const gradient1 = staticContext.createRadialGradient(\n        canvasWidth * 0.05,\n        canvasHeight * 0.1,\n        0, // Posición más cercana a la esquina\n        canvasWidth * 0.05,\n        canvasHeight * 0.1,\n        canvasWidth * 0.2, // Radio significativamente reducido\n      );\n      gradient1.addColorStop(\n        0,\n        `rgba(0, 224, 255, ${CONFIG.staticGradientOpacity * 0.4})`,\n      );\n      gradient1.addColorStop(1, 'transparent');\n\n      // Restaurar el gradiente magenta en la parte inferior derecha\n      const gradient2 = staticContext.createRadialGradient(\n        canvasWidth * 0.9,\n        canvasHeight * 0.8,\n        0,\n        canvasWidth * 0.9,\n        canvasHeight * 0.8,\n        canvasWidth * 0.4,\n      );\n      gradient2.addColorStop(\n        0,\n        `rgba(255, 0, 255, ${CONFIG.staticGradientOpacity})`,\n      );\n      gradient2.addColorStop(1, 'transparent');\n\n      // Aplicar los gradientes con menor opacidad\n      staticContext.fillStyle = gradient1;\n      staticContext.fillRect(0, 0, canvasWidth, canvasHeight);\n      staticContext.fillStyle = gradient2;\n      staticContext.fillRect(0, 0, canvasWidth, canvasHeight);\n    };\n\n    const updateCanvasDimensions = () => {\n      if (!canvas || !staticCanvas) return;\n\n      const w = width || 0;\n      const h = height || 0;\n\n      canvas.width = w * pixelRatio;\n      canvas.height = h * pixelRatio;\n      canvas.style.width = `${w}px`;\n      canvas.style.height = `${h}px`;\n\n      staticCanvas.width = w * pixelRatio;\n      staticCanvas.height = h * pixelRatio;\n      staticCanvas.style.width = `${w}px`;\n      staticCanvas.style.height = `${h}px`;\n\n      const context_ = canvas.getContext('2d');\n      context_.scale(pixelRatio, pixelRatio);\n      staticContext.setTransform(1, 0, 0, 1, 0, 0);\n      staticContext.scale(pixelRatio, pixelRatio);\n\n      drawStaticElements();\n    };\n\n    updateCanvasDimensions();\n\n    const createParticle = () => {\n      const particle = {\n        x: (Math.random() * canvas.width) / pixelRatio,\n        y: (Math.random() * canvas.height) / pixelRatio,\n        size: Math.random() * 2 + 0.5,\n        speedX: Math.random() * 0.5 - 0.25,\n        speedY: Math.random() * 0.5 - 0.25,\n        colorBase: Math.random() > 0.5 ? CONFIG.colors[0] : CONFIG.colors[1],\n        alpha: Math.random() * 0.4 + 0.1,\n\n        update() {\n          // Influencia del cursor\n          if (mousePosition.current.x && mousePosition.current.y) {\n            const dx = particle.x - mousePosition.current.x;\n            const dy = particle.y - mousePosition.current.y;\n            const distance = Math.hypot(dx, dy);\n\n            if (distance < CONFIG.mouseRadius) {\n              const force =\n                (CONFIG.mouseRadius - distance) / CONFIG.mouseRadius;\n              particle.speedX += dx * force * 0.02;\n              particle.speedY += dy * force * 0.02;\n            }\n          }\n\n          particle.x += particle.speedX;\n          particle.y += particle.speedY;\n\n          if (particle.x < 0 || particle.x > canvas.width / pixelRatio)\n            particle.speedX *= -1;\n          if (particle.y < 0 || particle.y > canvas.height / pixelRatio)\n            particle.speedY *= -1;\n\n          particle.speedX *= 0.98;\n          particle.speedY *= 0.98;\n        },\n\n        draw() {\n          // Aplicar la opacidad de estrella del CONFIG para lograr un efecto espacial más profundo\n          const adjustedAlpha = particle.alpha * (CONFIG.starOpacity || 1);\n          context.fillStyle = `${particle.colorBase}${adjustedAlpha})`;\n          context.beginPath();\n          context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n          context.fill();\n        },\n      };\n      return particle;\n    };\n\n    const particles = Array.from(\n      { length: CONFIG.particleCount },\n      createParticle,\n    );\n\n    const drawConnections = () => {\n      // Optimización: Usar un buffer de líneas y dibujarlas todas juntas\n      const lines = [];\n      context.lineWidth = 0.4;\n\n      // Limitar el número de conexiones para mejorar el rendimiento\n      const maxConnections = 100; // Límite de conexiones a dibujar\n      let connectionCount = 0;\n\n      for (let index = 0; index < particles.length; index++) {\n        // Optimización: Solo comprobar partículas cercanas\n        // Usar un paso más grande para saltarse algunas partículas\n        for (let index_ = index + 2; index_ < particles.length; index_ += 2) {\n          if (connectionCount >= maxConnections) break;\n\n          const dx = particles[index].x - particles[index_].x;\n          const dy = particles[index].y - particles[index_].y;\n          const distanceSq = dx * dx + dy * dy;\n          const maxDistributionSq =\n            CONFIG.connectionDistance * CONFIG.connectionDistance;\n\n          if (distanceSq < maxDistributionSq) {\n            const opacity =\n              1 - Math.sqrt(distanceSq) / CONFIG.connectionDistance;\n            // Reducir la opacidad para un efecto más sutil de universo profundo\n            const universeOpacity = opacity * 0.15 * (CONFIG.starOpacity || 1);\n            lines.push({\n              x1: particles[index].x,\n              y1: particles[index].y,\n              x2: particles[index_].x,\n              y2: particles[index_].y,\n              opacity: universeOpacity,\n            });\n            connectionCount++;\n          }\n        }\n      }\n\n      // Dibujar todas las líneas de una vez\n      for (const line of lines) {\n        context.strokeStyle = `rgba(0, 224, 255, ${line.opacity})`;\n        context.beginPath();\n        context.moveTo(line.x1, line.y1);\n        context.lineTo(line.x2, line.y2);\n        context.stroke();\n      }\n    };\n\n    // Optimización para mejorar el rendimiento\n    let lastFrameTime = 0;\n    const targetFPS = 30; // Limitamos a 30 FPS para ahorrar recursos\n    const frameInterval = 1000 / targetFPS;\n\n    const animate = (timestamp) => {\n      // Limitar la tasa de frames para optimizar rendimiento\n      const elapsed = timestamp - lastFrameTime;\n\n      if (elapsed > frameInterval) {\n        lastFrameTime = timestamp - (elapsed % frameInterval);\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        for (const p of particles) p.update();\n        drawConnections();\n        for (const p of particles) p.draw();\n      }\n\n      animationReference.current = requestAnimationFrame(animate);\n    };\n\n    // Iniciar la animación\n    animationReference.current = requestAnimationFrame(animate);\n\n    let ticking = false;\n    const handleMouseMove = (event) => {\n      if (!ticking) {\n        requestAnimationFrame(() => {\n          mousePosition.current = { x: event.clientX, y: event.clientY };\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n\n    const handleTouchMove = (event) => {\n      if (event.touches && event.touches[0]) {\n        mousePosition.current = {\n          x: event.touches[0].clientX,\n          y: event.touches[0].clientY,\n        };\n      }\n    };\n\n    globalThis.addEventListener('mousemove', handleMouseMove);\n    globalThis.addEventListener('touchmove', handleTouchMove);\n\n    // Función de limpieza del efecto\n    return () => {\n      if (animationReference.current) {\n        cancelAnimationFrame(animationReference.current);\n        animationReference.current = undefined;\n      }\n      globalThis.removeEventListener('mousemove', handleMouseMove);\n      globalThis.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, [isUltraMode, width, height]); // La dependencia clave es isUltraMode\n\n  // Renderizado unificado: la estructura JSX es siempre la misma.\n  // La visibilidad de los modos se controla con estilos condicionales.\n  return (\n    <div className='ts-background-scene-container' aria-hidden='true'>\n      {/* Modo Ultra: Fondo estático artístico */}\n      <div\n        className='ultra-mode-background'\n        style={{ display: isUltraMode ? 'block' : 'none' }}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            backgroundColor: 'rgba(0, 0, 0, 0.96)',\n            zIndex: 0,\n            pointerEvents: 'none',\n          }}\n        />\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: `\n            radial-gradient(ellipse at 80% 15%, rgba(227, 23, 227, 0.12) 0%, rgba(227, 23, 227, 0.05) 20%, rgba(0, 0, 0, 0) 50%),\n            linear-gradient(to right, rgba(227, 23, 227, 0.03) 0%, rgba(0, 0, 0, 0) 15%),\n            radial-gradient(circle at 5% 95%, rgba(227, 23, 227, 0.07) 0%, rgba(0, 0, 0, 0) 25%),\n            radial-gradient(ellipse at 50% 100%, rgba(227, 23, 227, 0.04) 0%, rgba(0, 0, 0, 0) 40%),\n            radial-gradient(circle at 20% 30%, rgba(227, 23, 227, 0.08) 0%, rgba(227, 23, 227, 0) 1%),\n            radial-gradient(circle at 70% 65%, rgba(227, 23, 227, 0.06) 0%, rgba(227, 23, 227, 0) 1%),\n            radial-gradient(circle at 90% 90%, rgba(227, 23, 227, 0.07) 0%, rgba(227, 23, 227, 0) 1%),\n            radial-gradient(circle at 30% 80%, rgba(227, 23, 227, 0.05) 0%, rgba(227, 23, 227, 0) 1%),\n            radial-gradient(circle at 85% 40%, rgba(227, 23, 227, 0.06) 0%, rgba(227, 23, 227, 0) 1%)\n          `,\n            opacity: 0.9,\n            zIndex: 1,\n            pointerEvents: 'none',\n          }}\n        />\n      </div>\n\n      {/* Modo Normal: Canvases para animación de partículas */}\n      <div\n        className='normal-mode-background'\n        style={{ display: isUltraMode ? 'none' : 'block' }}\n      >\n        <canvas\n          ref={canvasReference}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 1,\n            pointerEvents: 'none',\n          }}\n        />\n        <canvas\n          ref={staticCanvasReference}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 0,\n            pointerEvents: 'none',\n            backgroundColor: CONFIG.backgroundColor,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BackgroundScene);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/ContextMenuComponent.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/CustomMiniMap.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (699). Maximum allowed is 80.",
        "line": 19,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 868,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 25. Maximum allowed is 10.",
        "line": 19,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 868,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 16. Maximum allowed is 10.",
        "line": 217,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 285,
        "endColumn": 6
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (320). Maximum allowed is 80.",
        "line": 303,
        "column": 35,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 705,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 39. Maximum allowed is 10.",
        "line": 303,
        "column": 35,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 705,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 48 to the 15 allowed.",
        "line": 303,
        "column": 38,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 303,
        "endColumn": 40
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 569,
        "column": 13,
        "nodeType": "IfStatement",
        "messageId": "tooDeeply",
        "endLine": 571,
        "endColumn": 14
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'nodeRadius' is already declared in the upper scope on line 78 column 9.",
        "line": 582,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 582,
        "endColumn": 27
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'scaleY' is already declared in the upper scope on line 353 column 13.",
        "line": 665,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 665,
        "endColumn": 23
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has missing dependencies: 'edgeColors' and 'nodeColors'. Either include them or remove the dependency array.",
        "line": 705,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 718,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [diagramBounds, isExpanded, width, height, padding, viewport, validEdges, validNodes, edgeColors, nodeColors, windowWidth, windowHeight]",
            "fix": {
              "range": [23021, 23195],
              "text": "[diagramBounds, isExpanded, width, height, padding, viewport, validEdges, validNodes, edgeColors, nodeColors, windowWidth, windowHeight]"
            }
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 752,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 755,
        "endColumn": 8
      },
      {
        "ruleId": "jsx-a11y/no-static-element-interactions",
        "severity": 2,
        "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
        "line": 752,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 755,
        "endColumn": 8
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 776,
        "column": 5,
        "nodeType": "JSXOpeningElement",
        "endLine": 780,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useRef, useEffect, useState, useCallback, useMemo } from 'react';\n\nimport { useFlowNodesEdges } from '@/stores/selectors';\n\nimport './CustomMiniMap.css';\n// Importar el sanitizador para prevenir errores con valores no finitos\nimport {\n  sanitizeViewport,\n  sanitizeBounds,\n  sanitizeNode,\n  sanitizeNumber,\n} from './minimap-sanitizer';\n\n/**\n * Componente CustomMiniMap - Minimapa optimizado para ReactFlow\n * Versión completamente revisada y optimizada para eliminar código redundante\n */\nconst CustomMiniMap = ({\n  nodes: propertyNodes,\n  edges: propertyEdges,\n  isExpanded: propertyIsExpanded,\n  toggleMiniMap,\n  viewport: propertyViewport,\n  isUltraMode: propertyIsUltraMode,\n}) => {\n  // Configuraciones del minimapa - definidas a nivel de componente\n\n  // Obtener datos del store o usar los proporcionados por props\n  // Obtener datos del store usando selectores granulares\n  const { nodes: storeNodes, edges: storeEdges } = useFlowNodesEdges();\n\n  // Preferir props sobre store (para mayor flexibilidad)\n  const nodes = useMemo(\n    () => (propertyNodes?.length ? propertyNodes : storeNodes || []),\n    [propertyNodes, storeNodes],\n  );\n  const edges = useMemo(\n    () => (propertyEdges?.length ? propertyEdges : storeEdges || []),\n    [propertyEdges, storeEdges],\n  );\n\n  // Sanitizar el viewport para evitar valores NaN o Infinity\n  const viewport = sanitizeViewport(\n    propertyViewport || { x: 0, y: 0, zoom: 1 },\n  );\n  const canvasReference = useRef();\n  const containerReference = useRef();\n  const [isDragging, setIsDragging] = useState(false);\n  const [canvasReady, setCanvasReady] = useState(false);\n  const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n  const [isExpanded, setIsExpanded] = useState(propertyIsExpanded || false);\n  const [hasError, setHasError] = useState(false);\n\n  // Efecto para actualizar el tamaño de la ventana\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n      setWindowHeight(window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Función para alternar expansión\n  const handleToggle = useCallback(() => {\n    setIsExpanded((previous) => !previous);\n    if (toggleMiniMap) toggleMiniMap();\n  }, [toggleMiniMap]);\n\n  // Configuraciones del minimapa\n  const width = isExpanded ? 180 : 45;\n  const height = isExpanded ? 180 : 45;\n  const padding = isExpanded ? 12 : 5;\n  const nodeRadius = isExpanded ? 4 : 2;\n\n  // Mapa de colores para nodos y conexiones\n  const nodeColors = {\n    start: '#4facfe',\n    end: '#ff6b6b',\n    message: '#54d7a3',\n    decision: '#feca57',\n    action: '#a55eea',\n    option: '#48dbfb',\n  };\n\n  const edgeColors = {\n    default: '#00e0ff',\n    success: '#00ff9d',\n    warning: '#ffb700',\n    danger: '#ff2e5b',\n  };\n\n  // Filtrar nodos sin posición o dimensiones válidas y sanitizar sus valores\n  const validNodes = useMemo(() => {\n    if (!nodes || !Array.isArray(nodes)) return [];\n\n    return nodes\n      .filter((node) => {\n        if (\n          !node ||\n          !node.position ||\n          !Number.isFinite(node.position.x) ||\n          !Number.isFinite(node.position.y)\n        ) {\n          return false;\n        }\n        return (\n          node &&\n          node.position &&\n          typeof node.position.x === 'number' &&\n          typeof node.position.y === 'number' &&\n          !Number.isNaN(node.position.x) &&\n          !Number.isNaN(node.position.y)\n        );\n      })\n      .map((node) => sanitizeNode(node));\n  }, [nodes]);\n\n  const validEdges = useMemo(() => {\n    if (!edges || !Array.isArray(edges)) return [];\n\n    return edges.filter((edge) => edge && edge.source && edge.target);\n  }, [edges]);\n\n  // Cálculo de límites del diagrama con centrado\n  const diagramBounds = useMemo(() => {\n    if (!validNodes || validNodes.length === 0) {\n      // Proporcionar bounds predeterminados cuando no hay nodos\n      return {\n        minX: 0,\n        maxX: 100,\n        minY: 0,\n        maxY: 100,\n        centerX: 50,\n        centerY: 50,\n      };\n    }\n\n    try {\n      const bounds = {\n        minX: Infinity,\n        maxX: -Infinity,\n        minY: Infinity,\n        maxY: -Infinity,\n      };\n\n      for (const node of validNodes) {\n        // Asegurarse de que todas las coordenadas son números finitos\n        const nodeX = sanitizeNumber(node.position.x, 0);\n        const nodeY = sanitizeNumber(node.position.y, 0);\n        const nodeWidth = sanitizeNumber(node.width, 150);\n        const nodeHeight = sanitizeNumber(node.height, 40);\n\n        bounds.minX = Math.min(bounds.minX, nodeX);\n        bounds.maxX = Math.max(bounds.maxX, nodeX + nodeWidth);\n        bounds.minY = Math.min(bounds.minY, nodeY);\n        bounds.maxY = Math.max(bounds.maxY, nodeY + nodeHeight);\n      }\n\n      // Manejar el caso donde todos los nodos están en la misma posición\n      if (bounds.minX === bounds.maxX) {\n        bounds.minX -= 50;\n        bounds.maxX += 50;\n      }\n      if (bounds.minY === bounds.maxY) {\n        bounds.minY -= 50;\n        bounds.maxY += 50;\n      }\n\n      const diagramWidth = bounds.maxX - bounds.minX;\n      const diagramHeight = bounds.maxY - bounds.minY;\n      const centerX = bounds.minX + diagramWidth / 2;\n      const centerY = bounds.minY + diagramHeight / 2;\n\n      const margin = Math.max(30, Math.min(diagramWidth, diagramHeight) * 0.1);\n      bounds.minX = centerX - (diagramWidth / 2 + margin);\n      bounds.maxX = centerX + (diagramWidth / 2 + margin);\n      bounds.minY = centerY - (diagramHeight / 2 + margin);\n      bounds.maxY = centerY + (diagramHeight / 2 + margin);\n\n      // Sanitizar los bounds para asegurar que todos los valores son números finitos\n      return sanitizeBounds({ ...bounds, centerX, centerY });\n    } catch {\n      return {\n        minX: 0,\n        maxX: 100,\n        minY: 0,\n        maxY: 100,\n        centerX: 50,\n        centerY: 50,\n      };\n    }\n  }, [validNodes]);\n\n  // Manejo de interacciones con el minimapa\n  const handleMouseDown = useCallback(\n    (event) => {\n      if (!isExpanded) return; // Solo permitir interacción cuando esté expandido\n      if (!containerReference.current) return; // Validación de seguridad\n\n      const boundingRect = containerReference.current.getBoundingClientRect();\n      const x = event.clientX - boundingRect.left;\n      const y = event.clientY - boundingRect.top;\n\n      setIsDragging(true);\n      setLastPosition({ x, y });\n      event.stopPropagation(); // Evitar que se cierre el minimapa\n    },\n    [isExpanded],\n  );\n\n  const handleMouseMove = useCallback(\n    (event) => {\n      if (!isDragging || !isExpanded || !viewport?.setViewport) return;\n      if (!containerReference.current) return; // Validación de seguridad\n\n      try {\n        const boundingRect = containerReference.current.getBoundingClientRect();\n        const x = event.clientX - boundingRect.left;\n        const y = event.clientY - boundingRect.top;\n\n        const deltaX = x - lastPosition.x;\n        const deltaY = y - lastPosition.y;\n\n        // Validar que diagramBounds tenga valores válidos\n        if (\n          !diagramBounds ||\n          typeof diagramBounds.minX !== 'number' ||\n          typeof diagramBounds.maxX !== 'number' ||\n          typeof diagramBounds.minY !== 'number' ||\n          typeof diagramBounds.maxY !== 'number' ||\n          Number.isNaN(diagramBounds.minX) ||\n          Number.isNaN(diagramBounds.maxX) ||\n          Number.isNaN(diagramBounds.minY) ||\n          Number.isNaN(diagramBounds.maxY)\n        ) {\n          setIsDragging(false);\n          return;\n        }\n\n        // Calcular la cantidad de desplazamiento en coordenadas del flujo\n        // Prevenir divisiones por cero\n        const diagramWidth = Math.max(\n          diagramBounds.maxX - diagramBounds.minX,\n          1,\n        );\n        const diagramHeight = Math.max(\n          diagramBounds.maxY - diagramBounds.minY,\n          1,\n        );\n        const scale = Math.min(\n          (width - 2 * padding) / diagramWidth,\n          (height - 2 * padding) / diagramHeight,\n        );\n\n        const movementScale = scale * viewport.zoom;\n\n        // Sanitizar valores antes de aplicar al viewport\n        const newX = sanitizeNumber(\n          viewport.x - deltaX / movementScale,\n          viewport.x,\n        );\n        const newY = sanitizeNumber(\n          viewport.y - deltaY / movementScale,\n          viewport.y,\n        );\n\n        // Aplicar el movimiento del viewport en la dirección contraria al arrastre\n        viewport.setViewport({\n          x: newX,\n          y: newY,\n          zoom: viewport.zoom,\n        });\n\n        setLastPosition({ x, y });\n      } catch {\n        setIsDragging(false);\n      }\n\n      event.stopPropagation();\n    },\n    [\n      isDragging,\n      isExpanded,\n      lastPosition,\n      viewport,\n      width,\n      height,\n      padding,\n      diagramBounds,\n    ],\n  );\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Función principal para dibujar el minimapa\n  const drawMiniMap = useCallback(() => {\n    if (!canvasReference.current || !diagramBounds) {\n      return;\n    }\n\n    try {\n      if (!isExpanded) {\n        const canvas = canvasReference.current;\n        if (canvas) {\n          const context = canvas.getContext('2d');\n          // Clear the canvas to ensure it's blank when collapsed and not drawing\n          context.clearRect(0, 0, width, height);\n        }\n        return; // Skip all drawing if collapsed\n      }\n      const canvas = canvasReference.current;\n      const context = canvas.getContext('2d');\n      if (!context) {\n        return;\n      }\n\n      // Sanitizar los bounds para evitar errores de cálculo\n\n      // Limpiar canvas\n      context.clearRect(0, 0, width, height);\n\n      // Dibujar fondo\n      context.fillStyle = 'rgba(15, 20, 25, 0.8)';\n      context.fillRect(0, 0, width, height);\n\n      // Dibujar borde protector del canvas\n      context.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n      context.lineWidth = 1;\n      context.strokeRect(0, 0, width, height);\n\n      const availableWidth = width - padding * 2;\n      const availableHeight = height - padding * 2;\n\n      const diagramWidth = Math.max(diagramBounds.maxX - diagramBounds.minX, 1); // Evitar división por cero\n      const diagramHeight = Math.max(\n        diagramBounds.maxY - diagramBounds.minY,\n        1,\n      ); // Evitar división por cero\n\n      // Optimizar renderizado basado en cantidad de elementos\n      // (usamos directamente isUltraMode para simplificar)\n\n      // Calcular la escala para mapear el diagrama al canvas\n      // Calcular la escala para mapear el diagrama completo al canvas\n      const scaleX = availableWidth / diagramWidth;\n      const scaleY = availableHeight / diagramHeight;\n      const scale = Math.min(scaleX, scaleY); // Usar la menor escala para mantener proporciones\n\n      // Centro del minimapa - valores simples para posicionamiento\n\n      // Mapear el centro del lienzo principal al centro del minimapa\n      const minimapCenterX = width / 2;\n      const minimapCenterY = height / 2;\n\n      /**\n       * Funciones de transformación para mapear coordenadas del diagrama al minimapa\n       * @param {number} coord - Coordenada a transformar\n       * @param {string} axis - Eje ('x' o 'y')\n       * @returns {number} - Coordenada transformada en el espacio del minimapa\n       */\n      const transformCoord = (coord, axis) => {\n        // Valores por defecto según el eje\n        const center = axis === 'x' ? minimapCenterX : minimapCenterY;\n        const diagramCenter =\n          axis === 'x' ? diagramBounds.centerX : diagramBounds.centerY;\n\n        // Validación de entrada\n        if (\n          typeof coord !== 'number' ||\n          Number.isNaN(coord) ||\n          !Number.isFinite(coord)\n        ) {\n          return center;\n        }\n\n        // Transformación relativa al centro\n        return (coord - diagramCenter) * scale + center;\n      };\n\n      // Funciones específicas para cada eje\n      const transformX = (x) => transformCoord(x, 'x');\n      const transformY = (y) => transformCoord(y, 'y');\n\n      // Dibujar aristas\n      for (const edge of validEdges) {\n        if (!edge.source || !edge.target) continue;\n\n        const sourceNode = validNodes.find((n) => n.id === edge.source);\n        const targetNode = validNodes.find((n) => n.id === edge.target);\n\n        if (!sourceNode || !targetNode) continue;\n\n        const sourceX = transformX(\n          sourceNode.position.x + (sourceNode.width || 100) / 2,\n        );\n        const sourceY = transformY(\n          sourceNode.position.y + (sourceNode.height || 40) / 2,\n        );\n        const targetX = transformX(\n          targetNode.position.x + (targetNode.width || 100) / 2,\n        );\n        const targetY = transformY(\n          targetNode.position.y + (targetNode.height || 40) / 2,\n        );\n\n        // Calcular la distancia para determinar si usar curvas\n        const dx = targetX - sourceX;\n        const dy = targetY - sourceY;\n        const distribution = Math.hypot(dx, dy);\n\n        if (isExpanded && distribution > 20) {\n          // Para conexiones largas, usar curvas Bezier para mejor visualización\n          const midX = (sourceX + targetX) / 2;\n          const midY = (sourceY + targetY) / 2;\n          // Factor de curvatura proporcional a la distancia\n          const curveFactor = 0.2;\n          const nx = (-dy / distribution) * curveFactor * distribution;\n          const ny = (dx / distribution) * curveFactor * distribution;\n\n          context.beginPath();\n          context.moveTo(sourceX, sourceY);\n          context.quadraticCurveTo(midX + nx, midY + ny, targetX, targetY);\n        } else {\n          context.beginPath();\n          context.moveTo(sourceX, sourceY);\n          context.lineTo(targetX, targetY);\n        }\n\n        const edgeColor = edgeColors[edge.type] || edgeColors.default;\n        context.strokeStyle = isExpanded ? edgeColor : `${edgeColor}99`;\n        context.lineWidth = isExpanded ? 1.5 : 0.8;\n\n        if (edge.animated) {\n          context.setLineDash([2, 2]);\n        } else {\n          context.setLineDash([]);\n        }\n\n        context.stroke();\n        context.setLineDash([]);\n\n        if (isExpanded) {\n          const angle = Math.atan2(targetY - sourceY, targetX - sourceX);\n          const arrowSize = 4;\n\n          context.beginPath();\n          context.moveTo(targetX, targetY);\n          context.lineTo(\n            targetX - arrowSize * Math.cos(angle - Math.PI / 6),\n            targetY - arrowSize * Math.sin(angle - Math.PI / 6),\n          );\n          context.lineTo(\n            targetX - arrowSize * Math.cos(angle + Math.PI / 6),\n            targetY - arrowSize * Math.sin(angle + Math.PI / 6),\n          );\n          context.closePath();\n          context.fillStyle = edgeColor;\n          context.fill();\n        }\n      }\n\n      // Dibujar nodos\n      for (const node of validNodes) {\n        const nodeX = transformX(node.position.x);\n        const nodeY = transformY(node.position.y);\n\n        const nodeWidth = node.width ? node.width * scale : 30 * scale;\n        const nodeHeight = node.height ? node.height * scale : 20 * scale;\n\n        const centerX = nodeX + nodeWidth / 2;\n        const centerY = nodeY + nodeHeight / 2;\n\n        const nodeColor = nodeColors[node.type] || '#ff00ff';\n\n        if (isExpanded) {\n          const radius = Math.min(4, Math.max(2, nodeWidth * 0.2));\n\n          context.beginPath();\n          context.moveTo(\n            centerX - nodeWidth / 2 + radius,\n            centerY - nodeHeight / 2,\n          );\n          context.lineTo(\n            centerX + nodeWidth / 2 - radius,\n            centerY - nodeHeight / 2,\n          );\n          context.quadraticCurveTo(\n            centerX + nodeWidth / 2,\n            centerY - nodeHeight / 2,\n            centerX + nodeWidth / 2,\n            centerY - nodeHeight / 2 + radius,\n          );\n          context.lineTo(\n            centerX + nodeWidth / 2,\n            centerY + nodeHeight / 2 - radius,\n          );\n          context.quadraticCurveTo(\n            centerX + nodeWidth / 2,\n            centerY + nodeHeight / 2,\n            centerX + nodeWidth / 2 - radius,\n            centerY + nodeHeight / 2,\n          );\n          context.lineTo(\n            centerX - nodeWidth / 2 + radius,\n            centerY + nodeHeight / 2,\n          );\n          context.quadraticCurveTo(\n            centerX - nodeWidth / 2,\n            centerY + nodeHeight / 2,\n            centerX - nodeWidth / 2,\n            centerY + nodeHeight / 2 - radius,\n          );\n          context.lineTo(\n            centerX - nodeWidth / 2,\n            centerY - nodeHeight / 2 + radius,\n          );\n          context.quadraticCurveTo(\n            centerX - nodeWidth / 2,\n            centerY - nodeHeight / 2,\n            centerX - nodeWidth / 2 + radius,\n            centerY - nodeHeight / 2,\n          );\n          context.closePath();\n\n          const gradient = context.createLinearGradient(\n            centerX - nodeWidth / 2,\n            centerY - nodeHeight / 2,\n            centerX + nodeWidth / 2,\n            centerY + nodeHeight / 2,\n          );\n          gradient.addColorStop(0, `${nodeColor}CC`);\n          gradient.addColorStop(1, `${nodeColor}99`);\n          context.fillStyle = gradient;\n          context.fill();\n\n          context.strokeStyle = nodeColor;\n          context.lineWidth = 1;\n          context.stroke();\n\n          context.beginPath();\n          context.moveTo(\n            centerX - nodeWidth / 2 + radius,\n            centerY - nodeHeight / 2,\n          );\n          context.lineTo(\n            centerX + nodeWidth / 2 - radius,\n            centerY - nodeHeight / 2,\n          );\n          context.quadraticCurveTo(\n            centerX + nodeWidth / 2,\n            centerY - nodeHeight / 2,\n            centerX + nodeWidth / 2,\n            centerY - nodeHeight / 2 + radius,\n          );\n          context.strokeStyle = `${nodeColor}FF`;\n          context.lineWidth = 1.5;\n          context.stroke();\n\n          if (node.data?.label && nodeWidth > 10) {\n            const maxLength = Math.floor(nodeWidth / 2);\n            let { label } = node.data;\n            if (label.length > maxLength) {\n              label = `${label.slice(0, Math.max(0, maxLength))}...`;\n            }\n\n            const fontSize = Math.max(6, Math.min(9, nodeWidth / 4));\n            context.font = `bold ${fontSize}px Rajdhani`;\n            context.fillStyle = '#ffffff';\n            context.textAlign = 'center';\n            context.textBaseline = 'middle';\n            context.fillText(label, centerX, centerY);\n          }\n        } else {\n          // Versión simple para modo no expandido (puntos pequeños)\n          const nodeRadius = Math.max(2, Math.min(nodeWidth, nodeHeight) / 2);\n\n          context.beginPath();\n          context.arc(centerX, centerY, nodeRadius, 0, 2 * Math.PI);\n\n          const gradient = context.createRadialGradient(\n            centerX,\n            centerY,\n            0,\n            centerX,\n            centerY,\n            nodeRadius,\n          );\n          gradient.addColorStop(0, nodeColor);\n          gradient.addColorStop(1, `${nodeColor}80`);\n          context.fillStyle = gradient;\n          context.fill();\n\n          context.strokeStyle = '#ffffff50';\n          context.lineWidth = 0.5;\n          context.stroke();\n        }\n      }\n\n      if (isExpanded && viewport) {\n        // Ajustar el rectángulo del viewport para que se mueva correctamente\n        const vpLeft = transformX(viewport.x);\n        const vpTop = transformY(viewport.y);\n\n        // Calcular dimensiones del viewport en el minimapa\n        const vpWidth = (windowWidth / viewport.zoom) * scale;\n        const vpHeight = (windowHeight / viewport.zoom) * scale;\n        const radius = 3; // Radio para las esquinas redondeadas\n\n        // Dibujar un rectángulo con esquinas redondeadas para el viewport\n        context.beginPath();\n        context.moveTo(vpLeft + radius, vpTop);\n        context.lineTo(vpLeft + vpWidth - radius, vpTop);\n        context.arcTo(\n          vpLeft + vpWidth,\n          vpTop,\n          vpLeft + vpWidth,\n          vpTop + radius,\n          radius,\n        );\n        context.lineTo(vpLeft + vpWidth, vpTop + vpHeight - radius);\n        context.arcTo(\n          vpLeft + vpWidth,\n          vpTop + vpHeight,\n          vpLeft + vpWidth - radius,\n          vpTop + vpHeight,\n          radius,\n        );\n        context.lineTo(vpLeft + radius, vpTop + vpHeight);\n        context.arcTo(\n          vpLeft,\n          vpTop + vpHeight,\n          vpLeft,\n          vpTop + vpHeight - radius,\n          radius,\n        );\n        context.lineTo(vpLeft, vpTop + radius);\n        context.arcTo(vpLeft, vpTop, vpLeft + radius, vpTop, radius);\n\n        context.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        context.lineWidth = 1.5;\n        context.setLineDash([4, 2]);\n        context.stroke();\n        context.fillStyle = 'rgba(255, 255, 255, 0.1)';\n        context.fill();\n        context.setLineDash([]);\n      }\n\n      if (isExpanded) {\n        try {\n          const scaleBarLength = 30;\n          // Asegurar que scale sea un número válido y no sea cero\n          const safeScale =\n            typeof scale === 'number' && scale !== 0 && Number.isFinite(scale)\n              ? scale\n              : 1;\n          const realDistance = Math.round(scaleBarLength / safeScale);\n\n          const scaleY = height - 12;\n\n          context.beginPath();\n          context.moveTo(width - 50, scaleY + 1);\n          context.lineTo(width - 50 + scaleBarLength, scaleY + 1);\n          context.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n          context.lineWidth = 2;\n          context.stroke();\n\n          context.beginPath();\n          context.moveTo(width - 50, scaleY);\n          context.lineTo(width - 50 + scaleBarLength, scaleY);\n          context.strokeStyle = '#ffffff';\n          context.lineWidth = 2;\n          context.stroke();\n\n          context.beginPath();\n          context.moveTo(width - 50, scaleY - 3);\n          context.lineTo(width - 50, scaleY + 3);\n          context.moveTo(width - 50 + scaleBarLength, scaleY - 3);\n          context.lineTo(width - 50 + scaleBarLength, scaleY + 3);\n          context.strokeStyle = '#ffffff';\n          context.lineWidth = 1;\n          context.stroke();\n\n          context.font = 'bold 8px Rajdhani';\n          context.fillStyle = '#ffffff';\n          context.textAlign = 'center';\n          context.fillText(\n            `${realDistance}px`,\n            width - 50 + scaleBarLength / 2,\n            scaleY - 5,\n          );\n        } catch {\n          // No hacer nada en caso de error\n        }\n      }\n    } catch {\n      setHasError(true);\n    }\n  }, [\n    validNodes,\n    validEdges,\n    diagramBounds,\n    isExpanded,\n    width,\n    height,\n    padding,\n    nodeRadius,\n\n    viewport,\n    windowWidth,\n    windowHeight,\n  ]);\n\n  useEffect(() => {\n    try {\n      if (canvasReference.current) {\n        drawMiniMap();\n        if (!canvasReady) setCanvasReady(true);\n      }\n    } catch {}\n  }, [drawMiniMap, canvasReady, viewport?.x, viewport?.y, viewport?.zoom]);\n\n  useEffect(() => {\n    const container = containerReference.current;\n    if (!container) return;\n\n    container.addEventListener('mousedown', handleMouseDown);\n    globalThis.addEventListener('mousemove', handleMouseMove);\n    globalThis.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      container.removeEventListener('mousedown', handleMouseDown);\n      globalThis.removeEventListener('mousemove', handleMouseMove);\n      globalThis.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseDown, handleMouseMove, handleMouseUp]);\n\n  useEffect(() => {\n    // Reset error state when expanded state changes\n    setHasError(false);\n  }, [isExpanded]);\n\n  // Si hay un error en el componente o no hay nodos válidos\n  if (hasError || !validNodes || validNodes.length === 0) {\n    return (\n      <div\n        className={`ts-custom-minimap-container ${isExpanded ? 'expanded' : 'collapsed'} ${hasError ? 'error' : ''}`}\n        onClick={handleToggle}\n      >\n        <div className='ts-minimap-empty'>\n          <p>{hasError ? 'Error en minimapa' : 'Sin nodos'}</p>\n          {hasError && isExpanded && (\n            <button\n              className='ts-minimap-reset'\n              onClick={(event_) => {\n                event_.stopPropagation();\n                setHasError(false);\n                setIsExpanded(false);\n              }}\n            >\n              Reiniciar\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerReference}\n      className={`ts-custom-minimap-container ${isExpanded ? 'expanded' : 'collapsed'} ${isDragging ? 'dragging' : ''}`}\n      onClick={isDragging ? undefined : handleToggle}\n    >\n      <canvas\n        ref={canvasReference}\n        width={width}\n        height={height}\n        className='ts-minimap-canvas'\n      />\n      {isExpanded && (\n        <div className='ts-minimap-labels'>\n          <div className='ts-minimap-title'>Minimapa</div>\n          {!isDragging && (\n            <div className='ts-minimap-hint'>Clic para colapsar</div>\n          )}\n          {isDragging && (\n            <div className='ts-minimap-hint active'>Arrastrando...</div>\n          )}\n        </div>\n      )}\n      {!isExpanded && (\n        <div\n          className='ts-minimap-icon'\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            gap: '4px',\n          }}\n        >\n          {/* Icono de cuadrícula para sugerir mapa */}\n          <svg\n            width='10'\n            height='10'\n            viewBox='0 0 12 12'\n            xmlns='http://www.w3.org/2000/svg'\n            aria-hidden='true'\n          >\n            <circle cx='2' cy='2' r='1.5' fill='#888888' /> {/* Gris oscuro */}\n            <circle cx='6' cy='2' r='1.5' fill='#AAAAAA' /> {/* Gris medio */}\n            <circle cx='10' cy='2' r='1.5' fill='#888888' />\n            <circle cx='2' cy='6' r='1.5' fill='#AAAAAA' />\n            <circle cx='6' cy='6' r='1.5' fill='#CCCCCC' /> {/* Gris claro */}\n            <circle cx='10' cy='6' r='1.5' fill='#AAAAAA' />\n            <circle cx='2' cy='10' r='1.5' fill='#888888' />\n            <circle cx='6' cy='10' r='1.5' fill='#AAAAAA' />\n            <circle cx='10' cy='10' r='1.5' fill='#888888' />\n          </svg>\n          {/* Icono de flechas existente para expandir */}\n          <svg\n            width='16'\n            height='16'\n            viewBox='0 0 24 24'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n            aria-hidden='true'\n          >\n            <path\n              d='M15 3H21V9'\n              stroke='currentColor'\n              strokeWidth='2'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            />\n            <path\n              d='M9 21H3V15'\n              stroke='currentColor'\n              strokeWidth='2'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            />\n            <path\n              d='M21 3L14 10'\n              stroke='currentColor'\n              strokeWidth='2'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            />\n            <path\n              d='M3 21L10 14'\n              stroke='currentColor'\n              strokeWidth='2'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            />\n          </svg>\n        </div>\n      )}\n    </div>\n  );\n};\n\nCustomMiniMap.propTypes = {\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  isExpanded: PropTypes.bool,\n  toggleMiniMap: PropTypes.func,\n\n  viewport: PropTypes.object,\n  isUltraMode: PropTypes.bool,\n};\n\nexport default CustomMiniMap;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/EdgeFilters.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (101). Maximum allowed is 80.",
        "line": 10,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 116,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Componente EdgeFilters\n * Define filtros SVG avanzados para efectos visuales de élite en aristas\n * Estos filtros proporcionan efectos de resplandor, partículas y gradientes\n * según estándares de visualización de datos de 2025\n *\n * @version 2.0.0\n * @author Cascade AI\n */\nconst EdgeFilters = () => {\n  return (\n    <svg\n      style={{ width: 0, height: 0, position: 'absolute' }}\n      aria-hidden='true'\n      focusable='false'\n    >\n      <defs>\n        {/* Filtro para el resplandor de las aristas */}\n        <filter\n          id='elite-edge-glow-filter'\n          x='-50%'\n          y='-50%'\n          width='200%'\n          height='200%'\n        >\n          <feGaussianBlur stdDeviation='3' result='blur' />\n          <feComposite in='SourceGraphic' in2='blur' operator='over' />\n        </filter>\n\n        {/* Filtro para las partículas de flujo energético */}\n        <filter\n          id='elite-edge-particle-filter'\n          x='-50%'\n          y='-50%'\n          width='200%'\n          height='200%'\n        >\n          <feGaussianBlur stdDeviation='1.5' result='blur' />\n          <feComposite in='SourceGraphic' in2='blur' operator='over' />\n          <feColorMatrix\n            type='matrix'\n            values='1 0 0 0 0\n                    0 1 0 0 0\n                    0 0 1 0 0\n                    0 0 0 1.5 0'\n          />\n        </filter>\n\n        {/* Filtro para el efecto de neón en aristas seleccionadas */}\n        <filter\n          id='elite-edge-neon-filter'\n          x='-50%'\n          y='-50%'\n          width='200%'\n          height='200%'\n        >\n          <feGaussianBlur stdDeviation='2.5' result='blur' />\n          <feComposite in='SourceGraphic' in2='blur' operator='over' />\n          <feColorMatrix\n            type='matrix'\n            values='1 0 0 0 0.2\n                    0 1 0 0 0\n                    0 0 1 0 0.2\n                    0 0 0 1.8 0'\n          />\n        </filter>\n\n        {/* Filtro para el efecto de desenfoque direccional */}\n        <filter id='elite-edge-motion-filter'>\n          <feGaussianBlur in='SourceGraphic' stdDeviation='2' />\n          <feOffset dx='1' dy='0' />\n          <feComposite in='SourceGraphic' operator='over' />\n        </filter>\n\n        {/* Gradiente base para aristas */}\n        <linearGradient\n          id='elite-edge-base-gradient'\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='0%'\n        >\n          <stop offset='0%' stopColor='#ff00ff' stopOpacity='0.8' />\n          <stop offset='50%' stopColor='#ffffff' stopOpacity='0.9' />\n          <stop offset='100%' stopColor='#ff00ff' stopOpacity='0.8' />\n        </linearGradient>\n\n        {/* Gradiente para aristas seleccionadas */}\n        <linearGradient\n          id='elite-edge-selected-gradient'\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='0%'\n        >\n          <stop offset='0%' stopColor='#ff40ff' stopOpacity='0.9' />\n          <stop offset='50%' stopColor='#ffffff' stopOpacity='1' />\n          <stop offset='100%' stopColor='#ff40ff' stopOpacity='0.9' />\n        </linearGradient>\n\n        {/* Gradiente para aristas con hover */}\n        <linearGradient\n          id='elite-edge-hover-gradient'\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='0%'\n        >\n          <stop offset='0%' stopColor='#ff20ff' stopOpacity='0.85' />\n          <stop offset='50%' stopColor='#ffffff' stopOpacity='0.95' />\n          <stop offset='100%' stopColor='#ff20ff' stopOpacity='0.85' />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n\nexport default EdgeFilters;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/EdgeMarker.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/EliteEdge.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (639). Maximum allowed is 80.",
        "line": 22,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 850,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 26. Maximum allowed is 10.",
        "line": 22,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 850,
        "endColumn": 2
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useMemo has a missing dependency: 'properties'. Either include it or remove the dependency array.",
        "line": 76,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 82,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [properties]",
            "fix": { "range": [2537, 2665], "text": "[properties]" }
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 22. Maximum allowed is 10.",
        "line": 86,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 120,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 92,
        "column": 17,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 92,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 115,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 115,
        "endColumn": 14
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 116,
        "column": 7,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 117,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [4093, 4098], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (135). Maximum allowed is 80.",
        "line": 144,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 307,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 50. Maximum allowed is 10.",
        "line": 144,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 307,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 59 to the 15 allowed.",
        "line": 144,
        "column": 16,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 144,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 241,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 241,
        "endColumn": 20
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 241,
        "column": 53,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 242,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [8678, 8687], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-all-duplicated-branches",
        "severity": 2,
        "message": "Remove this conditional structure or edit its code blocks so that they're not all the same.",
        "line": 251,
        "column": 9,
        "nodeType": "IfStatement",
        "messageId": "removeOrEditConditionalStructure",
        "endLine": 268,
        "endColumn": 10
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 270,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 270,
        "endColumn": 20
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 270,
        "column": 53,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 271,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [10024, 10033], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 288,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 288,
        "endColumn": 20
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 288,
        "column": 53,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 289,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [10597, 10606], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 304,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 304,
        "endColumn": 18
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 304,
        "column": 51,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 305,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [11104, 11111], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 320,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 320,
        "endColumn": 16
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 320,
        "column": 49,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 321,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [11455, 11460], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 325,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 325,
        "endColumn": 16
      },
      {
        "ruleId": "sonarjs/no-all-duplicated-branches",
        "severity": 2,
        "message": "Remove this conditional structure or edit its code blocks so that they're not all the same.",
        "line": 326,
        "column": 7,
        "nodeType": "IfStatement",
        "messageId": "removeOrEditConditionalStructure",
        "endLine": 334,
        "endColumn": 8
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 331,
        "column": 9,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 332,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [11715, 11722], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 349,
        "column": 52,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 370,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/no-all-duplicated-branches",
        "severity": 2,
        "message": "This conditional operation returns the same value whether the condition is \"true\" or \"false\".",
        "line": 351,
        "column": 17,
        "nodeType": "ConditionalExpression",
        "messageId": "returnsTheSameValue",
        "endLine": 351,
        "endColumn": 52
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 376,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 376,
        "endColumn": 40
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 397,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 397,
        "endColumn": 20
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 397,
        "column": 53,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 398,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [14338, 14347], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 417,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 417,
        "endColumn": 18
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 417,
        "column": 51,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 418,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [14972, 14979], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useMemo has an unnecessary dependency: 'id'. Either exclude it or remove the dependency array.",
        "line": 422,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 422,
        "endColumn": 78,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition]",
            "fix": {
              "range": [15063, 15135],
              "text": "[sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition]"
            }
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 455,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 56
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 466,
        "column": 27,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 466,
        "endColumn": 79
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 466,
        "column": 44,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 466,
        "endColumn": 79
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has unnecessary dependencies: 'determineEdgeColor' and 'isHovered'. Either exclude them or remove the dependency array.",
        "line": 485,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 493,
        "endColumn": 6,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [lodLevel, data, selected, calculateAdaptiveStrokeWidth, setFlowData]",
            "fix": {
              "range": [17581, 17730],
              "text": "[lodLevel, data, selected, calculateAdaptiveStrokeWidth, setFlowData]"
            }
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"lighterColor\".",
        "line": 518,
        "column": 9,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 518,
        "endColumn": 21
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"darkerColor\".",
        "line": 520,
        "column": 9,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 520,
        "endColumn": 20
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useMemo has a missing dependency: 'determineEdgeColor'. Either include it or remove the dependency array.",
        "line": 587,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 587,
        "endColumn": 45,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [determineEdgeColor, data, selected, isHovered, gradientId]",
            "fix": {
              "range": [20870, 20909],
              "text": "[determineEdgeColor, data, selected, isHovered, gradientId]"
            }
          }
        ]
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 776,
        "column": 26,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 776,
        "endColumn": 63
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 776,
        "column": 41,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 776,
        "endColumn": 63
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'EdgeText' is not defined.",
        "line": 828,
        "column": 10,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 828,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 42,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { memo, useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { getBezierPath } from 'reactflow';\n\nimport useFlowStore from '@/stores/use-flow-store';\nimport { EDGE_COLORS } from '@/utils/node-config.js';\n\nimport { normalizeEdgeHandles } from '../utils/handleFixer';\n\nimport './EliteEdge.css';\n\n// Versión optimizada del componente EliteEdge para solucionar problemas de rendimiento\n// y errores en las aristas personalizadas\n\n/**\n * EliteEdge 2025 - Renderizador avanzado de aristas con LOD.\n * Implementa aristas con flujo de energía dinámico, efectos visuales y sistema de Nivel de Detalle (LOD).\n * El renderizado cambia entre estático y animado según el `lodLevel` y `isUltraMode`.\n * @version 2.1.0\n * @author Cascade AI\n */\nconst EliteEdgeComponent = ({\n  id,\n  source,\n  target,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n  data = {},\n  selected = false,\n  label,\n  sourceHandle: propertySourceHandle,\n  targetHandle: propertyTargetHandle,\n  className = '',\n  // Nueva prop para detectar si la arista está siendo arrastrada actualmente\n  // Esto permite renderizar la arista de manera visible durante el arrastre\n  isDragging = false,\n  lodLevel, // Prop inyectada por HOC\n  ...properties\n}) => {\n  const isUltraMode = useFlowStore((state) => state.isUltraMode);\n\n  // Condición unificada para determinar si el renderizado debe ser estático.\n  // Es estático si el modo ultra está activo o si el nivel de detalle no es el máximo.\n  const renderStatic = isUltraMode || lodLevel !== 'FULL';\n\n  // Procesamiento ultra-eficiente de handles con máxima optimización\n  // MEJORA: Eliminar logs excesivos y optimizar cálculo para mejor rendimiento\n  const normalizedProperties = useMemo(() => {\n    // Intentar normalizar solo si es necesario - evita procesamiento excesivo\n    if (!properties.id || !properties.source || !properties.target) {\n      // Si faltan datos básicos, devolver una versión segura sin logs\n      return {\n        ...properties,\n        sourceHandle: properties.sourceHandle || 'output',\n        targetHandle: properties.targetHandle || 'input',\n      };\n    }\n\n    try {\n      // Normalizar handles con manejo de errores silencioso\n      if (typeof normalizeEdgeHandles === 'function') {\n        return normalizeEdgeHandles(properties) || properties;\n      }\n      return properties;\n    } catch {\n      // Log silencioso solo para errores críticos\n\n      return properties;\n    }\n  }, [\n    properties.id,\n    properties.source,\n    properties.target,\n    properties.sourceHandle,\n    properties.targetHandle,\n  ]);\n\n  // Garantizar que siempre tengamos props válidas y un ID único\n  // Implementación resiliente que evita fallos del renderizado por props inválidas\n  const safeProperties = useMemo(() => {\n    // Crear un objeto seguro con valores por defecto\n    const result = {\n      id:\n        normalizedProperties.id ||\n        id ||\n        `edge-${Math.random().toString(36).slice(2, 9)}`,\n      source: normalizedProperties.source || source,\n      target: normalizedProperties.target || target,\n      sourceHandle:\n        normalizedProperties.sourceHandle || propertySourceHandle || 'output',\n      targetHandle:\n        normalizedProperties.targetHandle || propertyTargetHandle || 'input',\n      animated:\n        normalizedProperties.animated === undefined\n          ? false\n          : normalizedProperties.animated,\n      label: normalizedProperties.label || label,\n      style: normalizedProperties.style || style || {},\n      className: normalizedProperties.className || className || '',\n      selected: normalizedProperties.selected || selected || false,\n      interactionWidth: normalizedProperties.interactionWidth || 20,\n      // Fusionar datos personalizados preservando las referencias\n      ...(normalizedProperties.data || data),\n    };\n\n    // Validación final: sin source o target, la arista no puede existir\n    if (\n      (!result.source || !result.target) &&\n      process.env.NODE_ENV === 'development'\n    ) {\n    }\n\n    return result;\n  }, [\n    normalizedProperties,\n    id,\n    source,\n    target,\n    propertySourceHandle,\n    propertyTargetHandle,\n    style,\n    className,\n    selected,\n    data,\n    label,\n  ]);\n\n  // Usar variables locales en lugar de modificar los parámetros readonly\n  const [effectiveSourceHandle, setEffectiveSourceHandle] = useState(\n    safeProperties.sourceHandle,\n  );\n  const [effectiveTargetHandle, setEffectiveTargetHandle] = useState(\n    safeProperties.targetHandle,\n  );\n\n  // Sistema avanzado de procesamiento inteligente de handles con recuperación automática\n  // Garantiza conexiones estables incluso con datos incompletos o erróneos\n  useEffect(() => {\n    try {\n      // Etapa 1: Decodificación de handles codificados en formato especial\n      // SISTEMA DE COMPATIBILIDAD PARA DATOS LEGACY\n      let newSourceHandle = safeProperties.sourceHandle;\n      let newTargetHandle = safeProperties.targetHandle;\n\n      // Si sourceHandle tiene formato de JSON, parsearlo\n      if (typeof safeProperties.sourceHandle === 'string') {\n        if (safeProperties.sourceHandle.startsWith('|||{')) {\n          try {\n            const jsonString = safeProperties.sourceHandle.slice(3);\n            const handleData = JSON.parse(jsonString);\n            newSourceHandle = handleData.sourceHandle || undefined;\n          } catch {\n            newSourceHandle = undefined;\n          }\n        } else if (\n          safeProperties.sourceHandle !== 'null' &&\n          safeProperties.sourceHandle !== 'undefined'\n        ) {\n          // Usar directamente si es un string válido\n          newSourceHandle = safeProperties.sourceHandle;\n        }\n      }\n\n      // Lo mismo para targetHandle\n      if (typeof safeProperties.targetHandle === 'string') {\n        if (safeProperties.targetHandle.startsWith('|||{')) {\n          try {\n            const jsonString = safeProperties.targetHandle.slice(3);\n            const handleData = JSON.parse(jsonString);\n            newTargetHandle = handleData.targetHandle || undefined;\n          } catch {\n            newTargetHandle = undefined;\n          }\n        } else if (\n          safeProperties.targetHandle !== 'null' &&\n          safeProperties.targetHandle !== 'undefined'\n        ) {\n          newTargetHandle = safeProperties.targetHandle;\n        }\n      }\n\n      // CORRECCIÓN CRÍTICA: Reemplazar 'default' con handles explícitos\n      if (newSourceHandle === 'default') {\n        newSourceHandle = 'output';\n      }\n\n      if (newTargetHandle === 'default') {\n        newTargetHandle = 'input';\n      }\n\n      // Etapa 2: Determinación inteligente de handles basada en tipos de nodos\n      // SOURCE HANDLES - Asignación automática cuando sean nulos o inválidos\n      if (\n        !newSourceHandle ||\n        newSourceHandle === 'null' ||\n        newSourceHandle === 'undefined'\n      ) {\n        if (safeProperties.source.includes('start')) {\n          newSourceHandle = 'output'; // Nodos de inicio siempre tienen una salida\n        } else if (safeProperties.source.includes('message')) {\n          newSourceHandle = 'output'; // Nodos de mensaje tienen una salida\n        } else if (safeProperties.source.includes('decision')) {\n          // Para nodos de decisión, determinar si es rama Sí (0) o No (1) mirando el target\n          if (\n            safeProperties.target.includes('option-1') ||\n            safeProperties.target.includes('message') ||\n            safeProperties.target.includes('action')\n          ) {\n            newSourceHandle = 'output-0'; // Ruta \"Sí\"\n          } else if (\n            safeProperties.target.includes('option-2') ||\n            safeProperties.target.includes('end')\n          ) {\n            newSourceHandle = 'output-1'; // Ruta \"No\"\n          } else {\n            // Análisis posicional si no podemos determinar por el nombre\n            newSourceHandle =\n              safeProperties.sourceY < safeProperties.targetY\n                ? 'output-0'\n                : 'output-1';\n          }\n        } else if (safeProperties.source.includes('option')) {\n          newSourceHandle = 'output';\n        } else if (safeProperties.source.includes('action')) {\n          newSourceHandle = 'output';\n        } else if (safeProperties.source.includes('httprequest')) {\n          newSourceHandle = 'output';\n        } else if (safeProperties.source.includes('power')) {\n          newSourceHandle = 'output';\n        } else {\n          // Fallback para cualquier otro tipo de nodo\n          newSourceHandle = 'output';\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n        }\n      }\n\n      // TARGET HANDLES - Asignación automática\n      if (\n        !newTargetHandle ||\n        newTargetHandle === 'null' ||\n        newTargetHandle === 'undefined'\n      ) {\n        if (safeProperties.target.includes('end')) {\n          newTargetHandle = 'input'; // Nodos de fin siempre tienen una entrada\n        } else if (safeProperties.target.includes('message')) {\n          newTargetHandle = 'input'; // Nodos de mensaje tienen una entrada\n        } else if (safeProperties.target.includes('decision')) {\n          newTargetHandle = 'input'; // Nodos de decisión tienen una entrada\n        } else if (safeProperties.target.includes('option')) {\n          newTargetHandle = 'input'; // Nodos de opción tienen una entrada\n        } else if (safeProperties.target.includes('action')) {\n          newTargetHandle = 'input'; // Nodos de acción tienen una entrada\n        } else if (safeProperties.target.includes('httprequest')) {\n          newTargetHandle = 'input'; // Nodos de solicitud HTTP tienen una entrada\n        } else if (safeProperties.target.includes('power')) {\n          newTargetHandle = 'input'; // Nodos de poder tienen una entrada\n        } else {\n          // Fallback para cualquier otro tipo de nodo\n          newTargetHandle = 'input';\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n        }\n      }\n\n      // Etapa 3: Actualizar estado con los handles procesados\n      if (newSourceHandle !== effectiveSourceHandle) {\n        setEffectiveSourceHandle(newSourceHandle);\n      }\n\n      if (newTargetHandle !== effectiveTargetHandle) {\n        setEffectiveTargetHandle(newTargetHandle);\n      }\n\n      // Etapa 4: Notificar cambios en los handles para sincronización\n      if (\n        newSourceHandle !== safeProperties.sourceHandle ||\n        newTargetHandle !== safeProperties.targetHandle\n      ) {\n        if (process.env.NODE_ENV === 'development') {\n        }\n\n        // Emitir evento para notificar cambios en los handles\n        // Útil para componentes que necesitan saber cuando las aristas cambian\n        document.dispatchEvent(\n          new CustomEvent('elite-edge-handles-updated', {\n            detail: {\n              id: safeProperties.id,\n              sourceHandle: newSourceHandle,\n              targetHandle: newTargetHandle,\n            },\n          }),\n        );\n      }\n    } catch {\n      if (process.env.NODE_ENV === 'development') {\n      }\n    }\n  }, [\n    safeProperties.id,\n    safeProperties.source,\n    safeProperties.target,\n    safeProperties.sourceHandle,\n    safeProperties.targetHandle,\n    safeProperties.sourceY,\n    safeProperties.targetY,\n    effectiveSourceHandle,\n    effectiveTargetHandle,\n  ]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n    }\n  }, [isUltraMode]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      if (\n        Number.isFinite(sourceX) &&\n        Number.isFinite(sourceY) &&\n        Number.isFinite(targetX) &&\n        Number.isFinite(targetY)\n      ) {\n      } else {\n        // pero lo mantenemos aquí por si queremos diferenciar el momento de la actualización vs el cálculo inicial.\n      }\n    }\n  }, [id, sourceX, sourceY, targetX, targetY]);\n\n  // Referencia al elemento path para optimizaciones y animaciones\n  const pathReference = useRef();\n\n  // Estado para interacciones de usuario\n  const [isHovered, setIsHovered] = useState(false);\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n\n  // Referencia al timeout del tooltip para limpiar\n  const tooltipTimeoutReference = useRef();\n\n  // Calcular grosor adaptativo basado en múltiples factores\n  const calculateAdaptiveStrokeWidth = useCallback(() => {\n    // Grosor base según el estado de selección\n    let width = safeProperties.selected ? 2.5 : 2.5; // AUMENTADO: Grosor base para aristas normales\n\n    // Ajustar según hover\n    if (isHovered) width += 0.5;\n\n    // Ajustar según tipo de arista\n    const edgeType = safeProperties.data?.type || 'default';\n    if (edgeType === 'success') width += 0.2;\n    if (edgeType === 'warning') width += 0.1;\n    if (edgeType === 'danger') width += 0.3;\n\n    // Ajustar según peso/importancia de la arista (si está definido)\n    const weight = Number.parseFloat(safeProperties.data?.weight) || 1;\n    width *= Math.max(0.5, Math.min(1.5, weight));\n\n    // Reducir grosor en modo estático para menor carga visual\n    if (renderStatic) width *= 0.8;\n\n    return width;\n  }, [safeProperties.selected, isHovered, safeProperties.data, renderStatic]);\n\n  // Determinar el color base con soporte para gradientes\n  const determineEdgeColor = useCallback(() => {\n    // Usar tipo de arista para definir color base\n    const edgeType = safeProperties.data?.type || 'default';\n    const color = EDGE_COLORS[edgeType] || EDGE_COLORS.default; // Defaults to magenta if type is 'default' or not in EDGE_COLORS\n\n    // La selección se maneja principalmente por CSS con variantes de magenta (e.g., var(--edge-selected))\n    // y mayor grosor/resplandor. No cambiaremos el color base fundamental aquí a azul.\n    // if (safeProps.selected) {\n    //   color = '#2563eb'; // Azul principal - Eliminado para mantener base magenta\n    // }\n\n    return color;\n  }, [safeProperties.data]);\n\n  // Calcular ruta de la arista con valores predeterminados seguros\n  const edgePath = useMemo(() => {\n    try {\n      // Validar que las coordenadas sean números finitos\n      if (\n        !Number.isFinite(sourceX) ||\n        !Number.isFinite(sourceY) ||\n        !Number.isFinite(targetX) ||\n        !Number.isFinite(targetY)\n      ) {\n        if (process.env.NODE_ENV === 'development') {\n        }\n        return; // No renderizar la arista si las coordenadas no son válidas\n      }\n\n      // Las coordenadas ya están validadas como números finitos por el chequeo anterior.\n      // getBezierPath espera números.\n      const [path] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        curvature: 0.3, // Curvatura moderada para mejor estética\n      });\n\n      return path;\n    } catch {\n      // Este catch ahora es para errores inesperados de getBezierPath u otra lógica interna.\n      if (process.env.NODE_ENV === 'development') {\n      }\n\n      // No renderizamos esta arista para prevenir errores en cascada\n    }\n  }, [id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition]);\n\n  // Calcular posición para etiqueta y tooltip\n  const [labelX, labelY] = useMemo(() => {\n    return [(sourceX + targetX) / 2, (sourceY + targetY) / 2 - 10];\n  }, [sourceX, sourceY, targetX, targetY]);\n\n  // Configurar marcador de flecha para las aristas\n  const actualMarkerEnd = useMemo(() => {\n    return markerEnd || 'url(#elite-edge-arrow)';\n  }, [markerEnd]);\n\n  // ID único para gradientes SVG\n  const gradientId = useMemo(() => {\n    return `elite-edge-gradient-${id.replaceAll(/[^a-zA-Z0-9]/g, '')}`;\n  }, [id]);\n\n  // Estado para animación de flujo\n  const [flowData, setFlowData] = useState({\n    dashOffset: 0,\n    flowOpacity: 0.7,\n    flowWidth: 1.2,\n    flowColor: determineEdgeColor(), // Ensure this uses normal mode colors initially\n  });\n\n  // Función para animar el flujo a lo largo de la arista\n  const animate = useCallback(\n    (time) => {\n      // No animar si el renderizado es estático (por modo ultra o LOD)\n      if (lodLevel === 'ultra') return;\n\n      // Determinar color del flujo basado en tipo de arista\n      const edgeType = data?.type || 'default';\n      const determinedFlowColor = EDGE_COLORS[edgeType] || EDGE_COLORS.default;\n\n      // Si no está seleccionada y es de tipo default, usar blanco translúcido para el flujo\n      // Si está seleccionada o es un tipo especial, usar el color determinado\n      const finalFlowColor =\n        !selected && edgeType === 'default'\n          ? 'rgba(255, 255, 255, 0.7)'\n          : determinedFlowColor;\n\n      // Pulsar opacidad para efecto de energía viva\n      const pulsePhaseOpacity = Math.sin(time / 4000) * 0.3; // Pulso de opacidad más lento y suave\n      const baseOpacity = selected ? 0.9 : edgeType === 'default' ? 0.7 : 0.85;\n      const flowOpacity = Math.max(0.5, baseOpacity + pulsePhaseOpacity);\n\n      // Ancho del flujo ligeramente variable, siempre más delgado que la arista principal\n      const mainStrokeWidth = calculateAdaptiveStrokeWidth();\n      const pulsePhaseWidth = Math.sin(time / 3500) * 0.25; // Pulso de ancho más lento y suave\n      const baseFlowWidth = selected\n        ? mainStrokeWidth * 0.5\n        : mainStrokeWidth * 0.35;\n      const flowWidth = Math.max(0.8, baseFlowWidth + pulsePhaseWidth);\n\n      // Actualizar estado para la animación\n      setFlowData({\n        dashOffset: -(time / 50) % 1000, // Movimiento continuo\n        flowOpacity,\n        flowWidth,\n        flowColor: finalFlowColor,\n      });\n    },\n    [\n      lodLevel,\n      data,\n      selected,\n      isHovered,\n      calculateAdaptiveStrokeWidth,\n      setFlowData,\n      determineEdgeColor,\n    ],\n  );\n\n  // Referencia para la animación\n  const animationReference = useRef(null);\n\n  // Iniciar/detener animación\n  useEffect(() => {\n    // Iniciar animación\n    animationReference.current = requestAnimationFrame(animate);\n\n    // Limpiar animación al desmontar\n    return () => {\n      if (animationReference.current) {\n        cancelAnimationFrame(animationReference.current);\n      }\n    };\n  }, [animate, lodLevel]);\n\n  // Definición del gradiente lineal para el efecto de flujo de energía\n  const gradient = useMemo(() => {\n    // Color base para el gradiente\n    const baseColor = determineEdgeColor(data, false, selected, isHovered);\n\n    // Variante más clara para inicio del gradiente\n    let lighterColor = baseColor;\n    // Variante más oscura para fin del gradiente\n    let darkerColor = baseColor;\n\n    // Para aristas seleccionadas o tipos especiales, podríamos querer gradientes diferentes\n    // Esta lógica es un ejemplo y puede expandirse\n    if (selected) {\n      // Podríamos usar un gradiente más vibrante o diferente para 'selected'\n      // Por ahora, mantenemos la lógica original para la 'manguera energética'\n      lighterColor = '#ff69b4'; // Rosa brillante\n      darkerColor = '#c71585'; // Rosa medio violeta\n    } else\n      switch (data?.type) {\n        case 'success': {\n          lighterColor = '#34d399'; // Verde más claro\n          darkerColor = '#047857'; // Verde más oscuro\n\n          break;\n        }\n        case 'warning': {\n          lighterColor = '#fbbf24'; // Amarillo más claro\n          darkerColor = '#d97706'; // Amarillo más oscuro\n\n          break;\n        }\n        case 'danger': {\n          lighterColor = '#f87171'; // Rojo más claro\n          darkerColor = '#b91c1c'; // Rojo más oscuro\n\n          break;\n        }\n        default: {\n          // CASO DEFAULT (NO SELECCIONADA Y NO ES UN TIPO ESPECIAL)\n          // Gradiente para la 'manguera energética' magenta\n          lighterColor = '#ff69b4'; // Rosa brillante (más claro que magenta puro)\n          darkerColor = '#c71585'; // Rosa medio violeta (más oscuro/diferente de magenta puro)\n        }\n      }\n\n    return (\n      <linearGradient id={gradientId} x1='0%' y1='0%' x2='100%' y2='0%'>\n        {/* <stop offset=\"0%\" stopColor=\"red\" />\n        <stop offset=\"100%\" stopColor=\"blue\" /> */}\n        <stop offset='0%' stopColor={lighterColor}>\n          <animate\n            attributeName='stop-color'\n            values={`${lighterColor};${baseColor};${lighterColor}`}\n            dur='12s'\n            repeatCount='indefinite'\n          />\n        </stop>\n        <stop offset='50%' stopColor={baseColor}>\n          <animate\n            attributeName='stop-color'\n            values={`${baseColor};${darkerColor};${baseColor}`}\n            dur='12s'\n            repeatCount='indefinite'\n          />\n        </stop>\n        <stop offset='100%' stopColor={darkerColor}>\n          <animate\n            attributeName='stop-color'\n            values={`${darkerColor};${lighterColor};${darkerColor}`}\n            dur='12s'\n            repeatCount='indefinite'\n          />\n        </stop>\n      </linearGradient>\n    );\n  }, [gradientId, data, selected, isHovered]);\n\n  // SOLUCIÓN CRÍTICA: Función mejorada para posicionamiento de aristas\n  const handleNodeDragEvent = useCallback(() => {\n    if (!pathReference.current) return;\n\n    // Usar sistema avanzado para reposicionar aristas durante arrastre\n    // Esto soluciona el problema de \"aristas que desaparecen\" o \"saltan\" durante el movimiento\n    requestAnimationFrame(() => {\n      if (pathReference.current) {\n        // Actualizar atributo 'd' del path con la nueva ruta calculada\n        pathReference.current.setAttribute('d', edgePath);\n\n        // También actualizamos posición del texto de etiqueta si existe\n        const textElement = document.querySelector(\n          `[data-elite-edge-label-id=\"${id}\"]`,\n        );\n        if (textElement) {\n          textElement.setAttribute('x', labelX);\n          textElement.setAttribute('y', labelY);\n        }\n      }\n    });\n  }, [edgePath, id, labelX, labelY]);\n\n  // Función para manejar eventos de actualización de aristas\n  const handleEdgeUpdateRequired = useCallback(\n    (event) => {\n      if (event.detail.id === id && pathReference.current) {\n        // Forzar actualización del SVG Path\n        pathReference.current.setAttribute('d', edgePath);\n      }\n    },\n    [id, edgePath],\n  );\n\n  // Escuchar eventos para actualización de aristas\n  useEffect(() => {\n    // Suscribirse a eventos de arrastre de nodos para actualizar aristas\n    document.addEventListener('node-drag-elite-edge', handleNodeDragEvent);\n\n    // Suscribirse a eventos específicos para esta arista\n    document.addEventListener(\n      'elite-edge-update-required',\n      handleEdgeUpdateRequired,\n    );\n\n    return () => {\n      // Limpiar suscripciones\n      document.removeEventListener('node-drag-elite-edge', handleNodeDragEvent);\n      document.removeEventListener(\n        'elite-edge-update-required',\n        handleEdgeUpdateRequired,\n      );\n    };\n  }, [handleNodeDragEvent, handleEdgeUpdateRequired]);\n\n  // Manejadores de eventos para interactividad avanzada\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    tooltipTimeoutReference.current = setTimeout(\n      () => setTooltipVisible(true),\n      600,\n    );\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    clearTimeout(tooltipTimeoutReference.current);\n    setTooltipVisible(false);\n  };\n\n  const handleClick = (event_) => {\n    event_.stopPropagation();\n    clearTimeout(tooltipTimeoutReference.current);\n    setTooltipVisible(!tooltipVisible);\n  };\n\n  // Grosor de línea adaptativo\n  const strokeWidth = calculateAdaptiveStrokeWidth();\n\n  // Opacidad dependiente del estado\n\n  // Modo Ultra Rendimiento: renderizado simplificado para mejorar rendimiento\n  if (lodLevel === 'ultra') {\n    const [edgePathUltra] = getBezierPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      curvature: 0.3, // Curvatura estándar para consistencia\n    });\n\n    // Para aplicar !important, necesitamos construir el string de estilo\n    const ultraStyle = {\n      stroke: '#ff00ff',\n      strokeWidth: selected ? 2.5 : 2,\n      strokeOpacity: selected ? 0.9 : 0.75,\n      strokeDasharray: 'none',\n    };\n\n    return (\n      <path\n        data-testid={`elite-edge-${id}`}\n        d={edgePathUltra}\n        fill='none'\n        strokeLinecap='round'\n        className='react-flow__edge-path elite-edge-path-ultra ultra-mode'\n        markerEnd={actualMarkerEnd}\n        style={ultraStyle}\n      />\n    );\n  }\n\n  // Modo normal: renderizado completo con efectos visuales\n\n  // Si edgePath es null (porque las coordenadas aún no son válidas) y no estamos en modo ultra,\n  // no renderizamos nada. React Flow lo intentará de nuevo en el siguiente ciclo.\n  if (!edgePath) {\n    return;\n  }\n\n  return (\n    <>\n      {/* Definición SVG para efectos especiales */}\n      <defs>\n        {/* Gradiente para arista */}\n        {gradient}\n\n        {/* Marcador de flecha personalizado */}\n        <marker\n          id='elite-edge-arrow'\n          viewBox='0 0 10 10'\n          refX='8'\n          refY='5'\n          markerWidth='6'\n          markerHeight='6'\n          orient='auto'\n        >\n          <path d='M 0 0 L 10 5 L 0 10 z' fill={determineEdgeColor()} />\n        </marker>\n\n        {/* Filtros para efectos visuales */}\n        <filter\n          id='elite-edge-glow-filter'\n          x='-50%'\n          y='-50%'\n          width='200%'\n          height='200%'\n        >\n          <feGaussianBlur stdDeviation='2' result='blur' />\n          <feComposite in='SourceGraphic' in2='blur' operator='over' />\n        </filter>\n\n        <filter\n          id='elite-edge-particle-filter'\n          x='-50%'\n          y='-50%'\n          width='200%'\n          height='200%'\n        >\n          <feTurbulence\n            baseFrequency='0.05'\n            numOctaves='2'\n            result='turbulence'\n          />\n          <feDisplacementMap in='SourceGraphic' in2='turbulence' scale='3' />\n        </filter>\n      </defs>\n\n      {/* Grupo de elementos para arista con manejo de eventos */}\n      <g\n        className={`elite-edge ${selected ? 'selected' : ''} ${isHovered ? 'hovered' : ''} ${className || ''}`}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={handleClick}\n        data-id={id}\n        style={{ cursor: 'pointer' }}\n      >\n        {/* MODO NORMAL: arista con efectos visuales completos */}\n        {/* Estos elementos se ocultarán automáticamente en modo ultra rendimiento via CSS */}\n\n        {/* Ruta principal de la arista con gradiente */}\n        <path\n          ref={pathReference}\n          d={edgePath}\n          stroke={`url(#${gradientId})`}\n          strokeWidth={strokeWidth}\n          fill='none'\n          strokeOpacity={selected ? 1 : isHovered ? 0.9 : 0.75}\n          strokeLinecap='round'\n          className='elite-edge-path'\n          markerEnd={actualMarkerEnd}\n          style={{\n            transition: 'stroke-width 0.2s ease, stroke-opacity 0.2s ease',\n            strokeDasharray: 'none', // Forzar línea sólida, anulando la animación de React Flow\n          }}\n        />\n\n        {/* Efecto de flujo energético continuo */}\n        <path\n          className='elite-edge-flow'\n          d={edgePath}\n          fill='none'\n          stroke={flowData.flowColor}\n          strokeWidth={flowData.flowWidth}\n          // strokeDasharray=\"15 30\" // ELIMINADO: Flujo como línea sólida pulsante\n          // strokeDashoffset={flowData.dashOffset} // ELIMINADO\n          strokeOpacity={flowData.flowOpacity}\n          strokeLinecap='round'\n          data-edge-id={id}\n          filter='url(#elite-edge-glow-filter)'\n        />\n\n        {/* Tooltip contextual avanzado */}\n        {tooltipVisible && (\n          <foreignObject\n            x={labelX - 75}\n            y={labelY - 40}\n            width='150'\n            height='80'\n            className='elite-edge-tooltip'\n          >\n            <div\n              xmlns='http://www.w3.org/1999/xhtml'\n              className='elite-edge-tooltip-content'\n            >\n              <div className='elite-edge-tooltip-title'>\n                {data?.label || `${source} → ${target}`}\n              </div>\n              <div className='elite-edge-tooltip-info'>\n                {data?.description || `Tipo: ${data?.type || 'default'}`}\n                {data?.weight && <div>Peso: {data.weight}</div>}\n              </div>\n            </div>\n          </foreignObject>\n        )}\n      </g>\n\n      {/* Etiqueta de la arista con tipografía moderna y alta legibilidad */}\n      {label && (\n        <EdgeText\n          x={labelX}\n          y={labelY}\n          label={label}\n          labelStyle={{\n            fontFamily: '\"Inter\", \"Roboto\", sans-serif',\n            fontSize: '11px',\n            fontWeight: '500',\n            fill: 'white',\n            textShadow: '0 1px 2px rgba(0,0,0,0.5)',\n          }}\n          labelBgStyle={{\n            fill: 'rgba(30,30,30,0.7)',\n            fillOpacity: 0.7,\n          }}\n          labelBgBorderRadius={4}\n          labelBgPadding={[4, 6]}\n          className='elite-edge-label'\n        />\n      )}\n    </>\n  );\n};\n\n// Definición de PropTypes para validación y robustez del componente\nEliteEdgeComponent.propTypes = {\n  id: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n  sourceX: PropTypes.number.isRequired,\n  sourceY: PropTypes.number.isRequired,\n  targetX: PropTypes.number.isRequired,\n  targetY: PropTypes.number.isRequired,\n  sourcePosition: PropTypes.string,\n  targetPosition: PropTypes.string,\n  style: PropTypes.object,\n  markerEnd: PropTypes.string,\n  data: PropTypes.object,\n  selected: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  sourceHandle: PropTypes.string,\n  targetHandle: PropTypes.string,\n  className: PropTypes.string,\n  isDragging: PropTypes.bool,\n  lodLevel: PropTypes.string,\n};\n\nEliteEdgeComponent.displayName = 'EliteEdge';\n\nexport default memo(EliteEdgeComponent);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/HistoryControls.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/PerformanceModeButton.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/PerformancePatch.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'createStyles' has too many lines (110). Maximum allowed is 80.",
        "line": 17,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 150,
        "endColumn": 6
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * PerformancePatch.js\n * Mejoras de rendimiento para el modo ultra sin bloquear interacciones\n */\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n// Inicializar cuando el DOM esté listo\nif (typeof document !== 'undefined') {\n  (function () {\n    // Variables globales\n    let styleElement;\n    let unsubscribe;\n    let isUltraPerformanceMode = false;\n\n    // Crear estilos para el modo ultra rendimiento\n    function createStyles() {\n      if (styleElement) return; // Ya existe\n\n      // Crear el elemento de estilo\n      styleElement = document.createElement('style');\n      styleElement.id = 'ultra-performance-styles';\n      styleElement.textContent = `\n      /* Estilos para modo ultra rendimiento */\n      \n      /* Reset de estilos que pueden causar problemas de rendimiento */\n      body.performance-mode-active {\n        overflow: hidden;\n      }\n\n      /* Simplificar elementos de arista para mejor rendimiento */\n      body.performance-mode-active .elite-edge-flow,\n      body.performance-mode-active .elite-edge-flow-secondary,\n      body.performance-mode-active .elite-edge-glow {\n        opacity: 0.8 !important;\n        stroke-width: 2px !important;\n      }\n      \n      /* Asegurar que los bordes sean visibles */\n      body.performance-mode-active .react-flow__edge {\n        opacity: 1 !important;\n        visibility: visible !important;\n        display: block !important;\n        pointer-events: all !important;\n      }\n      \n      /* Asegurar que las conexiones sean visibles */\n      body.performance-mode-active .react-flow__connection {\n        opacity: 1 !important;\n        visibility: visible !important;\n        display: block !important;\n      }\n      \n      /* Estilos base para nodos en modo ultra */\n      body.performance-mode-active .react-flow__node {\n        /* IMPORTANTE: NO forzar transform - dejar que ReactFlow maneje el posicionamiento */\n        /* position: absolute se aplicará automáticamente por ReactFlow */\n        \n        /* Mejorar rendimiento */\n        will-change: transform;\n        /* NO usar contain: content - interfiere con interactividad */\n        backface-visibility: visible;\n        \n        /* NO forzar transition: none - mantener animaciones suaves */\n        /* NO forzar perspective: none - mantener estilo 3D */\n        \n        /* Estilos visuales para asegurar visibilidad */\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        opacity: 1 !important;\n        visibility: visible !important;\n        display: block !important;\n        pointer-events: all !important;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n      \n      /* Estilo para nodos durante el arrastre */\n      body.performance-mode-active .react-flow__node[data-dragging=\"true\"],\n      body.performance-mode-active .react-flow__node.dragging {\n        /* Mejorar rendimiento durante arrastre */\n        will-change: left, top !important;\n        /* Asegurar que esté por encima de otros elementos */\n        z-index: 1000 !important;\n        /* Efecto visual sutil */\n        opacity: 0.9 !important;\n        /* Deshabilitar selección de texto */\n        user-select: none;\n        -webkit-user-select: none;\n        /* Mejorar rendimiento */\n        contain: strict;\n      }\n      \n      /* Estilo para hover en modo ultra - Desactivado, manejado por el componente */\n      body.performance-mode-active .react-flow__node:hover {\n        /* Los estilos de hover ahora se manejan directamente en el componente */\n        /* para evitar conflictos de renderizado */\n      }\n      \n      /* Estilo para nodos seleccionados */\n      body.performance-mode-active .react-flow__node.selected {\n        outline: 2px solid #ff00cc !important;\n        outline-offset: 1px !important;\n        z-index: 10 !important;\n      }\n      \n      /* Contenedor de nodos - NO FORZAR TRANSFORM: NONE */\n      body.performance-mode-active .react-flow__nodes {\n        /* NO forzar position, width, height ni transform */\n        /* Permitir que ReactFlow maneje estos aspectos */\n        \n        /* Optimizaciones de rendimiento que no interfieren con ReactFlow */\n        will-change: transform;\n        -webkit-overflow-scrolling: touch;\n        \n        /* NO usar contain: strict - esto bloquea las transformaciones */\n        \n        /* Asegurar que los eventos pasen a los nodos */\n        pointer-events: none;\n      }\n      \n      /* Contenedor principal - NO FORZAR TRANSFORM: NONE */\n      body.performance-mode-active .react-flow__renderer,\n      body.performance-mode-active .react-flow__pane {\n        /* NO forzar position, width, height ni transform */\n        /* Permitir que ReactFlow maneje estos aspectos */\n        \n        /* Optimizaciones que no interfieren con ReactFlow */\n        will-change: transform;\n        -webkit-overflow-scrolling: touch;\n        \n        /* NO usar contain: strict - esto bloquea las transformaciones */\n        /* NO usar backface-visibility: hidden - puede causar problemas */\n        \n        /* Asegurar que el contenedor no interfiera con los eventos */\n        pointer-events: none;\n      }\n      \n      /* Asegurar que los nodos sean interactivos */\n      body.performance-mode-active .react-flow__node {\n        pointer-events: auto;\n        /* Asegurar que los eventos de puntero funcionen correctamente */\n        touch-action: none;\n        /* Evitar que los hijos generen nuevas capas */\n        transform: none;\n      }\n    `;\n\n      // Agregar los estilos al DOM\n      document.head.append(styleElement);\n    }\n\n    // Eliminar estilos\n    function removeStyles() {\n      // Eliminar los estilos\n      if (styleElement) {\n        styleElement.remove();\n        styleElement = undefined;\n      }\n    }\n\n    // Función para garantizar la visibilidad de los nodos y bordes en modo ultra rendimiento\n    // NO intentamos posicionar los nodos, sólo aseguramos que sean visibles\n    function updateNodePositions() {\n      // Si no estamos en modo ultra, o si hay un arrastre en progreso, salir\n      if (!isUltraPerformanceMode || globalThis.__dragInProgress) return;\n\n      // Obtener los nodos y bordes del store\n      const { nodes, edges } = useFlowStore.getState();\n\n      // Sólo asegurar que los nodos sean visibles, SIN modificar su posición\n      // Esto evita conflictos con el sistema nativo de ReactFlow\n      for (const node of nodes) {\n        const nodeElement = document.querySelector(\n          `.react-flow__node[data-id=\"${node.id}\"]`,\n        );\n        if (nodeElement) {\n          // Asegurar que el nodo es visible\n          nodeElement.style.opacity = '1';\n          nodeElement.style.visibility = 'visible';\n          nodeElement.style.display = 'block';\n        }\n      }\n\n      // Sólo asegurar que los bordes sean visibles\n      for (const edge of edges) {\n        const edgeElement = document.querySelector(\n          `.react-flow__edge[data-id=\"${edge.id}\"]`,\n        );\n        if (edgeElement) {\n          // Asegurar que el borde es visible\n          edgeElement.style.opacity = '1';\n          edgeElement.style.visibility = 'visible';\n          edgeElement.style.display = 'block';\n        }\n      }\n    }\n\n    // Función para manejar cambios en el modo de rendimiento\n    function handlePerformanceModeChange(isUltra) {\n      isUltraPerformanceMode = isUltra;\n\n      if (isUltraPerformanceMode) {\n        document.body.classList.add('performance-mode-active');\n        createStyles();\n        // Actualizar posiciones inmediatamente\n        updateNodePositions();\n      } else {\n        document.body.classList.remove('performance-mode-active');\n        removeStyles();\n      }\n    }\n\n    // Suscribirse a cambios en el store\n    function subscribeToStore() {\n      if (unsubscribe) return; // Ya estamos suscritos\n\n      // Suscribirse a cambios en isUltraMode\n      const unsubscribeUltraMode = useFlowStore.subscribe(\n        (state) => state.isUltraMode,\n        (isUltra) => {\n          if (isUltra !== isUltraPerformanceMode) {\n            handlePerformanceModeChange(isUltra);\n          }\n        },\n        { fireImmediately: true }, // Ejecutar inmediatamente con el estado actual\n      );\n\n      // Suscribirse a cambios en los nodos para actualizar sus posiciones\n      const unsubscribeNodes = useFlowStore.subscribe(\n        (state) => state.nodes,\n        () => {\n          if (isUltraPerformanceMode) {\n            // Solo actualizar si estamos en modo ultra\n            requestAnimationFrame(updateNodePositions);\n          }\n        },\n      );\n\n      // Combinar las funciones de cancelación de suscripción\n      unsubscribe = () => {\n        unsubscribeUltraMode();\n        unsubscribeNodes();\n      };\n    }\n\n    // Inicializar cuando el DOM esté listo\n    function initialize() {\n      // Obtener el estado inicial del store\n      const initialState = useFlowStore.getState();\n      isUltraPerformanceMode = initialState.isUltraMode;\n\n      // Aplicar estilos iniciales si es necesario\n      if (isUltraPerformanceMode) {\n        document.body.classList.add('performance-mode-active');\n        createStyles();\n      }\n\n      // Suscribirse a cambios futuros\n      subscribeToStore();\n    }\n\n    // Iniciar cuando el DOM esté listo\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', initialize);\n    } else {\n      initialize();\n    }\n\n    // Limpiar la suscripción cuando ya no sea necesaria\n    if (globalThis.window !== undefined) {\n      window.addEventListener('beforeunload', () => {\n        if (unsubscribe) {\n          unsubscribe();\n          unsubscribe = undefined;\n        }\n      });\n    }\n  })();\n}\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/RobustEdge.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (145). Maximum allowed is 80.",
        "line": 11,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 183,
        "endColumn": 2
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has missing dependencies: 'sourcePosition' and 'targetPosition'. Either include them or remove the dependency array.",
        "line": 121,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 132,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [id, source, target, sourceX, sourceY, targetX, targetY, edgeStyle, data, backupEdgesToLocalStorage, sourcePosition, targetPosition]",
            "fix": {
              "range": [3211, 3356],
              "text": "[id, source, target, sourceX, sourceY, targetX, targetY, edgeStyle, data, backupEdgesToLocalStorage, sourcePosition, targetPosition]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { memo, useEffect, useState } from 'react';\nimport { getBezierPath, EdgeText } from 'reactflow';\n\nimport { useFlowNodesEdges } from '@/stores/selectors';\n\n/**\n * RobustEdge - Un componente de arista simplificado y robusto para ReactFlow\n * Diseñado para maximizar la visibilidad y persistencia de las aristas\n */\nconst RobustEdge = ({\n  id,\n  source,\n  target,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n  data,\n  selected,\n  label,\n}) => {\n  // Estado para forzar re-renderizado\n  const [, setForceUpdate] = useState(0);\n\n  // Calcular la ruta de la arista\n  const [edgePath, labelX, labelY] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n\n  // Estilos por defecto\n  const defaultStyle = {\n    stroke: '#00e0ff',\n    strokeWidth: 2,\n    strokeOpacity: 0.8,\n  };\n\n  // Combinar estilos\n  const edgeStyle = {\n    ...defaultStyle,\n    ...style,\n    strokeWidth: selected\n      ? (style.strokeWidth || defaultStyle.strokeWidth) + 1\n      : style.strokeWidth || defaultStyle.strokeWidth,\n  };\n\n  // Efecto para forzar visibilidad\n  useEffect(() => {\n    // Forzar un re-renderizado después de montar\n    const timer = setTimeout(() => {\n      setForceUpdate((previous) => previous + 1);\n    }, 100);\n\n    // Escuchar eventos de actualización\n    const handleForceUpdate = () => {\n      setForceUpdate((previous) => previous + 1);\n    };\n\n    document.addEventListener('force-edge-update', handleForceUpdate);\n    document.addEventListener('elite-edge-update-required', handleForceUpdate);\n\n    return () => {\n      clearTimeout(timer);\n      document.removeEventListener('force-edge-update', handleForceUpdate);\n      document.removeEventListener(\n        'elite-edge-update-required',\n        handleForceUpdate,\n      );\n    };\n  }, [id]);\n\n  // Obtener la función para guardar aristas del hook granular\n  const { backupEdgesToLocalStorage } = useFlowNodesEdges();\n\n  // Guardar la arista en localStorage para persistencia\n  useEffect(() => {\n    try {\n      // Solo guardar si tenemos los datos necesarios\n      if (id && source && target) {\n        const plubotId =\n          globalThis.location.search.match(/plubotId=([^&]*)/)?.[1];\n        if (plubotId) {\n          // Crear objeto de arista\n          const edgeData = {\n            id,\n            source,\n            target,\n            sourceX,\n            sourceY,\n            targetX,\n            targetY,\n            sourcePosition,\n            targetPosition,\n            style: edgeStyle,\n            data,\n            sourceOriginal: source,\n            targetOriginal: target,\n          };\n\n          // Usar la función del store para guardar la arista\n          // Esto centraliza la lógica de guardado y asegura consistencia\n          backupEdgesToLocalStorage([edgeData], plubotId);\n\n          // Disparar evento para notificar que se guardó una arista\n          const edgeSavedEvent = new CustomEvent('edge-saved', {\n            detail: { edge: edgeData, plubotId },\n          });\n          document.dispatchEvent(edgeSavedEvent);\n        }\n      }\n    } catch {}\n  }, [\n    id,\n    source,\n    target,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    edgeStyle,\n    data,\n    backupEdgesToLocalStorage,\n  ]);\n\n  return (\n    <>\n      {/* Capa de fondo para mayor área de clic */}\n      <path\n        d={edgePath}\n        stroke='transparent'\n        strokeWidth={10}\n        fill='none'\n        className='robust-edge-background'\n      />\n\n      {/* Arista principal */}\n      <path\n        id={id}\n        d={edgePath}\n        stroke={edgeStyle.stroke}\n        strokeWidth={edgeStyle.strokeWidth}\n        strokeOpacity={edgeStyle.strokeOpacity}\n        fill='none'\n        strokeDasharray={edgeStyle.strokeDasharray}\n        className='robust-edge'\n        markerEnd={markerEnd}\n        style={{\n          zIndex: 5,\n          pointerEvents: 'all',\n        }}\n        data-testid={`rf__edge-${id}`}\n      />\n\n      {/* Etiqueta de la arista */}\n      {label && (\n        <EdgeText\n          x={labelX}\n          y={labelY}\n          label={label}\n          labelStyle={{\n            fill: 'white',\n            fontWeight: 500,\n            fontSize: 12,\n          }}\n          labelBgStyle={{\n            fill: 'rgba(0, 0, 0, 0.7)',\n          }}\n          labelBgPadding={[4, 2]}\n          labelBgBorderRadius={2}\n        />\n      )}\n    </>\n  );\n};\n\nRobustEdge.propTypes = {\n  id: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n  sourceX: PropTypes.number.isRequired,\n  sourceY: PropTypes.number.isRequired,\n  targetX: PropTypes.number.isRequired,\n  targetY: PropTypes.number.isRequired,\n  sourcePosition: PropTypes.string,\n  targetPosition: PropTypes.string,\n  style: PropTypes.object,\n  markerEnd: PropTypes.any,\n  data: PropTypes.object,\n  selected: PropTypes.bool,\n  label: PropTypes.any,\n};\n\nexport default memo(RobustEdge);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/SafeEdgeWrapper.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 18. Maximum allowed is 10.",
        "line": 9,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 50,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 15,
        "column": 34,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 15,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { memo } from 'react';\n\nimport EliteEdge from './EliteEdge';\n\n/**\n * Componente wrapper seguro para EliteEdge\n * Proporciona validación y valores por defecto para evitar errores de referencia\n */\nconst SafeEdgeWrapper = (properties) => {\n  // Asegurar que todas las propiedades requeridas estén disponibles\n  const safeProperties = {\n    // Resto de propiedades que puedan llegar\n    ...properties,\n    // Propiedades básicas con valores por defecto\n    id: properties.id || `edge-${Math.random().toString(36).slice(2, 11)}`,\n    source: properties.source || '',\n    target: properties.target || '',\n    sourceX: properties.sourceX || 0,\n    sourceY: properties.sourceY || 0,\n    targetX: properties.targetX || 0,\n    targetY: properties.targetY || 0,\n    sourcePosition: properties.sourcePosition || 'bottom',\n    targetPosition: properties.targetPosition || 'top',\n    style: properties.style || {},\n    markerEnd: properties.markerEnd || undefined,\n    data: properties.data || {},\n    selected: Boolean(properties.selected),\n    label: properties.label || '',\n    sourceHandle: properties.sourceHandle || undefined,\n    targetHandle: properties.targetHandle || undefined,\n    className: properties.className || '',\n  };\n\n  // Intentar renderizar EliteEdge con propiedades seguras\n  try {\n    return <EliteEdge {...safeProperties} />;\n  } catch {\n    // Renderizar una arista básica en caso de error\n    return (\n      <g>\n        <path\n          d={`M${safeProperties.sourceX},${safeProperties.sourceY} L${safeProperties.targetX},${safeProperties.targetY}`}\n          stroke='#ff00cc'\n          strokeWidth='3'\n          fill='none'\n        />\n      </g>\n    );\n  }\n};\n\nexport default memo(SafeEdgeWrapper);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/SyncButton.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (150). Maximum allowed is 80.",
        "line": 24,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 196,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 24,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 196,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 170,
        "column": 39,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 170,
        "endColumn": 58,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence } from 'framer-motion';\nimport React, { useState, useEffect } from 'react';\n\nimport useSyncService, { getSyncState } from '@/services/syncService';\nimport './SyncButton.css';\n\n// Funciones helper movidas fuera del componente para optimización\nconst getStatusColor = () => {\n  return '#00FF66'; // Verde neón brillante\n};\n\nconst getSyncStatusText = (details) => {\n  if (details.isSyncing) return 'Sincronizando...';\n  if (details.syncStatus === 'success') return 'Sincronizado';\n  if (details.syncStatus === 'error') return 'Error';\n  return 'Listo';\n};\n\n/**\n * Botón de sincronización para el editor de flujos\n * Muestra un indicador visual del estado de sincronización\n * y permite expandir detalles al hacer clic\n */\nconst SyncButton = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [syncDetails, setSyncDetails] = useState();\n  const [statusBubble, setStatusBubble] = useState(); // Estado para la burbuja de notificación\n\n  // Usar el servicio de sincronización\n  const { syncAllPlubots } = useSyncService();\n\n  // Actualizar estado y detalles de sincronización\n  useEffect(() => {\n    setSyncDetails(getSyncState()); // Carga inicial\n\n    const updateInterval = setInterval(() => {\n      setSyncDetails(getSyncState());\n    }, 1000);\n\n    return () => clearInterval(updateInterval);\n  }, []);\n\n  // Manejar clic en el botón\n  const handleClick = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  // Forzar sincronización manual con notificación\n  const handleSync = async (event) => {\n    event.stopPropagation();\n    setStatusBubble({\n      type: 'syncing',\n      message: '⌛ Sincronizando cambios...',\n    });\n\n    try {\n      const result = await syncAllPlubots();\n      const message = result.success\n        ? '✅ Sincronización completada'\n        : '❌ Error de sincronización';\n      setStatusBubble({ type: result.success ? 'success' : 'error', message });\n    } catch (error) {\n      setStatusBubble({\n        type: 'error',\n        message: `❌ Error: ${error.message || 'Error inesperado'}`,\n      });\n    } finally {\n      setTimeout(() => setStatusBubble(undefined), 3000);\n    }\n  };\n\n  // Determinar el icono según el estado\n  const getStatusIcon = () => {\n    if (!syncDetails) return '⏳';\n\n    // Siempre mostrar el checkmark para un diseño más limpio\n    return '✓'; // Checkmark simple y moderno\n  };\n\n  // Si no hay detalles de sincronización, mostrar indicador de carga\n  if (!syncDetails) {\n    return (\n      <button className='sync-control-button loading'>\n        <span className='sync-icon'>⏳</span>\n        <div className='button-tooltip'>Cargando...</div>\n      </button>\n    );\n  }\n\n  return (\n    <>\n      <AnimatePresence>\n        {statusBubble && (\n          <motion.div\n            className='status-bubble'\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 50 }}\n          >\n            <div className='status-bubble-content'>{statusBubble.message}</div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <div className='sync-button-container'>\n        <button\n          className={`sync-control-button ${syncDetails.syncStatus}`}\n          onClick={handleClick}\n          style={{ animation: 'subtle-pulse-green 2s infinite' }}\n        >\n          <span\n            className='sync-icon'\n            style={{\n              animation: syncDetails.isSyncing\n                ? 'spin 1s linear infinite'\n                : 'none',\n              color: getStatusColor(),\n            }}\n          >\n            {getStatusIcon()}\n          </span>\n          <div className='button-tooltip'>Sincronizado</div>\n        </button>\n\n        <AnimatePresence>\n          {isExpanded && (\n            <motion.div\n              className='sync-details-panel'\n              initial={{ opacity: 0, scale: 0.9, x: -10 }}\n              animate={{ opacity: 1, scale: 1, x: 0 }}\n              exit={{ opacity: 0, scale: 0.9, x: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <div className='sync-panel-header'>\n                <h4>Estado de sincronización</h4>\n                <span\n                  className='sync-icon'\n                  style={{\n                    color:\n                      syncDetails.syncStatus === 'synced'\n                        ? '#34A853'\n                        : '#FF5722',\n                  }}\n                >\n                  {syncDetails.syncStatus === 'synced' ? '✓' : '⟳'}\n                </span>\n              </div>\n\n              <div className='sync-details'>\n                <p>\n                  Última sincronización:{' '}\n                  {syncDetails.lastSync\n                    ? new Date(syncDetails.lastSync).toLocaleString()\n                    : 'Nunca'}\n                </p>\n                <p>Estado: {getSyncStatusText(syncDetails)}</p>\n                {syncDetails.syncStatus === 'error' && (\n                  <p className='error-message'>\n                    Error:{' '}\n                    {syncDetails.errorMessage || 'Error de sincronización'}\n                  </p>\n                )}\n              </div>\n\n              {syncDetails.syncErrors.length > 0 && (\n                <div className='sync-errors'>\n                  <h4>Errores ({syncDetails.syncErrors.length}):</h4>\n                  <ul>\n                    {syncDetails.syncErrors.slice(0, 3).map((error, index) => {\n                      // eslint-disable-next-line react/no-array-index-key\n                      return <li key={`${error}-${index}`}>{error}</li>;\n                    })}\n                    {syncDetails.syncErrors.length > 3 && (\n                      <li>...y {syncDetails.syncErrors.length - 3} más</li>\n                    )}\n                  </ul>\n                </div>\n              )}\n\n              <div className='sync-controls'>\n                <button\n                  className='sync-now-btn'\n                  onClick={handleSync}\n                  disabled={syncDetails.isSyncing}\n                >\n                  {syncDetails.isSyncing\n                    ? 'Sincronizando...'\n                    : 'Sincronizar ahora'}\n                </button>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </>\n  );\n};\n\nexport default SyncButton;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/UltraModeManager.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'stopAllAnimations' has a complexity of 14. Maximum allowed is 10.",
        "line": 64,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 134,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 28 to the 15 allowed.",
        "line": 64,
        "column": 17,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 64,
        "endColumn": 34
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 74,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 74,
        "endColumn": 34
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 84,
        "column": 11,
        "nodeType": "ForOfStatement",
        "messageId": "tooDeeply",
        "endLine": 86,
        "endColumn": 12
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 85,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 85,
        "endColumn": 34
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 88,
        "column": 11,
        "nodeType": "ForOfStatement",
        "messageId": "tooDeeply",
        "endLine": 90,
        "endColumn": 12
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 107,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 107,
        "endColumn": 34
      },
      {
        "ruleId": "no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 132,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 132,
        "endColumn": 32
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 152,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 152,
        "endColumn": 34
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 157,
        "column": 11,
        "nodeType": "ForOfStatement",
        "messageId": "tooDeeply",
        "endLine": 159,
        "endColumn": 12
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 158,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 158,
        "endColumn": 34
      },
      {
        "ruleId": "no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 216,
        "column": 3,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 216,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * UltraModeManager.js\n * Sistema de gestión centralizado para el modo Ultra Rendimiento\n * Permite detener todas las animaciones y efectos para maximizar el rendimiento\n */\n\n// Lista de selectores específicos a los que aplicar control de animaciones\nconst ANIMATION_TARGETS = [\n  // ByteAssistant\n  '.ts-byte-assistant',\n  '.ts-byte-image',\n  '.ts-byte-glow',\n  '.ts-byte-hologram',\n  '.ts-byte-minimized',\n  // CustomMiniMap\n  '.ts-custom-minimap-container',\n  '.ts-custom-minimap-container.collapsed',\n  '.ts-custom-minimap-container.expanded',\n  // Botones y controles\n  '.editor-button',\n  '.zoom-control-button',\n  '.sync-control-button',\n  '.editor-controls-container button',\n  // Partículas y fondos\n  '.particles-container',\n  '.background-scene',\n  // Iconos animados\n  '.sync-icon',\n  '.sync-pulse',\n];\n\n// Lista de clases CSS que contienen animaciones\nconst ANIMATION_CLASSES = [\n  'ts-byte-animating',\n  'ts-byte-thinking',\n  'ts-neonPulse',\n  'ts-neonGlow',\n  'pulse',\n  'glow',\n  'fade',\n  'blink',\n  'rotate',\n  'spin',\n  'bounce',\n];\n\n// Lista de propiedades CSS de animación\nconst ANIMATION_PROPERTIES = [\n  'animation',\n  'transition',\n  'animation-duration',\n  'animation-delay',\n  'transition-duration',\n  'transition-delay',\n  'animation-iteration-count',\n  'backdrop-filter',\n  'box-shadow',\n];\n\n/**\n * Busca y detiene todas las animaciones en el DOM\n * @param {boolean} isUltraMode - Indica si el modo ultra está activándose (true) o desactivándose (false)\n */\nexport function stopAllAnimations(isUltraMode) {\n  if (!isUltraMode) return; // Solo hacemos esto cuando activamos modo ultra\n\n  try {\n    // 1. Detener animaciones en elementos específicos usando selectores directos\n    for (const selector of ANIMATION_TARGETS) {\n      const elements = document.querySelectorAll(selector);\n      for (const element of elements) {\n        // Aplicar estilo directamente al elemento\n        for (const property of ANIMATION_PROPERTIES) {\n          element.style[property] = 'none';\n        }\n\n        // Eliminar clases de animación\n        for (const className of ANIMATION_CLASSES) {\n          element.classList.remove(className);\n        }\n\n        // Aplicar a todos los elementos hijos\n        for (const child of element.querySelectorAll('*')) {\n          for (const property of ANIMATION_PROPERTIES) {\n            child.style[property] = 'none';\n          }\n\n          for (const className of ANIMATION_CLASSES) {\n            child.classList.remove(className);\n          }\n        }\n      }\n    }\n\n    // 2. Buscar y detener TODAS las animaciones CSS activas en la página\n    const allAnimatedElements = document.querySelectorAll('*');\n    for (const element of allAnimatedElements) {\n      // Verificar si el elemento tiene alguna animación o transición\n      const computedStyle = globalThis.getComputedStyle(element);\n      const hasAnimation =\n        computedStyle.animation !== 'none' ||\n        computedStyle.transition !== 'none';\n\n      // Si tiene animación, detenerla\n      if (hasAnimation) {\n        for (const property of ANIMATION_PROPERTIES) {\n          element.style[property] = 'none';\n        }\n      }\n    }\n\n    // 3. Detener animaciones de pseudo-elementos (::before, ::after)\n    const style = document.createElement('style');\n    style.id = 'ultra-mode-animation-killer';\n    style.textContent = `\n      body.ultra-mode *,\n      body.ultra-mode *::before,\n      body.ultra-mode *::after {\n        animation: none !important;\n        transition: none !important;\n        /* transform: none !important; <-- REMOVED to allow React Flow to function */\n        animation-duration: 0s !important;\n        transition-duration: 0s !important;\n        animation-delay: 0s !important;\n        transition-delay: 0s !important;\n        animation-iteration-count: 0 !important;\n      }\n    `;\n    document.head.append(style);\n\n    // 4. Forzar un reflow para aplicar cambios inmediatamente\n    document.body.offsetHeight;\n  } catch {}\n}\n\n/**\n * Restaura las animaciones al desactivar el modo ultra\n */\nexport function restoreAnimations() {\n  try {\n    // Eliminar estilos temporales\n    const styleElement = document.querySelector('#ultra-mode-animation-killer');\n    if (styleElement) {\n      styleElement.remove();\n    }\n\n    // Restaurar estilos inline\n    for (const selector of ANIMATION_TARGETS) {\n      const elements = document.querySelectorAll(selector);\n      for (const element of elements) {\n        for (const property of ANIMATION_PROPERTIES) {\n          element.style[property] = '';\n        }\n\n        // Restaurar a los hijos también\n        for (const child of element.querySelectorAll('*')) {\n          for (const property of ANIMATION_PROPERTIES) {\n            child.style[property] = '';\n          }\n        }\n      }\n    }\n  } catch {}\n}\n\n// Clave para almacenar la preferencia del usuario en localStorage\nconst USER_PREFERENCE_KEY = 'plubot_ultra_mode_user_preference';\n\n/**\n * Verifica si el usuario ya ha configurado manualmente el modo ultra\n * @returns {Object|null} La preferencia del usuario o null si no existe\n */\nfunction getUserPreference() {\n  try {\n    const stored = localStorage.getItem(USER_PREFERENCE_KEY);\n    return stored ? JSON.parse(stored) : undefined;\n  } catch {}\n}\n\n/**\n * Guarda la preferencia del usuario en localStorage\n * @param {boolean} enabled - Si el modo ultra está habilitado o no\n */\nfunction saveUserPreference(enabled) {\n  try {\n    const preference = {\n      enabled,\n      timestamp: Date.now(),\n      userSet: true,\n    };\n    localStorage.setItem(USER_PREFERENCE_KEY, JSON.stringify(preference));\n  } catch {}\n}\n\n/**\n * Activa o desactiva el modo ultra a nivel de DOM.\n * La lógica de estado se gestiona en use-flow-store.\n * @param {boolean} enable - Indica si activar (true) o desactivar (false) el modo ultra.\n * @param {boolean} [userInitiated=false] - Indica si el cambio fue iniciado por el usuario para guardar su preferencia.\n */\nexport function toggleUltraMode(enable, userInitiated = false) {\n  // Si el cambio fue iniciado por el usuario, guardar su preferencia.\n  if (userInitiated) {\n    saveUserPreference(enable);\n  }\n\n  if (enable) {\n    document.body.classList.add('ultra-mode');\n    stopAllAnimations(true);\n  } else {\n    document.body.classList.remove('ultra-mode');\n    restoreAnimations();\n  }\n\n  // Forzar reflow para que los cambios se apliquen de inmediato.\n  document.body.offsetHeight;\n}\n\nconst UltraModeManager = {\n  stopAllAnimations,\n  restoreAnimations,\n  toggleUltraMode,\n};\n\nexport default UltraModeManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/UltraOptimizedEdge.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 10,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 110,
        "endColumn": 2
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'path' is already declared in the upper scope on line 29 column 10.",
        "line": 30,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 30,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport React, { memo, useMemo } from 'react';\nimport { getBezierPath } from 'reactflow';\n\n/**\n * UltraOptimizedEdge - Versión ultra optimizada de un borde para el modo de alto rendimiento\n * @version 1.0.0\n * @author Cascade AI\n */\nconst UltraOptimizedEdge = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  markerEnd,\n  selected,\n  source,\n  target,\n  sourceHandleId,\n  targetHandleId,\n  interactionWidth = 20,\n  ...rest\n}) => {\n  // Calcular la ruta del borde\n  const [path] = useMemo(() => {\n    const [path, labelX, labelY] = getBezierPath({\n      sourceX,\n      sourceY,\n      sourcePosition,\n      targetX,\n      targetY,\n      targetPosition,\n    });\n\n    return [path, labelX, labelY];\n  }, [sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition]);\n\n  // Estilo del borde\n  const edgeStyle = useMemo(\n    () => ({\n      stroke: selected ? '#2563eb' : '#94a3b8',\n      strokeWidth: selected ? 2 : 1,\n      strokeDasharray: 'none',\n      fill: 'none',\n      ...style,\n    }),\n    [selected, style],\n  );\n\n  // Área de interacción más grande para facilitar la selección\n  const interactionPath = useMemo(() => {\n    // Crear un área de interacción más ancha alrededor del borde\n    return `\n      M${sourceX},${sourceY}\n      L${targetX},${targetY}\n      L${targetX + interactionWidth},${targetY + interactionWidth}\n      L${sourceX + interactionWidth},${sourceY + interactionWidth}\n      Z\n    `;\n  }, [sourceX, sourceY, targetX, targetY, interactionWidth]);\n\n  return (\n    <>\n      {/* Borde visible */}\n      <path\n        id={id}\n        className='react-flow__edge-path'\n        d={path}\n        style={edgeStyle}\n        markerEnd={markerEnd}\n      />\n\n      {/* Área de interacción invisible pero más grande */}\n      <path\n        className='react-flow__edge-interaction'\n        d={interactionPath}\n        fill='none'\n        stroke='transparent'\n        strokeWidth={interactionWidth}\n        pointerEvents='stroke'\n      />\n\n      {/* Punto de conexión de origen */}\n      <circle\n        cx={sourceX}\n        cy={sourceY}\n        r={3}\n        fill='#fff'\n        stroke='#2563eb'\n        strokeWidth={1.5}\n        className='react-flow__edge-source'\n      />\n\n      {/* Punto de conexión de destino */}\n      <circle\n        cx={targetX}\n        cy={targetY}\n        r={3}\n        fill='#fff'\n        stroke='#2563eb'\n        strokeWidth={1.5}\n        className='react-flow__edge-target'\n      />\n    </>\n  );\n};\n\nUltraOptimizedEdge.propTypes = {\n  id: PropTypes.string.isRequired,\n  sourceX: PropTypes.number.isRequired,\n  sourceY: PropTypes.number.isRequired,\n  targetX: PropTypes.number.isRequired,\n  targetY: PropTypes.number.isRequired,\n  sourcePosition: PropTypes.string,\n  targetPosition: PropTypes.string,\n  style: PropTypes.object,\n  markerEnd: PropTypes.string,\n  selected: PropTypes.bool,\n  source: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n  sourceHandleId: PropTypes.string,\n  targetHandleId: PropTypes.string,\n  interactionWidth: PropTypes.number,\n};\n\nUltraOptimizedEdge.displayName = 'UltraOptimizedEdge';\n\n// Usar React.memo para evitar re-renderizados innecesarios\nexport default memo(\n  UltraOptimizedEdge,\n  (previousProperties, nextProperties) => {\n    // Solo volver a renderizar si estas propiedades cambian\n    return (\n      previousProperties.sourceX === nextProperties.sourceX &&\n      previousProperties.sourceY === nextProperties.sourceY &&\n      previousProperties.targetX === nextProperties.targetX &&\n      previousProperties.targetY === nextProperties.targetY &&\n      previousProperties.sourcePosition === nextProperties.sourcePosition &&\n      previousProperties.targetPosition === nextProperties.targetPosition &&\n      previousProperties.selected === nextProperties.selected &&\n      previousProperties.style === nextProperties.style\n    );\n  },\n);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/UltraOptimizedNode.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (231). Maximum allowed is 80.",
        "line": 16,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 277,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 23. Maximum allowed is 10.",
        "line": 16,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 277,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 99,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 99,
        "endColumn": 30
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 100,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 100,
        "endColumn": 44
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (105). Maximum allowed is 80.",
        "line": 115,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 222,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 23. Maximum allowed is 10.",
        "line": 115,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 222,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport React, { memo, useRef, useState, useMemo, useCallback } from 'react';\nimport { Handle, Position } from 'reactflow';\n\nimport useFlowStore from '@/stores/use-flow-store';\n// NO IMPORTAR ESTILOS - Para evitar conflictos\n// COMENTARIO: Este archivo fue la causa del problema del rectángulo azul\n// y los problemas de posicionamiento. Ahora es solo un componente vacío\n// que no afecta el renderizado.\n\n/**\n * UltraOptimizedNode - Versión ultra optimizada de un nodo para el modo de alto rendimiento\n * @version 1.0.0\n * @author Cascade AI\n */\nconst UltraOptimizedNode = ({\n  id,\n  data = {},\n  type = 'default',\n  selected = false,\n  isConnectable = true,\n  xPos = 0,\n  yPos = 0,\n  zIndex = 0,\n  targetPosition = Position.Top,\n  sourcePosition = Position.Bottom,\n  dragging, // Incluimos esta propiedad pero no la pasamos a props del DOM\n  dragHandle, // Incluimos esta propiedad pero no la pasamos a props del DOM\n}) => {\n  // Obtener el estado del modo ultra del store\n  const isUltraMode = useFlowStore((state) => state.isUltraMode);\n\n  // Referencia al nodo DOM\n  const nodeReference = useRef(null);\n\n  // Estado para manejar el hover\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Manejadores de eventos de hover optimizados\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true);\n    if (!nodeReference.current) return;\n\n    const node = nodeReference.current;\n    if (isUltraMode) {\n      node.style.borderColor = '#2563eb';\n      node.style.boxShadow = '0 0 0 1px rgba(37, 99, 235, 0.5)';\n      node.style.zIndex = '20';\n    } else {\n      node.classList.add('hover');\n    }\n  }, [isUltraMode]);\n\n  const nodeZIndex = useMemo(() => {\n    if (selected) {\n      return 10;\n    }\n    return isUltraMode ? 1 : undefined;\n  }, [selected, isUltraMode]);\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false);\n    if (!nodeReference.current) return;\n\n    const node = nodeReference.current;\n    if (isUltraMode) {\n      node.style.borderColor = selected ? '#2563eb' : '#94a3b8';\n      node.style.boxShadow = 'none';\n      node.style.zIndex = selected ? '10' : '1';\n    } else {\n      node.classList.remove('hover');\n    }\n  }, [isUltraMode, selected]);\n\n  // Determinar la clase CSS basada en el tipo de nodo\n  const nodeClass = useMemo(() => {\n    // Mapeo directo de tipos a sus clases CSS originales\n    const nodeTypeMapping = {\n      start: 'start-node',\n      end: 'end-node',\n      message: 'message-node',\n      decision: 'decision-node',\n      action: 'action-node',\n      option: 'option-node',\n      HTTP_REQUEST_NODE: 'httprequest-node',\n      WEBHOOK_NODE: 'webhook-node',\n      DATABASE_NODE: 'database-node',\n      AI_NODE: 'ai-node',\n      NLP_NODE: 'nlp-node',\n      COMPLEX_CONDITION_NODE: 'complex-condition-node',\n      POWER_NODE: 'power-node',\n      default: 'message-node',\n      defaultNode: 'message-node',\n    };\n\n    let nodeTypeClass;\n\n    // Usar el mapeo existente si existe\n    if (nodeTypeMapping[type]) {\n      nodeTypeClass = nodeTypeMapping[type];\n    } else {\n      // Si no existe en el mapeo, intentar convertir el tipo a un formato válido\n      try {\n        nodeTypeClass = `${type.toLowerCase().replaceAll(/[_\\s]+/g, '-')}-node`;\n      } catch {\n        // Si hay cualquier error (tipo nulo, indefinido, etc), usar un tipo por defecto\n        nodeTypeClass = 'message-node';\n      }\n    }\n\n    return `react-flow__node ${nodeTypeClass} ${selected ? 'selected' : ''} ${isHovered ? 'hover' : ''}`;\n  }, [type, selected, isHovered]);\n\n  // Renderizar el contenido del nodo basado en el tipo\n  const renderNodeContent = useMemo(() => {\n    switch (type) {\n      case 'start': {\n        return (\n          <div className='node-content start-node-content'>\n            <div className='node-title'>Inicio</div>\n            <div className='node-description'>\n              Flujo: {data.flowName || 'Sin nombre'}\n            </div>\n          </div>\n        );\n      }\n      case 'end': {\n        return (\n          <div className='node-content end-node-content'>\n            <div className='node-title'>Fin</div>\n            <div className='node-description'>Finalizar flujo</div>\n          </div>\n        );\n      }\n      case 'message': {\n        return (\n          <div className='node-content message-node-content'>\n            <div className='node-title'>Mensaje</div>\n            <div className='node-description'>\n              {data.message?.slice(0, 30) || 'Nuevo mensaje'}...\n            </div>\n          </div>\n        );\n      }\n      case 'decision': {\n        return (\n          <div className='node-content decision-node-content'>\n            <div className='node-title'>Decisión</div>\n            <div className='node-description'>\n              {data.condition || 'Sin condición'}\n            </div>\n          </div>\n        );\n      }\n      case 'action': {\n        return (\n          <div className='node-content action-node-content'>\n            <div className='node-title'>Acción</div>\n            <div className='node-description'>\n              {data.action || 'Nueva acción'}\n            </div>\n          </div>\n        );\n      }\n      case 'option': {\n        return (\n          <div className='node-content option-node-content'>\n            <div className='node-title'>Opción</div>\n            <div className='node-description'>\n              {data.option || 'Nueva opción'}\n            </div>\n          </div>\n        );\n      }\n      case 'HTTP_REQUEST_NODE': {\n        return (\n          <div className='node-content httprequest-node-content'>\n            <div className='node-title'>HTTP Request</div>\n            <div className='node-description'>\n              {data.url || 'Nueva petición HTTP'}\n            </div>\n          </div>\n        );\n      }\n      case 'POWER_NODE': {\n        return (\n          <div className='node-content power-node-content'>\n            <div className='node-title'>Power Node</div>\n            <div className='node-description'>\n              {data.name || 'Nodo Avanzado'}\n            </div>\n          </div>\n        );\n      }\n      case 'default':\n      case 'defaultNode': {\n        return (\n          <div className='node-content message-node-content'>\n            <div className='node-title'>Nodo Base</div>\n            <div className='node-description'>{data.label || 'Nodo Base'}</div>\n          </div>\n        );\n      }\n\n      default: {\n        // Caso por defecto mejorado para usar un estilo de alguna clase existente\n        const cssType = type\n          ? type.toLowerCase().replaceAll(/[_\\s]+/g, '-')\n          : 'message';\n        const displayType = type ? type.replaceAll(/[_\\s]+/g, ' ') : 'Nodo';\n\n        return (\n          <div className={`node-content ${cssType}-node-content`}>\n            <div className='node-title'>{displayType}</div>\n            <div className='node-description'>\n              {data.label || `${displayType} ${id.slice(0, 6)}`}\n            </div>\n          </div>\n        );\n      }\n    }\n  }, [type, data, id]);\n\n  return (\n    <div\n      ref={nodeReference}\n      className={nodeClass}\n      style={{\n        // Usar estilos específicos para cada modo y evitar elementos fantasma\n        transform: isUltraMode ? `translate(${xPos}px, ${yPos}px)` : undefined,\n        position: isUltraMode ? 'absolute' : undefined,\n        zIndex: nodeZIndex,\n        transition: isUltraMode ? 'none' : undefined,\n        willChange: isUltraMode ? 'transform' : undefined,\n        // Evitar renderizado de elementos innecesarios\n        pointerEvents: 'all',\n        userSelect: 'none',\n        // Eliminar estilo adicional que pueda causar el recuadro fantasma\n        outlineColor: 'transparent',\n        outlineWidth: 0,\n        outline: 'none',\n      }}\n      data-id={id}\n      data-type={type}\n      data-selected={selected.toString()}\n      data-testid={`flow-node-${type}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Handle\n        type='target'\n        position={targetPosition}\n        isConnectable={Boolean(isConnectable)}\n        className={`node-handle target-handle ${type && typeof type === 'string' ? type.toLowerCase().replaceAll(/[_\\s]+/g, '-') : 'default'}-target-handle`}\n        style={{\n          opacity: isUltraMode ? 0.5 : 1,\n          transition: isUltraMode ? 'none' : undefined,\n          pointerEvents: 'all',\n        }}\n      />\n\n      <div className='node-content-container'>{renderNodeContent}</div>\n\n      <Handle\n        type='source'\n        position={sourcePosition}\n        isConnectable={Boolean(isConnectable)}\n        className={`node-handle source-handle ${type && typeof type === 'string' ? type.toLowerCase().replaceAll(/[_\\s]+/g, '-') : 'default'}-source-handle ${selected ? 'selected' : ''}`}\n        style={{\n          opacity: isUltraMode ? 0.5 : 1,\n          transition: isUltraMode ? 'none' : undefined,\n          pointerEvents: 'all',\n        }}\n      />\n    </div>\n  );\n};\n\nUltraOptimizedNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  data: PropTypes.object,\n  type: PropTypes.string,\n  selected: PropTypes.bool,\n  isConnectable: PropTypes.bool,\n  xPos: PropTypes.number,\n  yPos: PropTypes.number,\n  zIndex: PropTypes.number,\n  targetPosition: PropTypes.string,\n  sourcePosition: PropTypes.string,\n  dragging: PropTypes.bool,\n  dragHandle: PropTypes.string,\n};\n\nUltraOptimizedNode.displayName = 'UltraOptimizedNode';\n\n// Función de comparación optimizada\nconst areEqual = (previousProperties, nextProperties) => {\n  // Solo volver a renderizar si estas propiedades clave cambian\n  return (\n    previousProperties.id === nextProperties.id &&\n    previousProperties.selected === nextProperties.selected &&\n    previousProperties.data === nextProperties.data &&\n    previousProperties.type === nextProperties.type &&\n    previousProperties.xPos === nextProperties.xPos &&\n    previousProperties.yPos === nextProperties.yPos &&\n    previousProperties.zIndex === nextProperties.zIndex\n  );\n};\n\n// Usar React.memo con la función de comparación personalizada\nexport default memo(UltraOptimizedNode, areEqual);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/ZoomControls.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/ui/minimap-sanitizer.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/cleanupEdges.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/edge-path-sanitizer.js",
    "messages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Function 'patchedGetBezierPath' has too many parameters (8). Maximum allowed is 3.",
        "line": 47,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "exceed",
        "endLine": 47,
        "endColumn": 63
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * edge-path-sanitizer.js\n * Utilidad para sanitizar los paths SVG de las aristas en ReactFlow\n * y evitar errores de tipo \"Problem parsing d=...\"\n */\n\n/**\n * Corrige los valores no válidos (NaN, Infinity) en las coordenadas de las aristas\n * @param {Object} coords - Coordenadas con posibles valores no válidos\n * @returns {Object} - Coordenadas sanitizadas\n */\nexport const sanitizeCoordinates = (coords) => {\n  // Si las coordenadas son undefined o null, devolver un objeto vacío\n  if (!coords) return { x: 0, y: 0 };\n\n  // Crear un nuevo objeto para evitar modificar el original\n  const sanitized = { ...coords };\n\n  // Sanitizar la coordenada x\n  if (Number.isNaN(sanitized.x) || !Number.isFinite(sanitized.x)) {\n    sanitized.x = 0;\n  }\n\n  // Sanitizar la coordenada y\n  if (Number.isNaN(sanitized.y) || !Number.isFinite(sanitized.y)) {\n    sanitized.y = 0;\n  }\n\n  return sanitized;\n};\n\n/**\n * Parcha globalmente el método bezierEdge de ReactFlow para evitar errores NaN\n * Esta función debe llamarse al inicio de la aplicación\n */\nexport const patchReactFlowEdgePaths = () => {\n  try {\n    // Solo ejecutar en entorno de navegador\n    if (globalThis.window === undefined) return;\n\n    // Verificar si ya aplicamos el parche\n    if (globalThis.__reactFlowEdgePathsPatched) return;\n\n    // Sobrescribir la función getBezierPath para sanitizar las coordenadas\n    const originalGetBezierPath = globalThis.getBezierPath;\n    if (typeof originalGetBezierPath === 'function') {\n      globalThis.getBezierPath = function patchedGetBezierPath(\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        centerX,\n        centerY,\n      ) {\n        // Sanitizar todas las coordenadas numéricas antes de pasarlas a la función original\n        const safeSourceX = Number.isNaN(sourceX) ? 0 : sourceX;\n        const safeSourceY = Number.isNaN(sourceY) ? 0 : sourceY;\n        const safeTargetX = Number.isNaN(targetX) ? 0 : targetX;\n        const safeTargetY = Number.isNaN(targetY) ? 0 : targetY;\n        const safeCenterX = Number.isNaN(centerX) ? 0 : centerX;\n        const safeCenterY = Number.isNaN(centerY) ? 0 : centerY;\n\n        return originalGetBezierPath(\n          safeSourceX,\n          safeSourceY,\n          sourcePosition,\n          safeTargetX,\n          safeTargetY,\n          targetPosition,\n          safeCenterX,\n          safeCenterY,\n        );\n      };\n    }\n\n    // Marcar como parcheado para evitar aplicar múltiples veces\n    globalThis.__reactFlowEdgePathsPatched = true;\n  } catch {}\n};\n\n/**\n * Sanitiza el path SVG de una arista para evitar valores NaN\n * @param {string} path - Path SVG original\n * @returns {string} - Path SVG sanitizado\n */\nexport const sanitizeSvgPath = (path) => {\n  if (!path) return '';\n\n  // Reemplazar valores NaN por 0\n  return path.replaceAll('NaN', '0');\n};\n\n/**\n * Hook para corregir los paths de aristas en ReactFlow\n * Se puede usar en cualquier componente que renderice aristas\n */\nexport const useEdgePathSanitizer = () => {\n  // Aplicar el parche global solo una vez\n  patchReactFlowEdgePaths();\n\n  return {\n    sanitizeCoordinates,\n    sanitizeSvgPath,\n  };\n};\n\nexport default useEdgePathSanitizer;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/edgeFixUtility.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/edgeRecoveryUtility.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 16,
        "column": 45,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 74,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.",
        "line": 16,
        "column": 56,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 16,
        "endColumn": 58
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 50,
        "column": 11,
        "nodeType": "IfStatement",
        "messageId": "tooDeeply",
        "endLine": 52,
        "endColumn": 12
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 101,
        "column": 39,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 102,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [3155, 3162], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 106,
        "column": 45,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 107,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [3239, 3244], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 151,
        "column": 22,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 152,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [4839, 4848], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 156,
        "column": 47,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 157,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [4931, 4938], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 234,
        "column": 12,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 235,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": { "type": "block" },
            "fix": { "range": [7242, 7247], "text": " /* empty */ " },
            "desc": "Add comment inside empty block statement."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidades para la recuperación y persistencia de aristas en ReactFlow\n * Diseñado para resolver el problema de aristas que desaparecen\n */\nimport { fixAllEdgeHandles, nodesExistInDOM } from './handleFixer';\n\n/**\n * Recupera aristas desde localStorage usando múltiples formatos de clave\n * @param {string} plubotId - ID del plubot\n * @returns {Array} - Aristas recuperadas o array vacío\n */\n// Variable para controlar la frecuencia de recuperación\nlet lastRecoveryAttempt = 0;\nconst recoveryThrottleMs = 60_000; // Limitar a una recuperación cada 60 segundos\n\nexport const recoverEdgesFromLocalStorage = (plubotId) => {\n  if (!plubotId) return [];\n\n  // Limitar la frecuencia de recuperación\n  const now = Date.now();\n  if (now - lastRecoveryAttempt < recoveryThrottleMs) {\n    return [];\n  }\n\n  lastRecoveryAttempt = now;\n\n  try {\n    // Intentar primero el formato estándar de localStorage\n    let recoveredEdges = [];\n\n    // Probar primero con la clave genérica de respaldo\n    const genericStoredEdges = localStorage.getItem('plubot-flow-edges');\n    if (genericStoredEdges) {\n      try {\n        const parsedEdges = JSON.parse(genericStoredEdges);\n        if (Array.isArray(parsedEdges) && parsedEdges.length > 0) {\n          recoveredEdges = parsedEdges;\n        }\n      } catch {}\n    }\n\n    // Si no se encontraron aristas, intentar con la clave específica del plubot\n    if (recoveredEdges.length === 0) {\n      const keyFormat = `plubot-edges-${plubotId}`;\n      const storedEdges = localStorage.getItem(keyFormat);\n\n      if (storedEdges) {\n        try {\n          const parsedEdges = JSON.parse(storedEdges);\n          if (Array.isArray(parsedEdges) && parsedEdges.length > 0) {\n            recoveredEdges = parsedEdges;\n          }\n        } catch {}\n      }\n    }\n\n    // Si se encontraron aristas, filtrarlas y corregir sus handles\n    if (recoveredEdges.length > 0) {\n      // Filtrar aristas válidas (que tengan id, source y target)\n      const filteredEdges = recoveredEdges.filter(\n        (edge) => edge && edge.id && edge.source && edge.target,\n      );\n\n      // Corregir los handles de las aristas filtradas\n      const fixedEdges = fixAllEdgeHandles(filteredEdges);\n\n      return fixedEdges;\n    }\n\n    return [];\n  } catch {\n    return [];\n  }\n};\n\n/**\n * Guarda aristas en localStorage usando múltiples formatos de clave para mayor compatibilidad\n * @param {string} plubotId - ID del plubot\n * @param {Array} edges - Aristas a guardar\n */\n// Variable para controlar la frecuencia de guardado\nlet lastSaveAttempt = 0;\nconst saveThrottleMs = 10_000; // Limitar a un guardado cada 10 segundos\n\nexport const saveEdgesToLocalStorage = (plubotId, edges) => {\n  if (!plubotId || !edges || !Array.isArray(edges)) return;\n\n  // Limitar la frecuencia de guardado\n  const now = Date.now();\n  if (now - lastSaveAttempt < saveThrottleMs) {\n    // No mostrar mensaje para evitar spam en la consola\n    return;\n  }\n\n  lastSaveAttempt = now;\n\n  try {\n    // Filtrar aristas cuyos nodos no existen en el DOM\n    const validEdges = edges.filter((edge) => {\n      const exists = nodesExistInDOM(edge);\n      if (!exists && edge && edge.id) {\n      }\n      return exists;\n    });\n\n    if (validEdges.length !== edges.length) {\n    }\n\n    // Corregir los handles de las aristas válidas antes de guardarlas\n    const fixedEdges = fixAllEdgeHandles(validEdges);\n\n    // Convertir a JSON\n    const edgesJSON = JSON.stringify(fixedEdges);\n\n    // Guardar en ambos formatos para mayor compatibilidad\n    localStorage.setItem(`plubot-edges-${plubotId}`, edgesJSON);\n    localStorage.setItem('plubot-flow-edges', edgesJSON);\n    localStorage.setItem('plubot-flow-edges-timestamp', Date.now().toString());\n  } catch {\n    // En caso de error con la corrección, intentar guardar las aristas originales\n    try {\n      const edgesJSON = JSON.stringify(edges);\n      localStorage.setItem(`plubot-edges-${plubotId}`, edgesJSON);\n    } catch {}\n  }\n};\n\n/**\n * Fuerza la actualización visual de las aristas\n */\n// Variable para controlar la frecuencia de actualizaciones visuales\nlet lastVisualUpdate = 0;\nconst visualUpdateThrottleMs = 15_000; // Limitar a una actualización cada 15 segundos\n\nexport const forceEdgeVisualUpdate = (edges) => {\n  // Limitar la frecuencia de actualizaciones\n  const now = Date.now();\n  if (now - lastVisualUpdate < visualUpdateThrottleMs) {\n    return; // Evitar actualizaciones demasiado frecuentes\n  }\n\n  lastVisualUpdate = now;\n\n  // Si se proporcionaron aristas, filtrar las válidas y corregir sus handles antes de emitir el evento\n  let fixedHandles = false;\n  if (edges && Array.isArray(edges) && edges.length > 0) {\n    try {\n      // Filtrar aristas cuyos nodos no existen en el DOM\n      const validEdges = edges.filter((edge) => {\n        const exists = nodesExistInDOM(edge);\n        if (!exists) {\n        }\n        return exists;\n      });\n\n      if (validEdges.length !== edges.length) {\n      }\n\n      // Intentar corregir los handles de las aristas válidas\n      const fixedEdges = fixAllEdgeHandles(validEdges);\n      fixedHandles = true;\n\n      // Si hay diferencias, emitir un evento para actualizar las aristas en el estado\n      if (JSON.stringify(fixedEdges) !== JSON.stringify(edges)) {\n        document.dispatchEvent(\n          new CustomEvent('edges-fixed', {\n            detail: {\n              edges: fixedEdges,\n              timestamp: now,\n              validEdgesOnly: true,\n            },\n          }),\n        );\n      }\n    } catch {}\n  }\n\n  // Emitir un evento para EliteEdge\n  document.dispatchEvent(\n    new CustomEvent('elite-edge-update-required', {\n      detail: {\n        allEdges: true,\n        timestamp: now,\n        forced: true,\n        fixedHandles,\n      },\n    }),\n  );\n\n  // Forzar un repintado del viewport con una ligera transformación\n  // pero solo una vez cada 5 segundos\n  setTimeout(() => {\n    const reactFlowViewport = document.querySelector('.react-flow__viewport');\n    if (reactFlowViewport) {\n      const { transform } = reactFlowViewport.style;\n      if (transform) {\n        // Aplicar una transformación mínima para forzar repintado\n        reactFlowViewport.style.transform = `${transform} scale(0.9999)`;\n        setTimeout(() => {\n          reactFlowViewport.style.transform = transform;\n        }, 50);\n      }\n    }\n  }, 100);\n};\n\n/**\n * Restaura las aristas desde localStorage y las aplica al estado\n * @param {string} plubotId - ID del plubot\n * @param {Function} setEdges - Función para establecer las aristas\n */\n// Variable para controlar la frecuencia de restauración\nlet lastRestoreAttempt = 0;\nconst restoreThrottleMs = 30_000; // Limitar a una restauración cada 30 segundos\n\nexport const restoreAndApplyEdges = (plubotId, setEdges) => {\n  // Limitar la frecuencia de restauración\n  const now = Date.now();\n  if (now - lastRestoreAttempt < restoreThrottleMs) {\n    return false;\n  }\n\n  lastRestoreAttempt = now;\n\n  const recoveredEdges = recoverEdgesFromLocalStorage(plubotId);\n\n  if (recoveredEdges.length > 0) {\n    // Verificar si setEdges está disponible\n    if (setEdges) {\n      // Usar un timeout para dar tiempo al sistema a estabilizarse\n      setTimeout(() => {\n        setEdges(recoveredEdges);\n      }, 100);\n    } else {\n    }\n\n    return true;\n  }\n\n  return false;\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/edgeSyncUtility.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/edgeTypeFixUtility.js",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 49,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 49,
        "endColumn": 41
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 50,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 50,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidad para solucionar el problema con el campo edge_type en las aristas\n *\n * El backend muestra el error: 'FlowEdge' object has no attribute 'edge_type'\n * Esta utilidad elimina el campo edge_type de las aristas antes de enviarlas al backend\n * y asegura que el campo type esté presente\n */\n\n/**\n * Prepara las aristas para el backend eliminando el campo edge_type que causa error\n * @param {Array} edges - Aristas a preparar\n * @returns {Array} - Aristas preparadas sin el campo edge_type\n */\nexport const prepareEdgesForBackend = (edges) => {\n  if (!edges || !Array.isArray(edges)) return [];\n\n  return edges.map((edge) => {\n    // Crear una copia sin el campo edge_type\n    const { edge_type, ...edgeWithoutEdgeType } = edge;\n\n    // Asegurarse de que type esté presente (el backend usará este campo)\n    return {\n      ...edgeWithoutEdgeType,\n      type: edge.type || 'default',\n      // Asegurarse de que source y target sean strings\n      source: String(edge.source),\n      target: String(edge.target),\n      // Mantener los IDs originales para futuras operaciones\n      sourceOriginal: edge.sourceOriginal || edge.source,\n      targetOriginal: edge.targetOriginal || edge.target,\n    };\n  });\n};\n\n/**\n * Verifica si las aristas son válidas (tienen source y target)\n * @param {Array} edges - Aristas a verificar\n * @param {Object} nodeMap - Mapa de nodos para verificar que existen\n * @returns {Array} - Aristas válidas\n */\nexport const validateEdges = (edges, nodeMap = {}) => {\n  if (!edges || !Array.isArray(edges)) return [];\n\n  return edges.filter((edge) => {\n    // Verificar que source y target existen\n    const source = String(edge.source);\n    const target = String(edge.target);\n\n    const sourceExists = nodeMap[source];\n    const targetExists = nodeMap[target];\n\n    return sourceExists && targetExists;\n  });\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/ensure-node-interaction.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/fix-node-positions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flow-extents.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flow-sanitizer.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flowCacheManager.js",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 45,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 45,
        "endColumn": 20
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 55,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 55,
        "endColumn": 23
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 55,
        "column": 43,
        "nodeType": "MemberExpression",
        "endLine": 55,
        "endColumn": 53
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 56,
        "column": 18,
        "nodeType": "MemberExpression",
        "endLine": 56,
        "endColumn": 28
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 80,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 80,
        "endColumn": 38
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 87,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 87,
        "endColumn": 29
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 19. Maximum allowed is 10.",
        "line": 154,
        "column": 45,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 209,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
        "line": 154,
        "column": 48,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 154,
        "endColumn": 50
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 177,
        "column": 29,
        "nodeType": "MemberExpression",
        "endLine": 177,
        "endColumn": 53
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 178,
        "column": 29,
        "nodeType": "MemberExpression",
        "endLine": 178,
        "endColumn": 73
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sistema de cachu00e9 inteligente para operaciones de flujo\n * Mejora significativamente el rendimiento de carga y guardado\n * 1. Guarda informaciu00f3n de posicionamiento de nodos para reutilizarla\n * 2. Implementa un sistema de caducidad para datos antiguos\n * 3. Reduce operaciones de guardado redundantes\n */\n\nconst CACHE_VERSION = '1.0.0';\nconst CACHE_EXPIRY = 7 * 24 * 60 * 60 * 1000; // 7 du00edas en milisegundos\nconst POSITION_CACHE_KEY = 'plubot_node_positions_cache';\nconst FLOW_SAVE_DEBOUNCE = 2000; // 2 segundos de debounce para guardar\nconst FLOW_SIZE_THRESHOLD = 20; // Umbral de nodos para activar cacheo\n\n/**\n * Gestiona el cachu00e9 de posiciones de nodos\n * Esto evita que los nodos \"salten\" al cargar un flujo guardado\n */\nexport const nodePositionCache = {\n  /**\n   * Guarda las posiciones de los nodos en cache\n   * @param {string} flowId - ID del flujo\n   * @param {Array} nodes - Array de nodos con posiciones\n   */\n  savePositions: (flowId, nodes) => {\n    if (!flowId || !nodes || nodes.length < FLOW_SIZE_THRESHOLD) return;\n\n    try {\n      // Leer cache existente\n      const cachedData = localStorage.getItem(POSITION_CACHE_KEY) || '{}';\n      const cache = JSON.parse(cachedData);\n\n      // Extraer solo los datos relevantes de posicionamiento de cada nodo\n      const positionData = nodes.map((node) => ({\n        id: node.id,\n        type: node.type,\n        position: node.position,\n        // Guardar algunos datos de estilo pero no el contenido completo\n        style: node.style\n          ? { width: node.style.width, height: node.style.height }\n          : undefined,\n      }));\n\n      // Actualizar cache con timestamp para control de caducidad\n      cache[flowId] = {\n        timestamp: Date.now(),\n        version: CACHE_VERSION,\n        nodeCount: nodes.length,\n        positions: positionData,\n      };\n\n      // Limpiar entradas antiguas (mu00e1s de 7 du00edas)\n      const now = Date.now();\n      for (const key of Object.keys(cache)) {\n        if (cache[key].timestamp && now - cache[key].timestamp > CACHE_EXPIRY) {\n          delete cache[key];\n        }\n      }\n\n      // Guardar cache actualizado\n      localStorage.setItem(POSITION_CACHE_KEY, JSON.stringify(cache));\n    } catch {\n      // No se pudo guardar en caché, continuar silenciosamente.\n    }\n  },\n\n  /**\n   * Recupera las posiciones de nodos guardadas\n   * @param {string} flowId - ID del flujo\n   * @returns {Array|undefined} - Array de datos de posición o undefined si no hay cache\n   */\n  getPositions: (flowId) => {\n    if (!flowId) return;\n\n    try {\n      const cachedData = localStorage.getItem(POSITION_CACHE_KEY);\n      if (!cachedData) return;\n\n      const cache = JSON.parse(cachedData);\n      const flowCache = cache[flowId];\n\n      // Verificar si la cache existe y es válida\n      if (!flowCache || flowCache.version !== CACHE_VERSION) return;\n\n      // Verificar si la cache ha caducado\n      if (Date.now() - flowCache.timestamp > CACHE_EXPIRY) {\n        delete cache[flowId];\n        localStorage.setItem(POSITION_CACHE_KEY, JSON.stringify(cache));\n        return;\n      }\n\n      return flowCache.positions;\n    } catch {\n      // No se pudo leer de la caché, continuar silenciosamente.\n    }\n  },\n\n  /**\n   * Aplica posiciones cacheadas a los nodos si están disponibles\n   * @param {Array} nodes - Nodos del flujo\n   * @param {string} flowId - ID del flujo\n   * @returns {Array} - Nodos con posiciones aplicadas o los nodos originales\n   */\n  applyPositions: (nodes, flowId) => {\n    if (!nodes || !flowId) return nodes;\n\n    const cachedPositions = nodePositionCache.getPositions(flowId);\n    if (!cachedPositions) return nodes;\n\n    // Crear un mapa para búsqueda rápida\n    const positionMap = {};\n    for (const item of cachedPositions) {\n      positionMap[item.id] = item;\n    }\n\n    // Aplicar posiciones cacheadas a nodos existentes\n    return nodes.map((node) => {\n      const cachedNode = positionMap[node.id];\n      if (cachedNode && node.type === cachedNode.type) {\n        return {\n          ...node,\n          position: cachedNode.position,\n          style: { ...node.style, ...cachedNode.style },\n        };\n      }\n      return node;\n    });\n  },\n};\n\n// Sistema de ahorro de ancho de banda y operaciones I/O\nexport const flowStateManager = {\n  lastSavedState: undefined,\n  saveTimer: undefined,\n  queuedState: undefined,\n\n  /**\n   * Procesa un cambio de estado para guardado eficiente\n   * Implementa debounce y detección de cambios reales\n   * @param {Object} state - Estado del flujo a guardar\n   * @param {Function} saveFunction - Función para guardar el estado\n   * @returns {boolean} - true si el guardado se programó, false si se detectó redundancia\n   */\n  queueSave: (state, saveFunction) => {\n    if (!state || !saveFunction) return false;\n\n    // Guardar el último estado para comparación\n    flowStateManager.queuedState = state;\n\n    // Si ya hay un guardado programado, no hacer nada más\n    if (flowStateManager.saveTimer) return true;\n\n    // Programar guardado con debounce\n    flowStateManager.saveTimer = setTimeout(() => {\n      const stateToSave = flowStateManager.queuedState;\n\n      // Detectar si hay cambios significativos comparando con el último estado guardado\n      if (flowStateManager.lastSavedState && stateToSave) {\n        // Comparar número de nodos y aristas para detección rápida de cambios\n        const nodesEqual =\n          stateToSave.nodes?.length ===\n          flowStateManager.lastSavedState.nodes?.length;\n        const edgesEqual =\n          stateToSave.edges?.length ===\n          flowStateManager.lastSavedState.edges?.length;\n\n        // Si el número es igual, hacer una comparación más profunda de algunas propiedades clave\n        if (nodesEqual && edgesEqual) {\n          let hasChanges = false;\n\n          // Verificar cambios en nodos (muestreando algunas propiedades clave para rendimiento)\n          for (\n            let index = 0;\n            index < stateToSave.nodes.length && !hasChanges;\n            index++\n          ) {\n            const newNode = stateToSave.nodes[index];\n            const oldNode = flowStateManager.lastSavedState.nodes[index];\n\n            if (\n              newNode.id !== oldNode.id ||\n              newNode.type !== oldNode.type ||\n              newNode.position.x !== oldNode.position.x ||\n              newNode.position.y !== oldNode.position.y\n            ) {\n              hasChanges = true;\n            }\n          }\n\n          // Si no se detectaron cambios, omitir guardado\n          if (!hasChanges) {\n            flowStateManager.saveTimer = undefined;\n            return;\n          }\n        }\n      }\n\n      // Ejecutar el guardado real\n      saveFunction(stateToSave);\n\n      // Actualizar referencia al último estado guardado\n      flowStateManager.lastSavedState = structuredClone(stateToSave);\n      flowStateManager.saveTimer = undefined;\n\n      // Si el flujo tiene muchos nodos, cachear las posiciones\n      if (stateToSave.nodes?.length >= FLOW_SIZE_THRESHOLD && stateToSave.id) {\n        nodePositionCache.savePositions(stateToSave.id, stateToSave.nodes);\n      }\n    }, FLOW_SAVE_DEBOUNCE);\n\n    return true;\n  },\n\n  /**\n   * Cancela cualquier guardado pendiente\n   */\n  cancelPendingSave: () => {\n    if (flowStateManager.saveTimer) {\n      clearTimeout(flowStateManager.saveTimer);\n      flowStateManager.saveTimer = undefined;\n    }\n  },\n\n  /**\n   * Ejecuta un guardado inmediato, cancelando cualquier debounce\n   * @param {Object} state - Estado del flujo a guardar\n   * @param {Function} saveFunction - Función para guardar el estado\n   */\n  saveImmediately: (state, saveFunction) => {\n    flowStateManager.cancelPendingSave();\n    saveFunction(state || flowStateManager.queuedState);\n\n    // Actualizar referencia al último estado guardado\n    if (state || flowStateManager.queuedState) {\n      flowStateManager.lastSavedState = structuredClone(\n        state || flowStateManager.queuedState,\n      );\n\n      // Si el flujo tiene muchos nodos, cachear las posiciones\n      const stateToCache = state || flowStateManager.queuedState;\n      if (\n        stateToCache.nodes?.length >= FLOW_SIZE_THRESHOLD &&\n        stateToCache.id\n      ) {\n        nodePositionCache.savePositions(stateToCache.id, stateToCache.nodes);\n      }\n    }\n  },\n};\n\n// Exportar utilidades para gestión de caché del flujo\nconst flowCacheManager = {\n  nodePositionCache,\n  flowStateManager,\n};\n\nexport default flowCacheManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flowEditorConstants.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flowEditorUtilities.js",
    "messages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 29,
        "column": 50,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 29,
        "endColumn": 63
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidades para el editor de flujos\n */\n\n/**\n * Función para debounce - limita la frecuencia de ejecución de una función\n * @param {Function} func - Función a ejecutar\n * @param {number} wait - Tiempo de espera en ms\n * @returns {Function} - Función con debounce\n */\nexport const debounce = (function_, wait) => {\n  let timeout;\n  return function executedFunction(...arguments_) {\n    const later = () => {\n      clearTimeout(timeout);\n      function_(...arguments_);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Genera un ID único para un nodo\n * @param {string} nodeType - Tipo de nodo\n * @returns {string} - ID único\n */\nexport const generateNodeId = (nodeType) => {\n  return `${nodeType}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n};\n\n/**\n * Función para throttle - limita la frecuencia de ejecución de una función usando requestAnimationFrame\n * @param {Function} func - Función a ejecutar\n * @returns {Function} - Función con throttle\n */\nexport const throttle = (function_) => {\n  let rafId;\n  let lastArguments;\n\n  return function throttled(...arguments_) {\n    lastArguments = arguments_;\n\n    if (rafId === null) {\n      rafId = requestAnimationFrame(() => {\n        function_(...lastArguments);\n        rafId = undefined;\n      });\n    }\n  };\n};\n\n/**\n * Optimiza una función para eventos de arrastre usando throttle\n * @param {Function} func - Función a optimizar\n * @param {Object} options - Opciones de optimización\n * @returns {Function} - Función optimizada\n */\nexport const optimizeDragFunction = (function_, options = {}) => {\n  const { useThrottle = true } = options;\n\n  // Usar throttle para limitar a 60fps (usando requestAnimationFrame)\n  if (useThrottle) {\n    return throttle(function_);\n  }\n\n  return function_;\n};\n\n/**\n * Valida si una conexión ya existe\n * @param {Array} edges - Aristas existentes\n * @param {Object} params - Parámetros de la nueva conexión\n * @returns {boolean} - true si la conexión ya existe\n */\nexport const connectionExists = (edges, parameters) => {\n  if (!edges || !Array.isArray(edges) || !parameters) return false;\n\n  // Extraer propiedades de la conexión\n  const { source, target, sourceHandle, targetHandle } = parameters;\n\n  // Si falta alguna propiedad esencial, no podemos validar\n  if (!source || !target) return false;\n\n  // Verificar si existe una conexión con los mismos source y target\n  return edges.some((edge) => {\n    // Comparar source y target (propiedades obligatorias)\n    const sourceMatch = edge.source === source;\n    const targetMatch = edge.target === target;\n\n    // Si no coinciden source y target, no es la misma conexión\n    if (!sourceMatch || !targetMatch) return false;\n\n    // Comparar sourceHandle y targetHandle (con valores por defecto)\n    const edgeSourceHandle = edge.sourceHandle || 'default';\n    const edgeTargetHandle = edge.targetHandle || 'default';\n    const parameterSourceHandle = sourceHandle || 'default';\n    const parameterTargetHandle = targetHandle || 'default';\n\n    return (\n      edgeSourceHandle === parameterSourceHandle &&\n      edgeTargetHandle === parameterTargetHandle\n    );\n  });\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/flowInteractionUtils.js",
    "messages": [
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "The filename `flowInteractionUtils.js` should be named `flowInteractionUtilities.js`. A more descriptive name will do too.",
        "line": 1,
        "column": 1,
        "nodeType": "Program",
        "messageId": "replace",
        "endLine": 115,
        "endColumn": 1
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import useFlowStore from '@/stores/use-flow-store';\n\n/**\n * Handles the undo/redo keyboard shortcuts.\n * @param {KeyboardEvent} event - The keyboard event.\n * @param {Function} undo - The undo function.\n * @param {Function} redo - The redo function.\n */\nexport const handleUndoRedo = (event, undo, redo) => {\n  const isMac = navigator.platform.toUpperCase().includes('MAC');\n  const metaKey = isMac ? event.metaKey : event.ctrlKey;\n\n  if (!metaKey) {\n    return;\n  }\n\n  const key = (event.key || '').toLowerCase();\n  const isZ = key === 'z';\n  const isY = key === 'y';\n\n  const handleEvent = (action) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (typeof action === 'function') {\n      action();\n    }\n  };\n\n  if (isZ) {\n    if (event.shiftKey) {\n      handleEvent(redo); // Cmd/Ctrl + Shift + Z\n    } else {\n      handleEvent(undo); // Cmd/Ctrl + Z\n    }\n  } else if (isY && !isMac) {\n    handleEvent(redo); // Ctrl + Y (Windows/Linux)\n  }\n};\n\nconst deleteConnectedEdges = (nodeId, reactFlowInstance) => {\n  const flowStore = useFlowStore.getState();\n  if (!flowStore || !Array.isArray(flowStore.edges)) return;\n\n  const edgesToRemove = flowStore.edges.filter(\n    (edge) => edge && (edge.source === nodeId || edge.target === nodeId),\n  );\n\n  if (edgesToRemove.length === 0) return;\n\n  if (reactFlowInstance) {\n    reactFlowInstance.deleteElements({ edges: edgesToRemove });\n  }\n\n  if (flowStore.onEdgesChange) {\n    flowStore.onEdgesChange(\n      edgesToRemove.map((edge) => ({ id: edge.id, type: 'remove' })),\n    );\n  }\n\n  if (flowStore.setEdges) {\n    const remainingEdges = flowStore.edges.filter(\n      (edge) => !edgesToRemove.some((removed) => removed.id === edge.id),\n    );\n    flowStore.setEdges(remainingEdges);\n  }\n};\n\nconst deleteNode = (nodeId, reactFlowInstance) => {\n  const flowStore = useFlowStore.getState();\n  if (!flowStore) return;\n\n  if (reactFlowInstance) {\n    reactFlowInstance.deleteElements({ nodes: [{ id: nodeId }] });\n  }\n\n  if (flowStore.onNodesChange) {\n    flowStore.onNodesChange([{ id: nodeId, type: 'remove' }]);\n  }\n\n  if (flowStore.setNodes && Array.isArray(flowStore.nodes)) {\n    const remainingNodes = flowStore.nodes.filter(\n      (node) => node && node.id !== nodeId,\n    );\n    flowStore.setNodes(remainingNodes);\n  }\n};\n\n/**\n * Handles the deletion of a selected node and its connected edges.\n * @param {Object} selectedNode - The currently selected node.\n * @param {Object} reactFlowInstance - The React Flow instance.\n * @param {Function} setSelectedNode - Function to update the selected node.\n */\nexport const handleNodeDeletion = (\n  selectedNode,\n  reactFlowInstance,\n  setSelectedNode,\n) => {\n  if (!selectedNode) return;\n\n  const { id: nodeId } = selectedNode;\n\n  deleteConnectedEdges(nodeId, reactFlowInstance);\n  deleteNode(nodeId, reactFlowInstance);\n\n  if (typeof setSelectedNode === 'function') {\n    setSelectedNode(undefined);\n  } else {\n    const flowStore = useFlowStore.getState();\n    if (flowStore && flowStore.setSelectedNode) {\n      flowStore.setSelectedNode(undefined);\n    }\n  }\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/handleFixer.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 63,
        "column": 37,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 91,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidad para corregir los handles de las aristas\n *\n * Este archivo contiene funciones para asegurar que los handles de las aristas\n * sean consistentes entre el frontend y el backend.\n */\n\n/**\n * Verifica si un handle es válido para un nodo\n * @param {string} nodeId - ID del nodo\n * @param {string} handleId - ID del handle a verificar\n * @returns {boolean} - true si el handle es válido\n */\nconst isValidHandle = (nodeId, handleId) => {\n  if (!nodeId || !handleId) return false;\n\n  try {\n    // Buscar el nodo en el DOM\n    const nodeElement = document.querySelector(`[data-id=\"${nodeId}\"]`);\n    if (!nodeElement) return false;\n\n    // Verificar si el handle existe en el nodo\n    const handleElement = nodeElement.querySelector(\n      `[data-handleid=\"${handleId}\"]`,\n    );\n    return handleElement !== null;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Obtiene un handle válido para un nodo\n * @param {string} nodeId - ID del nodo\n * @param {string} preferredHandle - Handle preferido\n * @returns {string} - Handle válido a usar\n */\nconst getValidHandle = (nodeId, preferredHandle) => {\n  if (isValidHandle(nodeId, preferredHandle)) {\n    return preferredHandle;\n  }\n\n  // Si el handle preferido no es válido, buscar cualquier handle disponible\n  try {\n    const nodeElement = document.querySelector(`[data-id=\"${nodeId}\"]`);\n    if (!nodeElement) return 'default';\n\n    const handles = nodeElement.querySelectorAll('[data-handleid]');\n    if (handles.length > 0) {\n      return handles[0].dataset.handleid;\n    }\n  } catch {}\n\n  return 'default';\n};\n\n/**\n * Normaliza los handles de una arista para asegurar compatibilidad\n * OPTIMIZADO: Elimina logs excesivos y mejora eficiencia\n * @param {Object} edge - La arista a normalizar\n * @returns {Object|null} - La arista con handles normalizados o null si no es válida\n */\nexport const normalizeEdgeHandles = (edge) => {\n  // Validación eficiente sin logs excesivos\n  if (!edge || !edge.id || !edge.source || !edge.target) {\n    return;\n  }\n\n  // Optimización: Si ya tiene los handles correctos, devolver la misma referencia\n  // Esto evita crear objetos innecesarios y mejora rendimiento\n  if (edge.sourceHandle && edge.targetHandle) {\n    return edge;\n  }\n\n  // Crear nuevo objeto solo cuando sea necesario\n  const newEdge = { ...edge };\n\n  // Asignar handles por defecto solo cuando faltan\n  if (!newEdge.sourceHandle) newEdge.sourceHandle = 'output';\n  if (!newEdge.targetHandle) newEdge.targetHandle = 'input';\n\n  // Si es una arista de bucle (source = target), asegurar handles diferentes\n  if (\n    newEdge.source === newEdge.target &&\n    newEdge.sourceHandle === newEdge.targetHandle\n  ) {\n    newEdge.targetHandle = `${newEdge.targetHandle}-alt`;\n  }\n\n  return newEdge;\n};\n\n/**\n * Corrige los handles de todas las aristas en un array\n * @param {Array} edges - Array de aristas a corregir\n * @returns {Array} - Array de aristas con handles corregidos\n */\nexport const fixAllEdgeHandles = (edges) => {\n  if (!edges || !Array.isArray(edges)) {\n    return [];\n  }\n\n  // Normalizar todas las aristas y filtrar las nulas\n  const fixedEdges = edges\n    .map((edge) => normalizeEdgeHandles(edge))\n    .filter(Boolean);\n\n  // Si se perdieron aristas en el proceso, registrarlo\n\n  return fixedEdges;\n};\n\n/**\n * Verifica si una arista tiene handles válidos\n * @param {Object} edge - La arista a verificar\n * @returns {boolean} - true si la arista tiene handles válidos\n */\nconst hasValidHandles = (edge) => {\n  if (!edge) {\n    return false;\n  }\n\n  // Verificar que la arista tenga los campos mínimos requeridos\n  if (!edge.id) {\n    return false;\n  }\n\n  if (!edge.source || !edge.target) {\n    return false;\n  }\n\n  // Convertir a string para asegurar consistencia\n  edge.source = String(edge.source);\n  edge.target = String(edge.target);\n\n  // Asegurar que los handles sean strings\n  edge.sourceHandle =\n    edge.sourceHandle === undefined || edge.sourceHandle === null\n      ? 'default'\n      : String(edge.sourceHandle);\n\n  edge.targetHandle =\n    edge.targetHandle === undefined || edge.targetHandle === null\n      ? 'default'\n      : String(edge.targetHandle);\n\n  // Verificar que los nodos existan en el DOM\n  const sourceExists =\n    document.querySelector(`[data-id=\"${edge.source}\"]`) !== null;\n  const targetExists =\n    document.querySelector(`[data-id=\"${edge.target}\"]`) !== null;\n\n  return sourceExists && targetExists;\n};\n\n/**\n * Verifica si los nodos de una arista existen en el DOM\n * @param {Object} edge - La arista a verificar\n * @returns {boolean} - true si ambos nodos existen\n */\nexport const nodesExistInDOM = (edge) => {\n  if (!edge || !edge.source || !edge.target) return false;\n\n  // Verificar si los nodos existen en el DOM\n  const sourceExists = document.querySelector(\n    `.react-flow__node[data-id=\"${edge.source}\"]`,\n  );\n  const targetExists = document.querySelector(\n    `.react-flow__node[data-id=\"${edge.target}\"]`,\n  );\n\n  return Boolean(sourceExists) && Boolean(targetExists);\n};\n\n/**\n * Fuerza la actualización visual de las aristas en ReactFlow\n * @param {Object} rfInstance - Instancia de ReactFlow\n */\nexport const forceEdgesUpdate = (rfInstance) => {\n  if (!rfInstance) {\n    return;\n  }\n\n  try {\n    // Obtener las aristas actuales\n    const currentEdges = rfInstance.getEdges() || [];\n\n    if (currentEdges.length === 0) {\n      return;\n    }\n\n    // Filtrar aristas cuyos nodos existen en el DOM\n    const validEdges = currentEdges.filter(\n      (edge) => nodesExistInDOM(edge) && hasValidHandles(edge),\n    );\n    if (validEdges.length === 0) return;\n\n    // Forzar explicitamente el uso de handles 'default' para todas las aristas\n    const forcedEdges = validEdges.map((edge) => ({\n      ...edge,\n      sourceHandle: 'default',\n      targetHandle: 'default',\n    }));\n\n    // Actualizar las aristas en ReactFlow\n    rfInstance.setEdges(forcedEdges);\n\n    // Emitir un evento para notificar que se actualizaron las aristas\n    document.dispatchEvent(\n      new CustomEvent('edges-updated', {\n        detail: {\n          count: forcedEdges.length,\n          timestamp: Date.now(),\n          forcedHandles: true,\n        },\n      }),\n    );\n\n    // Emitir un evento adicional para forzar la actualización visual de las aristas\n    document.dispatchEvent(\n      new CustomEvent('elite-edge-update-required', {\n        detail: {\n          allEdges: true,\n          timestamp: Date.now(),\n          forced: true,\n          fixedHandles: true,\n          validEdgesOnly: true,\n        },\n      }),\n    );\n\n    // Programar una segunda actualización después de un breve retraso\n    // para asegurar que los cambios se apliquen correctamente\n    setTimeout(() => {\n      rfInstance.setEdges(forcedEdges);\n    }, 100);\n  } catch {}\n};\n\n/**\n * Corrige las aristas antes de enviarlas al backend\n * @param {Array} edges - Aristas a corregir\n * @returns {Array} - Aristas corregidas\n */\nexport const prepareEdgesForBackend = (edges) => {\n  if (!edges || !Array.isArray(edges)) return [];\n\n  return edges\n    .map((edge) => {\n      if (!edge) return;\n\n      // Crear una copia para no modificar el original\n      const preparedEdge = { ...edge };\n\n      // Asegurar que sourceHandle y targetHandle tengan valores válidos\n      preparedEdge.sourceHandle = preparedEdge.sourceHandle || 'default';\n      preparedEdge.targetHandle = preparedEdge.targetHandle || 'default';\n\n      // Guardar los IDs originales para referencia\n      preparedEdge.sourceOriginal =\n        preparedEdge.sourceOriginal || preparedEdge.source;\n      preparedEdge.targetOriginal =\n        preparedEdge.targetOriginal || preparedEdge.target;\n\n      return preparedEdge;\n    })\n    .filter(Boolean);\n};\n\n/**\n * Corrige las aristas recibidas del backend\n * @param {Array} edges - Aristas recibidas del backend\n * @returns {Array} - Aristas corregidas\n */\nexport const processEdgesFromBackend = (edges) => {\n  if (!edges || !Array.isArray(edges)) return [];\n\n  return edges\n    .map((edge) => {\n      if (!edge) return;\n\n      // Crear una copia para no modificar el original\n      const processedEdge = { ...edge };\n\n      // Asegurar que sourceHandle y targetHandle tengan valores válidos\n      processedEdge.sourceHandle = processedEdge.sourceHandle || 'default';\n      processedEdge.targetHandle = processedEdge.targetHandle || 'default';\n\n      // Asegurar que type sea 'default' si no está definido\n      processedEdge.type = processedEdge.type || 'default';\n\n      return processedEdge;\n    })\n    .filter(Boolean);\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/lodUtilities.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/node-position-validator.js",
    "messages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 80,
        "column": 21,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 80,
        "endColumn": 34
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 81,
        "column": 21,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 81,
        "endColumn": 34
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 124,
        "column": 46,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 124,
        "endColumn": 50
      },
      {
        "ruleId": "sonarjs/no-all-duplicated-branches",
        "severity": 2,
        "message": "Remove this conditional structure or edit its code blocks so that they're not all the same.",
        "line": 214,
        "column": 9,
        "nodeType": "IfStatement",
        "messageId": "removeOrEditConditionalStructure",
        "endLine": 222,
        "endColumn": 10
      },
      {
        "ruleId": "sonarjs/no-duplicated-branches",
        "severity": 2,
        "message": "This branch's code block is the same as the block for the branch on line 214.",
        "line": 218,
        "column": 16,
        "nodeType": "BlockStatement",
        "messageId": "sameConditionalBlock",
        "endLine": 222,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * node-position-validator.js\n *\n * Utilidad para validar y corregir posiciones de nodos en React Flow\n * Resuelve problemas de nodos apilados en (0,0) y errores NaN en aristas\n */\n\n// Constantes de posicionamiento\nconst DEFAULT_X = 250;\nconst DEFAULT_Y = 150;\nconst POSITION_STEP = 50;\nconst MAX_ATTEMPTS = 100;\n\n/**\n * Verifica si una posición es válida (no undefined, null o NaN)\n * @param {Object|null|undefined} position - La posición a verificar\n * @returns {boolean} - True si la posición es válida\n */\nexport const isValidPosition = (position) => {\n  if (!position || typeof position !== 'object') return false;\n\n  const { x, y } = position;\n  return (\n    x !== undefined &&\n    y !== undefined &&\n    x !== null &&\n    y !== null &&\n    !Number.isNaN(x) &&\n    !Number.isNaN(y) &&\n    Number.isFinite(x) &&\n    Number.isFinite(y)\n  );\n};\n\n/**\n * Genera una posición válida única que no esté ocupada por otros nodos\n * @param {Array} existingNodes - Nodos existentes para evitar colisiones\n * @param {Object} preferredPosition - Posición preferida (opcional)\n * @returns {Object} - Una posición válida {x, y}\n */\nexport const generateValidPosition = (\n  existingNodes = [],\n  preferredPosition,\n) => {\n  // Si hay una posición preferida y es válida, usarla\n  if (preferredPosition && isValidPosition(preferredPosition)) {\n    return preferredPosition;\n  }\n\n  // Crear un mapa de posiciones ocupadas para verificación rápida\n  const occupiedPositions = new Set();\n  for (const node of existingNodes) {\n    if (isValidPosition(node.position)) {\n      occupiedPositions.add(\n        `${Math.round(node.position.x)},${Math.round(node.position.y)}`,\n      );\n    }\n  }\n\n  // Intentar posiciones incrementales hasta encontrar una libre\n  let x = DEFAULT_X;\n  let y = DEFAULT_Y;\n  let attempts = 0;\n\n  while (\n    occupiedPositions.has(`${Math.round(x)},${Math.round(y)}`) &&\n    attempts < MAX_ATTEMPTS\n  ) {\n    // Patrón en espiral para distribuir nodos\n    if (attempts % 2 === 0) {\n      x += POSITION_STEP * Math.ceil(attempts / 2);\n    } else {\n      y += POSITION_STEP * Math.ceil(attempts / 2);\n    }\n    attempts++;\n  }\n\n  // Si agotamos los intentos, usar una posición aleatoria\n  if (attempts >= MAX_ATTEMPTS) {\n    x = DEFAULT_X + Math.random() * 500;\n    y = DEFAULT_Y + Math.random() * 300;\n  }\n\n  return { x, y };\n};\n\n/**\n * Asegura que todos los nodos tengan posiciones válidas\n * @param {Array} nodes - Los nodos a validar y corregir\n * @returns {Array} - Los nodos con posiciones validadas\n */\n// Función segura para verificar si hay un arrastre en progreso\n// que no afecta la secuencia de hooks de React\nfunction isDraggingInProgress() {\n  try {\n    return globalThis && globalThis.__dragInProgress === true;\n  } catch {\n    return false;\n  }\n}\n\nexport const validateNodePositions = (nodes) => {\n  // ULTRA IMPORTANTE: No realizar validaciones durante el arrastre\n  // para maximizar el rendimiento y fluidez, pero de forma segura para React\n  if (isDraggingInProgress()) {\n    return nodes; // Devolver los nodos sin cambios durante el arrastre\n  }\n\n  if (!nodes || !Array.isArray(nodes)) {\n    return []; // Simplemente devolver array vacío sin logging excesivo\n  }\n\n  // Verificar si hay nodos inválidos pero SIN filtrado completo (más eficiente)\n  let hasInvalidNodes = false;\n  for (const node of nodes) {\n    if (!isValidPosition(node.position)) {\n      hasInvalidNodes = true;\n      break; // Salir al primer nodo inválido encontrado\n    }\n  }\n\n  // Solo proceder si realmente hay nodos inválidos\n  if (!hasInvalidNodes) {\n    return nodes; // Retornar rápidamente si todo está bien\n  }\n\n  // Optimización: Crear un conjunto de nodos válidos una sola vez.\n  const validNodes = nodes.filter((n) => isValidPosition(n.position));\n\n  // Mapear y corregir los nodos inválidos de manera eficiente.\n  return nodes.map((node) => {\n    // Si la posición es válida, devolver el nodo sin cambios.\n    if (isValidPosition(node.position)) {\n      return node;\n    }\n\n    // Clonar el nodo para no mutar el original.\n    const validatedNode = { ...node };\n\n    // Generar una posición válida usando el conjunto pre-calculado de nodos válidos.\n    validatedNode.position = generateValidPosition(\n      validNodes,\n      // Intentar recuperar valores parciales si es posible.\n      node.position && typeof node.position === 'object'\n        ? {\n            x: Number.isNaN(node.position.x) ? undefined : node.position.x,\n            y: Number.isNaN(node.position.y) ? undefined : node.position.y,\n          }\n        : undefined,\n    );\n\n    return validatedNode;\n  });\n};\n\n/**\n * Middleware para Zustand que intercepta actualizaciones de nodos y valida posiciones\n * @param {Function} set - Función set de Zustand\n * @param {Function} get - Función get de Zustand\n * @returns {Function} - Función set modificada\n */\nexport const createNodeValidatorMiddleware = (set, get) => (arguments_) => {\n  // Llamar a la función set original con una función que procesa el estado\n  return set((state) => {\n    // Si el estado incluye nodes, validarlos\n    if (arguments_.nodes) {\n      return {\n        ...arguments_,\n        nodes: validateNodePositions(arguments_.nodes),\n      };\n    }\n\n    // Si es una función, ejecutarla con el estado actual y validar el resultado\n    if (typeof arguments_ === 'function') {\n      const result = arguments_(state);\n\n      if (result.nodes) {\n        return {\n          ...result,\n          nodes: validateNodePositions(result.nodes),\n        };\n      }\n\n      return result;\n    }\n\n    return arguments_;\n  });\n};\n\n/**\n * Sanitiza los paths de las aristas para evitar errores NaN\n * @param {Array} edges - Las aristas a sanitizar\n * @param {Array} nodes - Los nodos para referencia\n * @returns {Array} - Las aristas sanitizadas\n */\nexport const sanitizeEdgePaths = () => {\n  // Función que se ejecuta después del render para corregir paths SVG con NaN\n  setTimeout(() => {\n    const edgePaths = document.querySelectorAll('.react-flow__edge-path');\n    let fixedCount = 0;\n\n    for (const path of edgePaths) {\n      const dAttribute = path.getAttribute('d');\n\n      // Detectar si hay valores NaN en el path\n      if (dAttribute && dAttribute.includes('NaN')) {\n        // Extraer valores válidos (si los hay)\n        const validPoints = dAttribute\n          .split(' ')\n          .filter((part) => !part.includes('NaN'))\n          .join(' ');\n\n        if (validPoints) {\n          // Si hay puntos válidos, intentar construir un path mínimo\n          path.setAttribute('d', 'M0,0');\n          path.style.visibility = 'hidden'; // Ocultar aristas con problemas\n        } else {\n          // Si no hay puntos válidos, ocultar la arista\n          path.setAttribute('d', 'M0,0');\n          path.style.visibility = 'hidden';\n        }\n\n        fixedCount++;\n      }\n    }\n\n    if (fixedCount > 0) {\n      // Paths SVG de aristas parcheados con éxito\n    }\n  }, 100);\n};\n\nconst nodePositionValidator = {\n  isValidPosition,\n  generateValidPosition,\n  validateNodePositions,\n  createNodeValidatorMiddleware,\n  sanitizeEdgePaths,\n};\n\nexport default nodePositionValidator;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/optimized-flow-fixes.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/persistenceManager.js",
    "messages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 14,
        "column": 73,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 14,
        "endColumn": 75
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sistema avanzado de persistencia para el editor de flujos\n * Proporciona funcionalidades para evitar la pérdida de datos\n * con respaldos locales automáticos.\n */\n\n/**\n * Guarda un respaldo local del estado del flujo\n * @param {string} plubotId - ID del plubot\n * @param {Array} nodes - Nodos del flujo\n * @param {Array} edges - Aristas del flujo\n * @param {string} name - Nombre del flujo\n */\nexport const saveLocalBackup = (plubotId, nodes, edges, name = 'Flujo') => {\n  if (!plubotId) {\n    return;\n  }\n\n  try {\n    localStorage.setItem(\n      `plubot-flow-backup-${plubotId}`,\n      JSON.stringify({\n        nodes,\n        edges,\n        name,\n        timestamp: new Date().toISOString(),\n      }),\n    );\n  } catch {}\n};\n\n/**\n * Carga un respaldo local del flujo\n * @param {string} plubotId - ID del plubot\n * @returns {Object|null} Datos del respaldo o null si no existe\n */\nexport const loadLocalBackup = (plubotId) => {\n  if (!plubotId) return;\n\n  try {\n    const backupJson = localStorage.getItem(`plubot-flow-backup-${plubotId}`);\n    if (!backupJson) return;\n\n    const backup = JSON.parse(backupJson);\n    if (!backup || !backup.nodes) return;\n\n    return backup;\n  } catch {}\n};\n\n/**\n * Determina si un respaldo es reciente (menos de 24 horas)\n * @param {Object} backup - Datos del respaldo\n * @returns {boolean} True si el respaldo es reciente\n */\nexport const isRecentBackup = (backup) => {\n  if (!backup || !backup.timestamp) return false;\n\n  const backupTime = new Date(backup.timestamp);\n  const hoursAgo = (Date.now() - backupTime.getTime()) / (1000 * 60 * 60);\n\n  return hoursAgo < 24;\n};\n\n/**\n * Configura un sistema de respaldo automático para un flujo\n * @param {Function} getState - Función que devuelve el estado actual\n * @param {Function} onAutoSave - Callback a ejecutar cuando se realiza un autoguardado\n * @returns {Function} Función para detener el autoguardado\n */\nexport const setupAutoBackup = (getState, onAutoSave) => {\n  const intervalId = setInterval(() => {\n    const state = getState();\n    if (!state || !state.plubotId || !state.nodes || state.nodes.length === 0)\n      return;\n\n    saveLocalBackup(state.plubotId, state.nodes, state.edges, state.flowName);\n\n    if (typeof onAutoSave === 'function') {\n      onAutoSave();\n    }\n  }, 30_000); // Guardar cada 30 segundos\n\n  return () => clearInterval(intervalId);\n};\n\nconst persistenceManager = {\n  saveLocalBackup,\n  loadLocalBackup,\n  isRecentBackup,\n  setupAutoBackup,\n};\n\nexport default persistenceManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/prevent-flow-reset.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (103). Maximum allowed is 80.",
        "line": 51,
        "column": 33,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 195,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Method 'setNodes' has a complexity of 12. Maximum allowed is 10.",
        "line": 97,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 122,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * prevent-flow-reset.js\n *\n * SOLUCIÓN DEFINITIVA que previene que el flujo se resetee automáticamente\n * y evita la pérdida de nodos en el editor de flujos.\n */\n\n// Importar directamente el store (importación estática)\nimport useFlowStore from '@/stores/use-flow-store';\n\n/**\n * Previene el reseteo automático del flujo y la pérdida de nodos\n * @returns {Function} Función de limpieza\n */\n// Función para guardar nodos en localStorage como respaldo\nconst backupNodesToLocalStorage = (nodes) => {\n  const flowStoreState = useFlowStore.getState();\n  const { plubotId } = flowStoreState;\n\n  if (!nodes || !Array.isArray(nodes) || nodes.length === 0) return;\n\n  try {\n    const backupKey = `plubot-nodes-emergency-backup-${plubotId}`;\n    localStorage.setItem(backupKey, JSON.stringify(nodes));\n  } catch {}\n};\n\n// Función para recuperar nodos de respaldo\nconst restoreNodesFromBackup = () => {\n  const flowStoreState = useFlowStore.getState();\n  const { plubotId } = flowStoreState;\n\n  if (!plubotId) {\n    return;\n  }\n  try {\n    const backupKey = `plubot-nodes-emergency-backup-${plubotId}`;\n\n    const backup = localStorage.getItem(backupKey);\n    if (backup) {\n      try {\n        const nodes = JSON.parse(backup);\n        if (Array.isArray(nodes) && nodes.length > 0) {\n          return nodes;\n        }\n      } catch {}\n    }\n  } catch {}\n};\n\nexport const preventFlowReset = () => {\n  // Referencias originales a las funciones\n  let originalResetFlow;\n  let originalSetNodes;\n  let lastNodes = [];\n\n  try {\n    // Accedemos directamente al store\n    const flowStore = useFlowStore;\n\n    if (flowStore && flowStore.getState) {\n      const state = flowStore.getState();\n\n      // 1. Proteger la función resetFlow\n      if (typeof state.resetFlow === 'function') {\n        originalResetFlow = state.resetFlow;\n\n        flowStore.setState((previousState) => ({\n          resetFlow: (...arguments_) => {\n            const options = arguments_[2] || {};\n            const nodes = previousState.nodes || [];\n\n            // Caso 1: Se permite el reseteo explícitamente a través de una opción.\n            // Esta es la nueva forma robusta para que el cargador de flujos reinicie el estado.\n            if (options.allowResetFromLoader === true) {\n              return originalResetFlow(...arguments_);\n            }\n\n            // Caso 2: El reseteo no es forzado, se aplican las protecciones.\n            // Si hay nodos en el editor, se bloquea para prevenir pérdida de datos.\n            if (nodes.length > 0) {\n              return previousState; // Bloquear el reseteo\n            }\n\n            // Caso 3: No hay nodos, por lo que el reseteo es seguro.\n\n            return originalResetFlow(...arguments_);\n          },\n        }));\n      }\n\n      // 2. Proteger la función setNodes\n      if (typeof state.setNodes === 'function') {\n        originalSetNodes = state.setNodes;\n\n        flowStore.setState((previousState) => ({\n          setNodes: (newNodes) => {\n            const callStack = new Error('Getting call stack').stack || '';\n            // MODIFICADO: Obtener nodos y plubotId del estado MÁS RECIENTE del store\n            const storeState = flowStore.getState();\n            const currentNodes = storeState.nodes || [];\n\n            if (\n              currentNodes.length > 0 &&\n              (!newNodes ||\n                (Array.isArray(newNodes) && newNodes.length === 0)) &&\n              !callStack.includes('TrainingScreen') &&\n              !callStack.includes('deleteNode')\n            ) {\n              backupNodesToLocalStorage(currentNodes); // Guardar los nodos *antes* de la eliminación\n              return;\n            }\n\n            if (Array.isArray(newNodes) && newNodes.length > 0) {\n              lastNodes = [...newNodes];\n              if (newNodes.length > 3) {\n                backupNodesToLocalStorage(newNodes); // Guardar los nodos *antes* de la eliminación\n              }\n            }\n\n            return originalSetNodes(newNodes);\n          },\n        }));\n      }\n\n      // 3. Añadir función de recuperación de emergencia al store\n      flowStore.setState((previousState) => ({\n        recoverNodesEmergency: () => {\n          const currentNodes = previousState.nodes || [];\n\n          // Solo recuperar si no hay nodos actualmente\n          if (currentNodes.length === 0) {\n            // Intentar recuperar de la memoria primero\n            if (lastNodes.length > 0) {\n              originalSetNodes(lastNodes);\n              return true;\n            }\n\n            // Si no hay en memoria, intentar desde localStorage\n            const backupNodes = restoreNodesFromBackup();\n            if (backupNodes) {\n              originalSetNodes(backupNodes);\n              return true;\n            }\n          }\n\n          return false;\n        },\n      }));\n\n      // 4. Configurar un intervalo para verificar si los nodos desaparecieron\n      const checkInterval = setInterval(() => {\n        try {\n          const currentState = flowStore.getState();\n          const currentNodes = currentState.nodes || [];\n          const currentPlubotId = currentState.plubotId;\n\n          let emergencyBackupForThisFlowExists = false;\n          let emergencyBackupKey = '';\n\n          if (currentPlubotId) {\n            emergencyBackupKey = `plubot-nodes-emergency-backup-${currentPlubotId}`;\n            emergencyBackupForThisFlowExists = Boolean(\n              localStorage.getItem(emergencyBackupKey),\n            );\n          }\n\n          if (\n            currentNodes.length === 0 &&\n            lastNodes.length > 0 &&\n            !emergencyBackupForThisFlowExists\n          ) {\n            // currentState.setNodes(lastNodes); // <--- COMENTADO PARA EVITAR RESTAURACIÓN AUTOMÁTICA\n          }\n        } catch {}\n      }, 5000); // Verificar cada 5 segundos\n\n      // Devolver función de limpieza\n      return () => {\n        try {\n          // Detener el intervalo de verificación\n          clearInterval(checkInterval);\n\n          // Restaurar funciones originales\n          if (originalResetFlow) {\n            flowStore.setState({ resetFlow: originalResetFlow });\n          }\n          if (originalSetNodes) {\n            flowStore.setState({ setNodes: originalSetNodes });\n          }\n        } catch {}\n      };\n    }\n  } catch {}\n};\n\nexport default preventFlowReset;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/flow-editor/utils/storage-manager.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'cleanupStorage' has a complexity of 11. Maximum allowed is 10.",
        "line": 14,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 65,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'safeSetItem' has a complexity of 11. Maximum allowed is 10.",
        "line": 74,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 114,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidad para gestionar el almacenamiento local de forma segura\n * Evita errores de QuotaExceededError: The quota has been exceeded\n */\n\n// Prefijo para todas las claves usadas por el editor de flujos\nconst STORAGE_PREFIX = 'plubot-flow-';\n\n/**\n * Limpia las entradas antiguas del localStorage para evitar exceder la cuota\n * @param {number} maxEntries - Número máximo de entradas a mantener\n * @param {number} maxAgeMs - Edad máxima en milisegundos para las entradas (default: 1 hora)\n */\nexport function cleanupStorage(maxEntries = 50, maxAgeMs = 60 * 60 * 1000) {\n  try {\n    // Recopilar todas las claves que empiezan con nuestro prefijo\n    const keys = [];\n    for (let index = 0; index < localStorage.length; index++) {\n      const key = localStorage.key(index);\n      if (key && key.startsWith(STORAGE_PREFIX)) {\n        keys.push(key);\n      }\n    }\n\n    // Si no hay suficientes entradas, no es necesario limpiar\n    if (keys.length <= maxEntries) {\n      return;\n    }\n\n    // Eliminar entradas antiguas basadas en timestamp\n    const now = Date.now();\n    const keysWithTimestamps = keys.map((key) => {\n      let timestamp = 0;\n      try {\n        const value = localStorage.getItem(key);\n        if (value) {\n          const data = JSON.parse(value);\n          timestamp = data.timestamp || 0;\n        }\n      } catch {\n        // Si no se puede analizar, asumir que es antiguo\n        timestamp = 0;\n      }\n      return { key, timestamp };\n    });\n\n    // Ordenar por antigüedad (más antiguo primero)\n    keysWithTimestamps.sort((a, b) => a.timestamp - b.timestamp);\n\n    // Eliminar entradas antiguas hasta que queden maxEntries\n    const keysToRemove = keysWithTimestamps.slice(\n      0,\n      keysWithTimestamps.length - maxEntries,\n    );\n    for (const { key, timestamp } of keysToRemove) {\n      // Eliminar si es más antiguo que maxAgeMs o si es necesario para llegar a maxEntries\n      if (\n        now - timestamp > maxAgeMs ||\n        keysWithTimestamps.length > maxEntries\n      ) {\n        localStorage.removeItem(key);\n      }\n    }\n  } catch {}\n}\n\n/**\n * Guarda un valor en localStorage de forma segura\n * @param {string} key - Clave (se añadirá el prefijo automáticamente)\n * @param {any} value - Valor a guardar\n * @param {boolean} addTimestamp - Si se debe añadir un timestamp al valor\n * @returns {boolean} - true si se guardó correctamente, false en caso contrario\n */\nexport function safeSetItem(key, value, addTimestamp = true) {\n  try {\n    // Añadir prefijo a la clave\n    const prefixedKey = key.startsWith(STORAGE_PREFIX)\n      ? key\n      : `${STORAGE_PREFIX}${key}`;\n\n    // Añadir timestamp si es necesario\n    let processedValue = value;\n    if (addTimestamp && typeof value === 'object') {\n      processedValue = { ...value, timestamp: Date.now() };\n    }\n\n    // Convertir a string si es necesario\n    const stringValue =\n      typeof processedValue === 'string'\n        ? processedValue\n        : JSON.stringify(processedValue);\n\n    // Intentar guardar\n    localStorage.setItem(prefixedKey, stringValue);\n    return true;\n  } catch (error) {\n    // Si se excede la cuota, limpiar y reintentar\n    if (\n      error.name === 'QuotaExceededError' ||\n      error.code === 22 ||\n      error.code === 1014\n    ) {\n      cleanupStorage();\n\n      try {\n        // Reintentar después de limpiar\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n      } catch {}\n    }\n\n    return false;\n  }\n}\n\n/**\n * Recupera un valor de localStorage de forma segura\n * @param {string} key - Clave (se añadirá el prefijo automáticamente si no está presente)\n * @param {any} defaultValue - Valor por defecto si no se encuentra la clave\n * @returns {any} - Valor recuperado o defaultValue\n */\nexport function safeGetItem(key, defaultValue) {\n  try {\n    // Añadir prefijo a la clave si no está presente\n    const prefixedKey = key.startsWith(STORAGE_PREFIX)\n      ? key\n      : `${STORAGE_PREFIX}${key}`;\n\n    const value = localStorage.getItem(prefixedKey);\n    if (value === null) {\n      return defaultValue;\n    }\n\n    try {\n      return JSON.parse(value);\n    } catch {\n      // Si no se puede analizar, devolver el valor sin procesar\n      return value;\n    }\n  } catch {\n    return defaultValue;\n  }\n}\n\n// Exportar funciones principales\nconst storageManager = {\n  cleanupStorage,\n  safeSetItem,\n  safeGetItem,\n  prefix: STORAGE_PREFIX,\n};\n\nexport default storageManager;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/EmbedModal.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (615). Maximum allowed is 80.",
        "line": 47,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 730,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 20. Maximum allowed is 10.",
        "line": 47,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 730,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/no-nested-template-literals",
        "severity": 2,
        "message": "Refactor this code to not use nested template literals.",
        "line": 110,
        "column": 95,
        "nodeType": "TemplateLiteral",
        "messageId": "nestedTemplateLiterals",
        "endLine": 110,
        "endColumn": 124
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 226,
        "column": 22,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 226,
        "endColumn": 35
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 229,
        "column": 41,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 229,
        "endColumn": 54
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 231,
        "column": 40,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 231,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 233,
        "column": 33,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 233,
        "endColumn": 46
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 235,
        "column": 31,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 235,
        "endColumn": 44
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 237,
        "column": 38,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 237,
        "endColumn": 51
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 244,
        "column": 24,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 244,
        "endColumn": 37
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 245,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 245,
        "endColumn": 36
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 2,
        "message": "Anchor used as a button. Anchors are primarily expected to navigate. Use the button element instead. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 435,
        "column": 25,
        "nodeType": "JSXOpeningElement",
        "endLine": 443,
        "endColumn": 26
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 435,
        "column": 25,
        "nodeType": "JSXOpeningElement",
        "endLine": 443,
        "endColumn": 26
      },
      {
        "ruleId": "jsx-a11y/no-static-element-interactions",
        "severity": 2,
        "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
        "line": 435,
        "column": 25,
        "nodeType": "JSXOpeningElement",
        "endLine": 443,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 437,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 437,
        "endColumn": 30
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 615,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 615,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 619,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 619,
        "endColumn": 63
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 628,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 628,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 632,
        "column": 65,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 632,
        "endColumn": 66
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 641,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 641,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 646,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 646,
        "endColumn": 63
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 651,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 651,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 656,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 656,
        "endColumn": 64
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 661,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 661,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 668,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 668,
        "endColumn": 30
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 674,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 674,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'e' is not defined.",
        "line": 680,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 680,
        "endColumn": 30
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useRealPlubotId\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.",
        "line": 711,
        "column": 19,
        "nodeType": "Identifier",
        "endLine": 711,
        "endColumn": 34
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'useRealPlubotId' is not defined.",
        "line": 711,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 711,
        "endColumn": 34
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 720,
        "column": 14,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 724,
        "endColumn": 27
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 722,
        "column": 17,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 724,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has missing dependencies: 'request' and 'showNotification'. Either include them or remove the dependency array.",
        "line": 161,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 161,
        "endColumn": 31,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [plubotId, customization, showNotification, request]",
            "fix": {
              "range": [5389, 5414],
              "text": "[plubotId, customization, showNotification, request]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 31,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import confetti from 'canvas-confetti';\nimport {\n  X,\n  Copy,\n  Link,\n  Code,\n  ExternalLink,\n  Settings,\n  Globe,\n  Download,\n  Share2,\n  Award,\n  Zap,\n  Star,\n  Trophy,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, useRef } from 'react';\n\nimport useAPI from '@/hooks/useAPI';\n\nimport './EmbedModal.css';\n\n// Importar el contexto global\nimport useByteMessageContext from '../../../hooks/useByteMessageContext';\nimport useModalContext from '../../../hooks/useModalContext';\n\nimport WhatsappIntegrationPanel from './WhatsappIntegrationPanel';\n// Si no tienes canvas-confetti, puedes instalarlo con: npm install canvas-confetti\n\n// Función pura para generar el código de embebido. Se mueve fuera del scope del componente\n// para evitar que se recree en cada render, ya que no depende de props o estado.\nconst generateEmbedCodeFromData = (publicId, options, baseUrl) =>\n  `<!-- Plubot Widget -->\n<div id=\"plubot-widget-container\"></div>\n<script src=\"${baseUrl}/embed/plubot.js\" id=\"plubot-script\"\n  data-bot-id=\"${publicId}\"\n  data-theme=\"${options.theme}\"\n  data-position=\"${options.position}\"\n  data-width=\"${options.width}\"\n  data-height=\"${options.height}\"\n  data-primary-color=\"${options.primaryColor}\"\n  data-welcome=\"${options.welcomeMessage}\">\n</script>\n<!-- End Plubot Widget -->`;\n\nconst EmbedModal = ({ plubotId, plubotName, onClose, onExport, flowData }) => {\n  // Usar el contexto global\n  const { showNotification } = useByteMessageContext();\n  const { closeModal } = useModalContext();\n\n  const [embedCode, setEmbedCode] = useState('');\n  const [directLink, setDirectLink] = useState('');\n  const [qrCode, setQrCode] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('link');\n  const [customization, setCustomization] = useState({\n    theme: 'light',\n    position: 'right',\n    width: '350px',\n    height: '500px',\n    primaryColor: '#4facfe',\n    welcomeMessage: '¡Hola! Soy tu asistente virtual.',\n  });\n  const { request } = useAPI();\n\n  // Referencia para el elemento donde lanzar confetti\n  const confettiReference = useRef();\n\n  // Estado para gamificación\n  const [shareCount, setShareCount] = useState(0);\n  const [achievements, setAchievements] = useState({\n    firstShare: false,\n    socialMedia: false,\n    embedMaster: false,\n    customizer: false,\n  });\n\n  // --- INICIO DE LA CORRECCIÓN DEL BUCLE INFINITO ---\n  // Se ha refactorizado la lógica de generación de recursos para eliminar el bucle infinito.\n  // El problema original era que las funciones `request` y `showNotification` de los hooks\n  // personalizados no estaban memoizadas, lo que causaba que se recrearan en cada render\n  // y dispararan el `useEffect` continuamente.\n  //\n  // La solución consiste en:\n  // 1. Unificar toda la lógica en un solo `useEffect`.\n  // 2. Hacer que el `useEffect` dependa EXCLUSIVAMENTE de los datos que deben\n  //    disparar una nueva generación de recursos: `plubotId` y `customization`.\n  // 3. Omitir intencionadamente las funciones inestables (`request`, `showNotification`)\n  //    de la lista de dependencias, aceptando la advertencia del linter para lograr\n  //    estabilidad funcional. Esto es una decisión de diseño consciente y necesaria.\n\n  useEffect(() => {\n    const generateResources = async () => {\n      if (!plubotId) {\n        setIsLoading(false);\n        showNotification('Error: ID del Plubot no proporcionado.', 'error');\n        return;\n      }\n\n      setIsLoading(true);\n\n      const generateFallbackResources = () => {\n        const baseUrl = globalThis.location.origin.replace('www.', '');\n        setDirectLink(`${baseUrl}/chat/${plubotId}`);\n        setEmbedCode(\n          generateEmbedCodeFromData(plubotId, customization, baseUrl),\n        );\n        setQrCode(\n          `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(`${baseUrl}/chat/${plubotId}`)}`,\n        );\n        showNotification(\n          'Recursos de respaldo generados (usando ID directo).',\n          'info',\n        );\n      };\n\n      try {\n        const response = await request('POST', `/plubots/${plubotId}/embed`, {\n          customization,\n        });\n\n        if (response && response.status === 'success' && response.data) {\n          const baseUrl = globalThis.location.origin.replace('www.', '');\n          setDirectLink(`${baseUrl}/chat/${response.data.publicId}`);\n          setEmbedCode(\n            generateEmbedCodeFromData(\n              response.data.publicId,\n              customization,\n              baseUrl,\n            ),\n          );\n          setQrCode(response.data.qrCodeUrl);\n          showNotification(\n            'Recursos de embebido generados correctamente.',\n            'success',\n          );\n\n          setTimeout(() => {\n            if (confettiReference.current) {\n              confetti({\n                particleCount: 200,\n                spread: 90,\n                origin: { y: 0.6 },\n                colors: ['#00e0ff', '#ff00ff', '#00ff9d', '#ffffff'],\n              });\n            }\n          }, 500);\n        } else {\n          generateFallbackResources();\n        }\n      } catch {\n        generateFallbackResources();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    generateResources();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plubotId, customization]);\n  // --- FIN DE LA CORRECCIÓN ---\n\n  const copyToClipboard = (text, type) => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        // Incrementar contador de comparticiones y usar el valor actualizado para logros\n        const newCount = shareCount + 1;\n        setShareCount(newCount);\n\n        // Verificar logros\n        const newAchievements = { ...achievements };\n\n        if (!newAchievements.firstShare) {\n          newAchievements.firstShare = true;\n          showNotification(\n            '¡Logro desbloqueado! Primera compartición',\n            'achievement',\n          );\n\n          // Lanzar confetti para celebrar el logro\n          confetti({\n            particleCount: 150,\n            spread: 100,\n            origin: { y: 0.6 },\n            colors: ['#FFD700', '#FFA500', '#FF4500'],\n          });\n        }\n\n        if (newCount >= 5 && !newAchievements.embedMaster) {\n          newAchievements.embedMaster = true;\n          showNotification(\n            '¡Logro desbloqueado! Maestro del Embebido',\n            'achievement',\n          );\n        }\n\n        setAchievements(newAchievements);\n\n        showNotification(\n          `${type} copiado al portapapeles! ¡Comparte tu creación!`,\n          'success',\n        );\n      })\n      .catch((error) => {\n        showNotification(`Error al copiar ${type.toLowerCase()}`, 'error');\n      });\n  };\n\n  const handleCustomizationChange = (key, value) => {\n    setCustomization((previous) => ({\n      ...previous,\n      [key]: value,\n    }));\n  };\n\n  const UniverseBackground = () => {\n    // Generar estrellas con diferentes tamaños, opacidades y velocidades de parpadeo\n    const renderStars = () => {\n      const stars = [];\n      const starCount = 100; // Cantidad de estrellas\n\n      for (let index = 0; index < starCount; index++) {\n        // Tamaño aleatorio para las estrellas\n        const size = Math.random() * 3 + 1;\n        // Colores para las estrellas\n        const colors = ['#fff', '#8df9ff', '#c8f4ff', '#e6fbff', '#d9e8ff'];\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        // Duración del parpadeo\n        const twinkleDuration = `${3 + Math.random() * 7}s`;\n        // Retraso del parpadeo\n        const twinkleDelay = `${Math.random() * 10}s`;\n        // Opacidad base\n        const opacity = 0.3 + Math.random() * 0.7;\n        // Tamaño del brillo\n        const glowSize = size * (1 + Math.random());\n\n        stars.push(\n          <div\n            key={`star-${index}`}\n            className='star'\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              '--star-size': `${size}px`,\n              '--star-opacity': opacity,\n              '--twinkle-duration': twinkleDuration,\n              '--twinkle-delay': twinkleDelay,\n              '--glow-size': `${glowSize}px`,\n              '--glow-color': color,\n              backgroundColor: color,\n            }}\n          />,\n        );\n      }\n\n      return stars;\n    };\n\n    return (\n      <div className='stars-container'>\n        {renderStars()}\n        <div className='nebula nebula-1' />\n        <div className='nebula nebula-2' />\n        <div className='nebula nebula-3' />\n      </div>\n    );\n  };\n\n  return (\n    <div className='embed-modal-overlay' ref={confettiReference}>\n      <UniverseBackground />\n      <div className='embed-modal'>\n        <div className='embed-modal-header'>\n          <h2>\n            <Share2 size={24} className='share-icon' /> ¡Comparte tu Plubot!\n          </h2>\n          <button\n            className='embed-modal-close-button'\n            aria-label='Cerrar modal'\n            onClick={() => {\n              if (closeModal) {\n                closeModal('embedModal');\n              } else if (typeof onClose === 'function') {\n                onClose();\n              }\n            }}\n          >\n            <X size={24} />\n          </button>\n        </div>\n\n        {/* Panel de logros */}\n        <div className='achievements-panel'>\n          <h3>\n            <Trophy size={20} /> Tus Logros\n          </h3>\n          <div className='achievements-grid'>\n            <div\n              className={`achievement ${achievements.firstShare ? 'unlocked' : 'locked'}`}\n            >\n              <Award size={24} />\n              <span>Primera Compartición</span>\n            </div>\n            <div\n              className={`achievement ${achievements.embedMaster ? 'unlocked' : 'locked'}`}\n            >\n              <Star size={24} />\n              <span>Maestro del Embebido</span>\n            </div>\n            <div\n              className={`achievement ${achievements.socialMedia ? 'unlocked' : 'locked'}`}\n            >\n              <Zap size={24} />\n              <span>Influencer Social</span>\n            </div>\n            <div\n              className={`achievement ${achievements.customizer ? 'unlocked' : 'locked'}`}\n            >\n              <Settings size={24} />\n              <span>Personalizador</span>\n            </div>\n          </div>\n        </div>\n\n        <div className='embed-tabs'>\n          <button\n            className={`embed-tab-button ${activeTab === 'link' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveTab('link');\n              if (achievements.firstShare) {\n                confetti({\n                  particleCount: 30,\n                  spread: 50,\n                  origin: { y: 0.6 },\n                });\n              }\n            }}\n          >\n            <Link size={18} />\n            Enlace Directo\n          </button>\n          <button\n            className={`embed-tab-button ${activeTab === 'embed' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveTab('embed');\n              if (achievements.embedMaster) {\n                confetti({\n                  particleCount: 30,\n                  spread: 50,\n                  origin: { y: 0.6 },\n                });\n              }\n            }}\n          >\n            <Code size={18} />\n            Código Embebido\n          </button>\n          <button\n            className={`embed-tab-button ${activeTab === 'customize' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveTab('customize');\n              // Desbloquear logro de personalización al visitar esta pestaña\n              if (!achievements.customizer) {\n                const newAchievements = { ...achievements, customizer: true };\n                setAchievements(newAchievements);\n                confetti({\n                  particleCount: 100,\n                  spread: 70,\n                  origin: { y: 0.6 },\n                  colors: ['#4facfe', '#00f2fe', '#00c6fb'],\n                });\n              }\n            }}\n          >\n            <Settings size={18} />\n            Personalizar\n          </button>\n          <button\n            className={`embed-tab-button ${activeTab === 'qr' ? 'active' : ''}`}\n            onClick={() => setActiveTab('qr')}\n          >\n            <Globe size={18} />\n            Código QR\n          </button>\n          <button\n            className={`embed-tab-button ${activeTab === 'whatsapp' ? 'active' : ''}`}\n            onClick={() => setActiveTab('whatsapp')}\n          >\n            <Share2 size={16} style={{ marginRight: '5px' }} />\n            WhatsApp\n          </button>\n        </div>\n\n        <div className='embed-content'>\n          {isLoading ? (\n            <div className='embed-loading'>\n              <div className='embed-spinner' />\n              <p>Generando recursos...</p>\n            </div>\n          ) : (\n            <>\n              {activeTab === 'link' && (\n                <div className='embed-section'>\n                  <h3>Enlace Directo</h3>\n\n                  <p>\n                    Comparte este enlace para que cualquier persona pueda\n                    acceder a tu Plubot:\n                  </p>\n                  <div className='embed-code-container'>\n                    <input\n                      type='text'\n                      value={directLink}\n                      readOnly\n                      className='embed-code-input'\n                    />\n                    <button\n                      className='embed-copy-button'\n                      onClick={() => copyToClipboard(directLink, 'Enlace')}\n                    >\n                      <Copy size={16} />\n                    </button>\n                  </div>\n                  <div className='embed-preview'>\n                    <h4>Vista previa</h4>\n                    <div className='embed-link-preview'>\n                      <div className='embed-preview-header'>\n                        <div className='embed-preview-icon' />\n                        <div className='embed-preview-title'>{plubotName}</div>\n                      </div>\n                      <div className='embed-preview-body'>\n                        <p>Chatbot creado con Plubot</p>\n                        <a\n                          onClick={(event) => {\n                            e.preventDefault();\n                            // Usar window.location.href para forzar una navegación completa\n                            globalThis.location.href = directLink;\n                          }}\n                          style={{ cursor: 'pointer' }}\n                          className='embed-preview-link'\n                        >\n                          <ExternalLink size={14} /> Abrir chat\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'embed' && (\n                <div className='embed-section'>\n                  <h3>Código Embebido</h3>\n                  <p>\n                    Copia este código HTML y pégalo en tu sitio web para\n                    integrar el Plubot:\n                  </p>\n                  <div className='embed-code-container'>\n                    <textarea\n                      value={embedCode}\n                      readOnly\n                      className='embed-code-textarea'\n                    />\n                    <button\n                      className='embed-copy-button'\n                      onClick={() => copyToClipboard(embedCode, 'Código')}\n                    >\n                      <Copy size={16} />\n                    </button>\n                  </div>\n                  <div className='embed-preview'>\n                    <h4>Vista previa</h4>\n                    <div\n                      className='embed-widget-preview'\n                      style={{\n                        width: customization.width,\n                        height: customization.height,\n                        maxWidth: '100%',\n                        position: 'relative',\n                      }}\n                    >\n                      <div\n                        className='embed-widget-header'\n                        style={{ backgroundColor: customization.primaryColor }}\n                      >\n                        <div className='embed-widget-title'>{plubotName}</div>\n                      </div>\n                      <div className='embed-widget-body'>\n                        <div className='embed-widget-message bot'>\n                          {customization.welcomeMessage}\n                        </div>\n                      </div>\n                      <div className='embed-widget-input'>\n                        <input\n                          type='text'\n                          placeholder='Escribe un mensaje...'\n                          disabled\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'qr' && (\n                <div className='embed-section'>\n                  <h3>Código QR</h3>\n                  <p>\n                    Escanea este código QR para acceder al Plubot desde\n                    cualquier dispositivo:\n                  </p>\n                  <div className='embed-qr-container'>\n                    {qrCode ? (\n                      <img\n                        src={qrCode}\n                        alt='QR Code'\n                        className='embed-qr-image'\n                      />\n                    ) : (\n                      <div className='embed-qr-placeholder'>\n                        <p>No se pudo generar el código QR</p>\n                      </div>\n                    )}\n                    <button\n                      className='embed-download-button'\n                      onClick={() => {\n                        if (qrCode) {\n                          const link = document.createElement('a');\n                          link.href = qrCode;\n                          link.download = `plubot-${plubotId}-qr.png`;\n                          document.body.append(link);\n                          link.click();\n                          link.remove();\n                        } else {\n                          showNotification(\n                            'No hay código QR para descargar',\n                            'error',\n                          );\n                        }\n                      }}\n                    >\n                      Descargar QR\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'whatsapp' && (\n                <WhatsappIntegrationPanel plubotId={plubotId} />\n              )}\n\n              {activeTab === 'export' && (\n                <div className='embed-section'>\n                  <h3>Exportar Flujo</h3>\n                  <p>\n                    Exporta tu flujo en formato JSON para respaldarlo o\n                    compartirlo con otros usuarios:\n                  </p>\n                  <div\n                    className='embed-export-actions'\n                    style={{\n                      marginTop: '20px',\n                      display: 'flex',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <button\n                      className='embed-action-button primary'\n                      style={{\n                        padding: '10px 20px',\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '8px',\n                      }}\n                      onClick={onExport}\n                    >\n                      <Download size={18} />\n                      Descargar JSON\n                    </button>\n                  </div>\n                  <div\n                    style={{\n                      marginTop: '20px',\n                      backgroundColor: '#f8f9fa',\n                      padding: '15px',\n                      borderRadius: '5px',\n                      border: '1px solid #e9ecef',\n                    }}\n                  >\n                    <h4 style={{ marginTop: '0', color: '#495057' }}>\n                      ¿Qué contiene el archivo exportado?\n                    </h4>\n                    <ul style={{ paddingLeft: '20px', color: '#6c757d' }}>\n                      <li>\n                        Todos los nodos de tu flujo con sus configuraciones\n                      </li>\n                      <li>Todas las conexiones entre nodos</li>\n                      <li>Posiciones de los elementos en el editor</li>\n                      <li>Propiedades y datos específicos de cada nodo</li>\n                    </ul>\n                    <p style={{ marginBottom: '0', color: '#6c757d' }}>\n                      Este archivo puede ser importado posteriormente para\n                      restaurar tu flujo exactamente como lo dejaste.\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'customize' && (\n                <div className='embed-section'>\n                  <h3>Personalizar Apariencia</h3>\n                  <div className='embed-customize-form'>\n                    <div className='embed-form-group'>\n                      <label>Tema:</label>\n                      <select\n                        value={customization.theme}\n                        onChange={(event) =>\n                          handleCustomizationChange('theme', e.target.value)\n                        }\n                      >\n                        <option value='light'>Claro</option>\n                        <option value='dark'>Oscuro</option>\n                        <option value='auto'>Automático</option>\n                      </select>\n                    </div>\n                    <div className='embed-form-group'>\n                      <label>Posición:</label>\n                      <select\n                        value={customization.position}\n                        onChange={(event) =>\n                          handleCustomizationChange('position', e.target.value)\n                        }\n                      >\n                        <option value='right'>Derecha</option>\n                        <option value='left'>Izquierda</option>\n                        <option value='center'>Centro</option>\n                      </select>\n                    </div>\n                    <div className='embed-form-group'>\n                      <label>Ancho:</label>\n                      <input\n                        type='text'\n                        value={customization.width}\n                        onChange={(event) =>\n                          handleCustomizationChange('width', e.target.value)\n                        }\n                      />\n                    </div>\n                    <div className='embed-form-group'>\n                      <label>Alto:</label>\n                      <input\n                        type='text'\n                        value={customization.height}\n                        onChange={(event) =>\n                          handleCustomizationChange('height', e.target.value)\n                        }\n                      />\n                    </div>\n                    <div className='embed-form-group'>\n                      <label>Color Primario:</label>\n                      <input\n                        type='color'\n                        value={customization.primaryColor}\n                        onChange={(event) =>\n                          handleCustomizationChange(\n                            'primaryColor',\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n                    <div className='embed-form-group'>\n                      <label>Mensaje de Bienvenida:</label>\n                      <textarea\n                        value={customization.welcomeMessage}\n                        onChange={(event) =>\n                          handleCustomizationChange(\n                            'welcomeMessage',\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        <div className='embed-modal-footer'>\n          <button className='embed-action-button secondary' onClick={onClose}>\n            Cerrar\n          </button>\n          <button\n            className='embed-action-button primary'\n            onClick={() => {\n              switch (activeTab) {\n                case 'link': {\n                  copyToClipboard(directLink, 'Enlace');\n\n                  break;\n                }\n                case 'embed': {\n                  copyToClipboard(embedCode, 'Código');\n\n                  break;\n                }\n                case 'customize': {\n                  useRealPlubotId();\n                  showNotification('Cambios aplicados', 'success');\n\n                  break;\n                }\n                // No default\n              }\n            }}\n          >\n            {activeTab === 'customize'\n              ? 'Aplicar Cambios'\n              : activeTab === 'export'\n                ? 'Exportar'\n                : 'Copiar'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nEmbedModal.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n  plubotName: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onExport: PropTypes.func.isRequired,\n  flowData: PropTypes.object.isRequired,\n};\n\nexport default EmbedModal;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/ImportExportModal.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (290). Maximum allowed is 80.",
        "line": 10,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 309,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'currentFlowData' variable.",
        "line": 26,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 26,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"currentFlowData\".",
        "line": 26,
        "column": 11,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 26,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'updateCurrentFlowData' variable.",
        "line": 26,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 26,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"updateCurrentFlowData\".",
        "line": 26,
        "column": 28,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 26,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'globalSetByteMessage' variable.",
        "line": 27,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 27,
        "endColumn": 65
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"globalSetByteMessage\".",
        "line": 27,
        "column": 45,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 27,
        "endColumn": 65
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 31,
        "column": 64,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 31,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [1016, 1020], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (91). Maximum allowed is 80.",
        "line": 76,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 166,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 76,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 166,
        "endColumn": 4
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'notifyMessage' is not defined.",
        "line": 140,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 140,
        "endColumn": 26
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 145,
        "column": 35,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 145,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [4806, 4810], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'notifyMessage' is not defined.",
        "line": 177,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 177,
        "endColumn": 20
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 263,
        "column": 58,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 263,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [8625, 8629], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 14,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport './ImportExportModal.css';\n// Importar el contexto global\nimport useByteMessageContext from '../../../hooks/useByteMessageContext';\nimport useFlowDataContext from '../../../hooks/useFlowDataContext';\nimport useModalContext from '../../../hooks/useModalContext';\n\nconst ImportExportModal = ({\n  nodes,\n  edges,\n  setNodes,\n  setEdges,\n  plubotData,\n  updatePlubotData,\n  exportFormat,\n  setExportFormat,\n  importData,\n  setImportData,\n  setExportMode,\n  setByteMessage: propertySetByteMessage, // Renombramos para evitar conflictos\n  onClose, // Mantener para retrocompatibilidad\n}) => {\n  // Usar el contexto global para notificaciones y gestión de modales\n  const { currentFlowData, updateCurrentFlowData } = useFlowDataContext();\n  const { showNotification, setByteMessage: globalSetByteMessage } =\n    useByteMessageContext();\n  const { closeModal } = useModalContext();\n\n  const [confirmationNeeded, setConfirmationNeeded] = useState(null);\n\n  // Función para mostrar mensajes utilizando múltiples métodos disponibles\n\n  const exportFlow = () => {\n    try {\n      const flowData = {\n        metadata: {\n          version: '1.0',\n          plubotName: plubotData?.name || 'Unnamed Plubot',\n          createdAt: new Date().toISOString(),\n          nodeCount: nodes.length,\n          edgeCount: edges.length,\n        },\n        nodes: nodes.map((node) => ({\n          ...node,\n          __rf: undefined,\n          dragging: undefined,\n          selected: undefined,\n        })),\n        edges,\n      };\n      const exportString = JSON.stringify(flowData, undefined, 2);\n      const blob = new Blob([exportString], {\n        type: 'text/plain;charset=utf-8',\n      });\n      const url = URL.createObjectURL(blob);\n      const downloadLink = document.createElement('a');\n      downloadLink.href = url;\n      downloadLink.download = `${plubotData?.name || 'plubot'}_flow_${new Date().toISOString().split('T')[0]}.${exportFormat}`;\n      document.body.append(downloadLink);\n      downloadLink.click();\n      downloadLink.remove();\n      showNotification(\n        `¡Flujo exportado con éxito! Se guardó como ${downloadLink.download}`,\n        'success',\n      );\n    } catch {\n      showNotification(\n        'Error al exportar el flujo. Por favor, intenta de nuevo.',\n        'error',\n      );\n    }\n  };\n\n  const importFlow = () => {\n    try {\n      if (!importData.trim()) {\n        showNotification(\n          'Por favor, ingresa datos de flujo para importar.',\n          'warning',\n        );\n        return;\n      }\n      const parsedData = JSON.parse(importData);\n      if (\n        !parsedData.nodes ||\n        !Array.isArray(parsedData.nodes) ||\n        !parsedData.edges ||\n        !Array.isArray(parsedData.edges)\n      ) {\n        throw new Error(\n          'Formato de datos inválido. El flujo debe contener arrays de nodos y aristas.',\n        );\n      }\n      const hasStart = parsedData.nodes.some((node) => node.type === 'start');\n      const hasMessage = parsedData.nodes.some(\n        (node) => node.type === 'message',\n      );\n      if (!hasStart || !hasMessage) {\n        showNotification(\n          'Precaución: El flujo importado puede estar incompleto. Asegúrate de tener nodos de inicio y mensaje.',\n          'warning',\n        );\n      }\n      const validNodes = parsedData.nodes.filter(\n        (node) =>\n          node &&\n          node.id &&\n          node.type &&\n          node.position &&\n          typeof node.position.x === 'number' &&\n          typeof node.position.y === 'number' &&\n          node.data &&\n          typeof node.data.label === 'string',\n      );\n      const validNodeIds = new Set(validNodes.map((node) => node.id));\n      const validEdges = parsedData.edges.filter(\n        (edge) =>\n          edge &&\n          edge.id &&\n          edge.source &&\n          edge.target &&\n          validNodeIds.has(edge.source) &&\n          validNodeIds.has(edge.target),\n      );\n      if (\n        validNodes.length < parsedData.nodes.length ||\n        validEdges.length < parsedData.edges.length\n      ) {\n        setConfirmationNeeded({\n          message: `Advertencia: ${parsedData.nodes.length - validNodes.length} nodos y ${\n            parsedData.edges.length - validEdges.length\n          } conexiones son inválidos y serán ignorados. ¿Deseas continuar?`,\n          onConfirm: () => {\n            setNodes(validNodes);\n            setEdges(validEdges);\n            setExportMode(false);\n            setImportData('');\n            notifyMessage(\n              `¡Flujo importado con éxito! Se cargaron ${validNodes.length} nodos y ${validEdges.length} conexiones.`,\n              'success',\n            );\n            closeModal('importExportModal');\n            setConfirmationNeeded(null);\n          },\n        });\n        return;\n      }\n      setNodes(validNodes);\n      setEdges(validEdges);\n      setExportMode(false);\n      setImportData('');\n      showNotification(\n        `¡Flujo importado con éxito! Se cargaron ${validNodes.length} nodos y ${validEdges.length} conexiones.`,\n        'success',\n      );\n      showNotification(\n        'Flujo importado con éxito. ¡Bienvenido de vuelta!',\n        'success',\n      );\n      closeModal('importExportModal'); // Cierra el modal al importar con éxito\n    } catch (error) {\n      showNotification(`Error al importar el flujo: ${error.message}`, 'error');\n    }\n  };\n\n  const importFromFile = async (event) => {\n    const [file] = event.target.files;\n    if (!file) {\n      return;\n    }\n    try {\n      const fileContent = await file.text();\n      setImportData(fileContent);\n    } catch (error) {\n      notifyMessage(`Error al leer el archivo: ${error.message}`, 'error');\n    }\n  };\n\n  return (\n    <div className='ts-import-export-modal'>\n      <div className='ts-modal-content'>\n        <div className='ts-modal-header'>\n          <h3>{importData ? 'Importar Flujo' : 'Exportar Flujo'}</h3>\n          <button\n            onClick={() => {\n              if (closeModal) {\n                closeModal('importExportModal');\n              } else if (typeof onClose === 'function') {\n                onClose();\n              }\n            }}\n            className='ts-close-button'\n          >\n            ✕\n          </button>\n        </div>\n\n        <div className='ts-modal-tabs'>\n          <button\n            className={importData ? '' : 'active'}\n            onClick={() => setImportData('')}\n          >\n            Exportar\n          </button>\n          <button\n            className={importData ? 'active' : ''}\n            onClick={() => setImportData(' ')}\n          >\n            Importar\n          </button>\n        </div>\n\n        {importData ? (\n          <div className='ts-import-section'>\n            <div className='ts-import-options'>\n              <h4>Importar Flujo</h4>\n              <p>\n                Puedes pegar el contenido del flujo directamente o seleccionar\n                un archivo:\n              </p>\n              <div className='ts-file-input-container'>\n                <input\n                  type='file'\n                  accept='.json,.txt'\n                  onChange={importFromFile}\n                  id='flow-file-input'\n                />\n                <label\n                  htmlFor='flow-file-input'\n                  className='ts-file-input-label'\n                >\n                  <i className='fas fa-file-upload' /> Seleccionar archivo\n                </label>\n              </div>\n              <textarea\n                placeholder='Pega aquí el contenido del flujo para importar...'\n                value={importData}\n                onChange={(event) => setImportData(event.target.value)}\n                rows={10}\n                className='ts-import-textarea'\n              />\n            </div>\n            <div className='ts-warning-message'>\n              <i className='fas fa-exclamation-triangle' />\n              <p>\n                La importación reemplazará tu flujo actual. Asegúrate de hacer\n                una copia de seguridad si no quieres perder tu trabajo actual.\n              </p>\n            </div>\n            <div className='ts-import-actions'>\n              <button\n                onClick={() => setImportData('')}\n                className='ts-secondary-button'\n              >\n                Cancelar\n              </button>\n              {confirmationNeeded ? (\n                <div className='ts-confirmation-buttons'>\n                  <p>{confirmationNeeded.message}</p>\n                  <button\n                    onClick={() => setConfirmationNeeded(null)}\n                    className='ts-secondary-button'\n                  >\n                    Cancelar\n                  </button>\n                  <button\n                    onClick={confirmationNeeded.onConfirm}\n                    className='ts-primary-button'\n                  >\n                    Continuar\n                  </button>\n                </div>\n              ) : (\n                <button onClick={importFlow} className='ts-primary-button'>\n                  <i className='fas fa-file-import' /> Importar Flujo\n                </button>\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className='ts-export-section'>\n            <div className='ts-export-options'>\n              <h4>Opciones de Exportación</h4>\n              <div className='ts-format-selection'>\n                <label>\n                  <input\n                    type='radio'\n                    name='exportFormat'\n                    value='json'\n                    checked={exportFormat === 'json'}\n                    onChange={() => setExportFormat('json')}\n                  />\n                  JSON\n                </label>\n              </div>\n            </div>\n            <div className='ts-import-actions'>\n              <button onClick={exportFlow} className='ts-primary-button'>\n                <i className='fas fa-download' /> Exportar Flujo\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nImportExportModal.propTypes = {\n  nodes: PropTypes.array.isRequired,\n  edges: PropTypes.array.isRequired,\n  setNodes: PropTypes.func.isRequired,\n  setEdges: PropTypes.func.isRequired,\n  plubotData: PropTypes.object.isRequired,\n  updatePlubotData: PropTypes.func.isRequired,\n  exportFormat: PropTypes.string.isRequired,\n  setExportFormat: PropTypes.func.isRequired,\n  importData: PropTypes.string.isRequired,\n  setImportData: PropTypes.func.isRequired,\n  setExportMode: PropTypes.func.isRequired,\n  setByteMessage: PropTypes.func,\n  onClose: PropTypes.func,\n};\n\nImportExportModal.defaultProps = {\n  setByteMessage: () => {\n    /* no-op */\n  },\n  onClose: () => {\n    /* no-op */\n  },\n};\n\nexport default ImportExportModal;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/SuggestionsModal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/SyncModal.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (179). Maximum allowed is 80.",
        "line": 17,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 255,
        "endColumn": 2
      },
      {
        "ruleId": "no-promise-executor-return",
        "severity": 2,
        "message": "Return values from promise executor functions cannot be read.",
        "line": 107,
        "column": 40,
        "nodeType": "CallExpression",
        "messageId": "returnsValue",
        "endLine": 107,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "wrapBraces",
            "fix": { "range": [4136, 4160], "text": "{setTimeout(resolve, 500)}" },
            "desc": "Wrap the expression in `{}`."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 80,
        "column": 21,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 80,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nimport './SyncModal.css';\n// Importar el contexto global\nimport useByteMessageContext from '../../../hooks/useByteMessageContext';\nimport useModalContext from '../../../hooks/useModalContext';\n\n/**\n * Modal para sincronizar y respaldar los cambios del editor de flujos\n * @param {Object} props - Propiedades del componente\n * @param {Function} props.onClose - Función para cerrar el modal\n * @param {Function} props.onSync - Función para sincronizar y guardar cambios\n * @param {Object} props.project - Información del proyecto actual\n * @param {Function} props.onNotify - Función para notificar eventos (opcional)\n */\nconst SyncModal = ({ onClose, onSync, project, onNotify }) => {\n  // Usar el contexto global para acceder a las funciones de notificación\n  const { showNotification } = useByteMessageContext();\n  const { closeModal } = useModalContext();\n\n  const [syncStatus, setSyncStatus] = useState('pending');\n  const [lastSyncTime, setLastSyncTime] = useState();\n  const [syncProgress, setSyncProgress] = useState(0);\n  const [syncMessage, setSyncMessage] = useState(\n    'Preparando sincronización...',\n  );\n\n  // Obtener la fecha y hora de la última sincronización\n  useEffect(() => {\n    // Intentar obtener la última sincronización del localStorage\n    const lastSync = localStorage.getItem(`plubot-last-sync-${project?.id}`);\n    if (lastSync) {\n      setLastSyncTime(new Date(lastSync));\n    }\n  }, [project]);\n\n  /**\n   * Función para notificar mensajes de forma segura utilizando el contexto global\n   * @param {string} message - El mensaje a mostrar\n   * @param {string} type - El tipo de notificación ('success', 'error', 'info', 'warning')\n   */\n  const notify = (message, type = 'info') => {\n    // 1. Actualizar el estado local del modal\n    setSyncMessage(message);\n\n    // 2. Usar el sistema global de notificaciones solo una vez (evitar duplicados)\n    // Solo mostrar notificación para errores o la notificación final de éxito\n    if (type === 'error' || message === 'Sincronización completada') {\n      // Limpiar notificaciones anteriores para evitar acumulación\n      if (typeof globalThis.clearAllNotifications === 'function') {\n        globalThis.clearAllNotifications();\n      }\n\n      showNotification(message, type, type === 'success' ? 2000 : 3000);\n    }\n\n    // 3. No usamos más onNotify para evitar duplicados\n  };\n\n  /**\n   * Función mejorada que maneja el proceso de sincronización\n   * Usando un sistema robusto de notificaciones con múltiples capas de fallback\n   */\n  const handleSync = async () => {\n    try {\n      setSyncStatus('syncing');\n      setSyncProgress(0);\n      setSyncMessage('Iniciando sincronización...');\n\n      // Limpiar todas las notificaciones existentes antes de comenzar\n      if (typeof globalThis.clearAllNotifications === 'function') {\n        globalThis.clearAllNotifications();\n      }\n\n      // Simular progreso de sincronización sin generar notificaciones para cada paso\n      let progress = 0;\n      const interval = setInterval(() => {\n        // eslint-disable-next-line sonarjs/pseudo-random\n        progress += Math.random() * 15;\n        if (progress > 100) progress = 100;\n        setSyncProgress(Math.floor(progress));\n\n        // Actualizar mensaje según el progreso (solo en el modal, sin notificaciones)\n        if (progress < 30) {\n          setSyncMessage('Preparando datos para sincronizar...');\n        } else if (progress < 60) {\n          setSyncMessage('Enviando datos al servidor...');\n        } else if (progress < 90) {\n          setSyncMessage('Verificando integridad...');\n        } else {\n          setSyncMessage('Finalizando sincronización...');\n        }\n\n        if (progress >= 100) {\n          clearInterval(interval);\n        }\n      }, 500);\n\n      // Intentar guardar realmente los cambios\n      try {\n        // IMPORTANTE: Wrap la llamada a onSync en un bloque try-catch separado\n        // para capturar cualquier error específico en esta operación\n        onSync();\n\n        // Simular finalización\n        await new Promise((resolve) => setTimeout(resolve, 500));\n\n        // Registrar la fecha y hora de sincronización\n        const now = new Date();\n        localStorage.setItem(\n          `plubot-last-sync-${project?.id}`,\n          now.toISOString(),\n        );\n        setLastSyncTime(now);\n        // Actualizar estado\n        setSyncStatus('success');\n\n        // Limpiar notificaciones anteriores para evitar acumulación\n        if (typeof globalThis.clearAllNotifications === 'function') {\n          globalThis.clearAllNotifications();\n        }\n\n        // Solo mostrar una notificación final de éxito\n        showNotification('Sincronización completada', 'success', 2000);\n        setSyncMessage('Sincronización completada');\n\n        // Guardar fecha de última sincronización\n        const syncTime = new Date(); // Usar un nombre diferente para evitar duplicación\n        setLastSyncTime(syncTime);\n        localStorage.setItem(\n          `plubot-last-sync-${project?.id}`,\n          syncTime.toISOString(),\n        );\n\n        // No cerramos automáticamente el modal para evitar confusión al usuario\n        // Forzar la notificación de éxito solo al final\n        notify('Sincronización completada', 'success');\n      } catch (saveError) {\n        throw new Error(\n          `Error al guardar: ${saveError.message || 'Error desconocido'}`,\n        );\n      }\n    } catch (error) {\n      setSyncStatus('error');\n      notify(\n        `Error al sincronizar: ${error.message || 'Error desconocido'}`,\n        'error',\n      );\n    }\n  };\n\n  return (\n    <div className='sync-modal-overlay'>\n      <div className='sync-modal'>\n        <div className='sync-modal-header'>\n          <h2>{project?.name || 'Editor de Flujos'} - Sincronización</h2>\n          <button\n            className='sync-modal-close'\n            onClick={() => {\n              // Limpiar notificaciones al cerrar\n              if (typeof globalThis.clearAllNotifications === 'function') {\n                globalThis.clearAllNotifications();\n              }\n\n              // Cerrar modal usando el mecanismo disponible\n              if (closeModal) {\n                closeModal('syncModal');\n              } else if (typeof onClose === 'function') {\n                onClose();\n              }\n            }}\n          >\n            ×\n          </button>\n        </div>\n\n        <div className='sync-modal-content'>\n          {syncStatus === 'pending' && (\n            <>\n              <div className='sync-modal-info'>\n                <p>Al sincronizar tu flujo de conversación:</p>\n                <ul>\n                  <li>Se guardarán todos los cambios realizados</li>\n                  <li>Se creará un respaldo local en tu navegador</li>\n                  <li>Se protegerá tu trabajo contra pérdidas accidentales</li>\n                </ul>\n\n                {lastSyncTime && (\n                  <p className='sync-last-time'>\n                    Última sincronización: {lastSyncTime.toLocaleString()}\n                  </p>\n                )}\n              </div>\n\n              <div className='sync-modal-actions'>\n                <button className='sync-button primary' onClick={handleSync}>\n                  Sincronizar Ahora\n                </button>\n                <button\n                  className='sync-button secondary'\n                  onClick={() => {\n                    if (closeModal) {\n                      closeModal('syncModal');\n                    } else if (typeof onClose === 'function') {\n                      onClose();\n                    }\n                  }}\n                >\n                  Cancelar\n                </button>\n              </div>\n            </>\n          )}\n\n          {syncStatus === 'syncing' && (\n            <div className='sync-progress-container'>\n              <div className='sync-progress-animation'>\n                <div className='sync-circle' />\n                <div className='sync-pulse' />\n              </div>\n              <p className='sync-message'>{syncMessage}</p>\n              <div className='sync-progress-bar'>\n                <div\n                  className='sync-progress-fill'\n                  style={{ width: `${syncProgress}%` }}\n                />\n              </div>\n            </div>\n          )}\n\n          {syncStatus === 'success' && (\n            <div className='sync-result success'>\n              <div className='sync-success-icon'>✓</div>\n              <p>{syncMessage}</p>\n            </div>\n          )}\n\n          {syncStatus === 'error' && (\n            <div className='sync-result error'>\n              <div className='sync-error-icon'>!</div>\n              <p>{syncMessage}</p>\n              <button className='sync-button primary' onClick={handleSync}>\n                Reintentar\n              </button>\n              <button className='sync-button secondary' onClick={onClose}>\n                Cerrar\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSyncModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  onSync: PropTypes.func.isRequired,\n  project: PropTypes.object,\n  onNotify: PropTypes.func,\n};\n\nexport default SyncModal;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/TemplateSelector.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (703). Maximum allowed is 80.",
        "line": 9,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 723,
        "endColumn": 2
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 702,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 706,
        "endColumn": 16
      },
      {
        "ruleId": "jsx-a11y/no-static-element-interactions",
        "severity": 2,
        "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
        "line": 702,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 706,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { X, Zap, Star, Award, Cpu } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport './TemplateSelector.css';\n\n// Importar fuentes para el estilo cyberpunk\nimport '@fontsource/orbitron/400.css';\n\nconst TemplateSelector = ({ onSelectTemplate, onClose, className }) => {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [animateItems, setAnimateItems] = useState(false);\n\n  useEffect(() => {\n    // Activar la animación de entrada de los elementos después de un breve retraso\n    const timer = setTimeout(() => setAnimateItems(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const categories = [\n    { id: 'all', name: 'Todos' },\n    { id: 'basic', name: 'Básicos' },\n    { id: 'advanced', name: 'Avanzados' },\n    { id: 'ai', name: 'IA' },\n  ];\n\n  const templates = [\n    {\n      id: 'customer-service',\n      name: 'Atención al Cliente',\n      description:\n        'Flujo básico para atender consultas y transferir a un agente',\n      category: 'basic',\n      icon: <Star size={20} />,\n      nodes: [\n        {\n          id: 'start-1',\n          type: 'start',\n          position: { x: 100, y: 100 },\n          data: { label: 'Inicio' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'message-1',\n          type: 'message',\n          position: { x: 300, y: 100 },\n          data: {\n            label: 'Bienvenida',\n            message:\n              '¡Hola! Bienvenido a nuestro soporte. ¿En qué puedo ayudarte?',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'decision-1',\n          type: 'decision',\n          position: { x: 500, y: 100 },\n          data: {\n            label: 'Consulta',\n            question: '¿Tu consulta es técnica o general?',\n            outputs: ['Técnica', 'General'],\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'option-1',\n          type: 'option',\n          position: { x: 700, y: 50 },\n          data: {\n            label: 'Técnica',\n            condition: 'Igual a: Técnica',\n            parentDecisionId: 'decision-1',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'option-2',\n          type: 'option',\n          position: { x: 700, y: 150 },\n          data: {\n            label: 'General',\n            condition: 'Igual a: General',\n            parentDecisionId: 'decision-1',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'end-1',\n          type: 'end',\n          position: { x: 900, y: 100 },\n          data: { label: 'Fin', message: 'Transferido a un agente.' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n      ],\n      edges: [\n        {\n          id: 'e1',\n          source: 'start-1',\n          target: 'message-1',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e2',\n          source: 'message-1',\n          target: 'decision-1',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e3',\n          source: 'decision-1',\n          sourceHandle: 'output-0',\n          target: 'option-1',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e4',\n          source: 'decision-1',\n          sourceHandle: 'output-1',\n          target: 'option-2',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e5',\n          source: 'option-1',\n          target: 'end-1',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e6',\n          source: 'option-2',\n          target: 'end-1',\n          type: 'default',\n          animated: true,\n        },\n      ],\n    },\n    // Nueva plantilla avanzada de IA\n    {\n      id: 'ai-assistant',\n      name: 'Asistente IA Avanzado',\n      description:\n        'Flujo avanzado con procesamiento de lenguaje natural y toma de decisiones basada en IA',\n      category: 'ai',\n      icon: <Cpu size={20} />,\n      nodes: [\n        {\n          id: 'start-node',\n          type: 'start',\n          position: { x: 100, y: 250 },\n          data: { label: 'Inicio' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'welcome-message',\n          type: 'message',\n          position: { x: 250, y: 250 },\n          data: {\n            label: 'Bienvenida',\n            message:\n              '¡Hola! Soy tu asistente virtual con IA. ¿En qué puedo ayudarte hoy?',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'nlp-processing',\n          type: 'ai',\n          position: { x: 450, y: 250 },\n          data: {\n            label: 'Procesamiento NLP',\n            aiModel: 'GPT-4',\n            prompt: 'Analizar la intención del usuario y clasificarla',\n          },\n          width: 180,\n          height: 100,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'intent-decision',\n          type: 'decision',\n          position: { x: 700, y: 250 },\n          data: {\n            label: 'Clasificación de Intención',\n            question: '¿Cuál es la intención del usuario?',\n            outputs: ['Consulta', 'Soporte', 'Compra', 'Otro'],\n          },\n          width: 180,\n          height: 100,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'query-option',\n          type: 'option',\n          position: { x: 950, y: 150 },\n          data: {\n            label: 'Consulta',\n            condition: 'Igual a: Consulta',\n            parentDecisionId: 'intent-decision',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'support-option',\n          type: 'option',\n          position: { x: 950, y: 250 },\n          data: {\n            label: 'Soporte',\n            condition: 'Igual a: Soporte',\n            parentDecisionId: 'intent-decision',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'purchase-option',\n          type: 'option',\n          position: { x: 950, y: 350 },\n          data: {\n            label: 'Compra',\n            condition: 'Igual a: Compra',\n            parentDecisionId: 'intent-decision',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'ai-response',\n          type: 'ai',\n          position: { x: 1150, y: 250 },\n          data: {\n            label: 'Generar Respuesta',\n            aiModel: 'GPT-4',\n            prompt:\n              'Generar una respuesta personalizada basada en la intención del usuario',\n          },\n          width: 180,\n          height: 100,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'final-message',\n          type: 'message',\n          position: { x: 1350, y: 250 },\n          data: {\n            label: 'Respuesta Final',\n            message: 'Aquí está tu respuesta personalizada generada por IA.',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'end-node',\n          type: 'end',\n          position: { x: 1550, y: 250 },\n          data: { label: 'Fin', message: 'Conversación finalizada.' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n      ],\n      edges: [\n        {\n          id: 'e1-ai',\n          source: 'start-node',\n          target: 'welcome-message',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e2-ai',\n          source: 'welcome-message',\n          target: 'nlp-processing',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e3-ai',\n          source: 'nlp-processing',\n          target: 'intent-decision',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e4-ai',\n          source: 'intent-decision',\n          sourceHandle: 'output-0',\n          target: 'query-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e5-ai',\n          source: 'intent-decision',\n          sourceHandle: 'output-1',\n          target: 'support-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e6-ai',\n          source: 'intent-decision',\n          sourceHandle: 'output-2',\n          target: 'purchase-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e7-ai',\n          source: 'query-option',\n          target: 'ai-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e8-ai',\n          source: 'support-option',\n          target: 'ai-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e9-ai',\n          source: 'purchase-option',\n          target: 'ai-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e10-ai',\n          source: 'ai-response',\n          target: 'final-message',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e11-ai',\n          source: 'final-message',\n          target: 'end-node',\n          type: 'default',\n          animated: true,\n        },\n      ],\n    },\n    // Otra plantilla avanzada\n    {\n      id: 'multi-channel',\n      name: 'Flujo Multicanal',\n      description:\n        'Flujo avanzado para gestionar interacciones a través de múltiples canales de comunicación',\n      category: 'advanced',\n      icon: <Zap size={20} />,\n      nodes: [\n        {\n          id: 'start-mc',\n          type: 'start',\n          position: { x: 100, y: 200 },\n          data: { label: 'Inicio' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'channel-detection',\n          type: 'decision',\n          position: { x: 300, y: 200 },\n          data: {\n            label: 'Detección de Canal',\n            question: '¿Qué canal está usando el cliente?',\n            outputs: ['Web', 'Móvil', 'WhatsApp', 'Email'],\n          },\n          width: 180,\n          height: 100,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'web-option',\n          type: 'option',\n          position: { x: 600, y: 100 },\n          data: {\n            label: 'Web',\n            condition: 'Igual a: Web',\n            parentDecisionId: 'channel-detection',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'mobile-option',\n          type: 'option',\n          position: { x: 600, y: 200 },\n          data: {\n            label: 'Móvil',\n            condition: 'Igual a: Móvil',\n            parentDecisionId: 'channel-detection',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'whatsapp-option',\n          type: 'option',\n          position: { x: 600, y: 300 },\n          data: {\n            label: 'WhatsApp',\n            condition: 'Igual a: WhatsApp',\n            parentDecisionId: 'channel-detection',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'email-option',\n          type: 'option',\n          position: { x: 600, y: 400 },\n          data: {\n            label: 'Email',\n            condition: 'Igual a: Email',\n            parentDecisionId: 'channel-detection',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'web-response',\n          type: 'message',\n          position: { x: 850, y: 100 },\n          data: {\n            label: 'Respuesta Web',\n            message:\n              'Bienvenido a nuestro chat web. ¿En qué podemos ayudarte hoy?',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'mobile-response',\n          type: 'message',\n          position: { x: 850, y: 200 },\n          data: {\n            label: 'Respuesta Móvil',\n            message: 'Bienvenido a nuestra app móvil. ¿Cómo podemos asistirte?',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'whatsapp-response',\n          type: 'message',\n          position: { x: 850, y: 300 },\n          data: {\n            label: 'Respuesta WhatsApp',\n            message:\n              'Hola, gracias por contactarnos por WhatsApp. ¿En qué podemos ayudarte?',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'email-response',\n          type: 'message',\n          position: { x: 850, y: 400 },\n          data: {\n            label: 'Respuesta Email',\n            message:\n              'Gracias por tu email. Hemos recibido tu consulta y responderemos a la brevedad.',\n          },\n          width: 150,\n          height: 80,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n        {\n          id: 'end-mc',\n          type: 'end',\n          position: { x: 1100, y: 250 },\n          data: { label: 'Fin', message: 'Interacción completada.' },\n          width: 80,\n          height: 40,\n          draggable: true,\n          selectable: true,\n          zIndex: 1000,\n        },\n      ],\n      edges: [\n        {\n          id: 'e1-mc',\n          source: 'start-mc',\n          target: 'channel-detection',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e2-mc',\n          source: 'channel-detection',\n          sourceHandle: 'output-0',\n          target: 'web-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e3-mc',\n          source: 'channel-detection',\n          sourceHandle: 'output-1',\n          target: 'mobile-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e4-mc',\n          source: 'channel-detection',\n          sourceHandle: 'output-2',\n          target: 'whatsapp-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e5-mc',\n          source: 'channel-detection',\n          sourceHandle: 'output-3',\n          target: 'email-option',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e6-mc',\n          source: 'web-option',\n          target: 'web-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e7-mc',\n          source: 'mobile-option',\n          target: 'mobile-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e8-mc',\n          source: 'whatsapp-option',\n          target: 'whatsapp-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e9-mc',\n          source: 'email-option',\n          target: 'email-response',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e10-mc',\n          source: 'web-response',\n          target: 'end-mc',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e11-mc',\n          source: 'mobile-response',\n          target: 'end-mc',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e12-mc',\n          source: 'whatsapp-response',\n          target: 'end-mc',\n          type: 'default',\n          animated: true,\n        },\n        {\n          id: 'e13-mc',\n          source: 'email-response',\n          target: 'end-mc',\n          type: 'default',\n          animated: true,\n        },\n      ],\n    },\n  ];\n\n  const handleSelectTemplate = (template) => {\n    onSelectTemplate(template);\n    onClose();\n  };\n\n  // Filtrar plantillas según la categoría seleccionada\n  const filteredTemplates =\n    selectedCategory === 'all'\n      ? templates\n      : templates.filter((template) => template.category === selectedCategory);\n\n  return (\n    <div className={`template-selector-wrapper ${className || ''}`}>\n      <div className='ts-modal'>\n        <button className='ts-btn-close' onClick={onClose} aria-label='Cerrar'>\n          <X size={22} />\n        </button>\n        <div className='ts-header'>\n          <h2>Selecciona una plantilla</h2>\n        </div>\n\n        <div className='ts-categories'>\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              className={`ts-category-btn ${selectedCategory === category.id ? 'active' : ''}`}\n              onClick={() => setSelectedCategory(category.id)}\n            >\n              {category.name}\n            </button>\n          ))}\n        </div>\n\n        <div className='ts-content'>\n          <div className={`ts-template-list ${animateItems ? 'animate' : ''}`}>\n            {filteredTemplates.map((template) => (\n              <div\n                key={template.id}\n                className='ts-template-item'\n                onClick={() => handleSelectTemplate(template)}\n              >\n                <div className='template-icon'>\n                  {template.icon || <Award size={20} />}\n                </div>\n                <h3>{template.name}</h3>\n                <p>{template.description}</p>\n                <div className='template-preview'>\n                  {/* Aquí podría ir una vista previa del flujo */}\n                  <span className='preview-text'>Vista previa</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTemplateSelector.propTypes = {\n  onSelectTemplate: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default TemplateSelector;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/modals/WhatsappIntegrationPanel.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (141). Maximum allowed is 80.",
        "line": 11,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 164,
        "endColumn": 2
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 81,
        "column": 21,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 81,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [2492, 2496], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { CheckCircle, QrCode, RefreshCw, XCircle } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\n\nimport useAPI from '@/hooks/useAPI';\n\nimport useByteMessageContext from '../../../hooks/useByteMessageContext';\n\nimport './WhatsappIntegrationPanel.css';\n\nconst WhatsappIntegrationPanel = ({ plubotId }) => {\n  const { showNotification } = useByteMessageContext();\n  const { request, isLoading: isApiLoading } = useAPI();\n\n  const [connection, setConnection] = useState();\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  const [isPolling, setIsPolling] = useState(false);\n  const previousConnectionStatus = useRef();\n\n  const checkStatus = useCallback(async () => {\n    try {\n      const response = await request('GET', `whatsapp/status/${plubotId}`);\n      if (response) {\n        setConnection(response);\n        if (response.status === 'connected') {\n          setIsPolling(false);\n          setQrCodeUrl('');\n        }\n      }\n    } catch {\n      // Silently fail, the polling will continue\n    }\n  }, [plubotId, request]);\n\n  useEffect(() => {\n    checkStatus(); // Check status on initial load\n  }, [checkStatus]);\n\n  useEffect(() => {\n    let intervalId;\n    if (isPolling) {\n      intervalId = setInterval(checkStatus, 5000); // Poll every 5 seconds\n    }\n    return () => clearInterval(intervalId);\n  }, [isPolling, checkStatus]);\n\n  useEffect(() => {\n    if (\n      connection?.status === 'connected' &&\n      previousConnectionStatus.current !== 'connected'\n    ) {\n      showNotification('¡Conexión con WhatsApp establecida!', 'success');\n    }\n    previousConnectionStatus.current = connection?.status;\n  }, [connection, showNotification]);\n\n  const handleInitiateConnection = async () => {\n    try {\n      const response = await request('POST', 'whatsapp/initiate', { plubotId });\n      if (response && response.qrCodeUrl) {\n        setQrCodeUrl(response.qrCodeUrl);\n        setIsPolling(true);\n        showNotification('Escanea el código QR con tu WhatsApp', 'info');\n      } else {\n        showNotification(\n          'No se pudo generar el código QR. Inténtalo de nuevo.',\n          'error',\n        );\n      }\n    } catch (error) {\n      showNotification(\n        error.message || 'Error al iniciar la conexión.',\n        'error',\n      );\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await request('POST', 'whatsapp/disconnect', { plubotId });\n      setConnection(null);\n      setIsPolling(false);\n      setQrCodeUrl('');\n      showNotification('Se ha desconectado de WhatsApp.', 'success');\n    } catch (error) {\n      showNotification(error.message || 'Error al desconectar.', 'error');\n    }\n  };\n\n  const renderContent = () => {\n    if (isApiLoading && !connection) {\n      return <div className='loading-spinner'>Cargando estado...</div>;\n    }\n\n    if (connection && connection.status === 'connected') {\n      return (\n        <div className='connection-status connected'>\n          <CheckCircle size={40} color='#25D366' />\n          <h4>¡Conectado!</h4>\n          <p>\n            Este flujo está activo en el número{' '}\n            <strong>{connection.whatsappNumber || 'tu número'}</strong>.\n          </p>\n          <button\n            className='whatsapp-button disconnect'\n            onClick={handleDisconnect}\n            disabled={isApiLoading}\n          >\n            <XCircle size={18} />\n            Desconectar\n          </button>\n        </div>\n      );\n    }\n\n    if (qrCodeUrl) {\n      return (\n        <div className='qr-code-container'>\n          <h4>Escanea para Conectar</h4>\n          <p>\n            Abre WhatsApp en tu teléfono y escanea este código para vincular tu\n            número.\n          </p>\n          <img src={qrCodeUrl} alt='WhatsApp QR Code' />\n          {isPolling && (\n            <div className='polling-indicator'>\n              <RefreshCw size={16} className='spin' />\n              <span>Esperando confirmación...</span>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div className='initiate-connection'>\n        <QrCode size={40} color='#6c757d' />\n        <h4>El flujo no está conectado</h4>\n        <p>\n          Genera un código QR para vincular este flujo a un número de WhatsApp.\n        </p>\n        <button\n          className='whatsapp-button'\n          onClick={handleInitiateConnection}\n          disabled={isApiLoading}\n        >\n          Generar QR de Conexión\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <div className='whatsapp-integration-panel'>\n      <h3>📲 Conectar a WhatsApp</h3>\n      <p className='whatsapp-explanation'>\n        Conecta este flujo a tu cuenta de WhatsApp para que Plubot interactúe\n        automáticamente con tus clientes. La conexión se realiza escaneando un\n        código QR.\n      </p>\n      {renderContent()}\n    </div>\n  );\n};\n\nWhatsappIntegrationPanel.propTypes = {\n  plubotId: PropTypes.string.isRequired,\n};\n\nexport default WhatsappIntegrationPanel;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/actionnode/ActionNode.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (292). Maximum allowed is 80.",
        "line": 39,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 333,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 39,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 333,
        "endColumn": 4
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 61,
        "column": 28,
        "nodeType": "MemberExpression",
        "endLine": 61,
        "endColumn": 43
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 80,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 80,
        "endColumn": 51
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 83,
        "column": 28,
        "nodeType": "MemberExpression",
        "endLine": 83,
        "endColumn": 43
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 86,
        "column": 47,
        "nodeType": "MemberExpression",
        "endLine": 86,
        "endColumn": 75
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 89,
        "column": 47,
        "nodeType": "MemberExpression",
        "endLine": 89,
        "endColumn": 75
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 106,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 106,
        "endColumn": 41
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (293). Maximum allowed is 80.",
        "line": 344,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 656,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 22. Maximum allowed is 10.",
        "line": 344,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 656,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { MoreHorizontal, Edit2, X, ChevronDown, ChevronUp } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';\nimport { Handle } from 'reactflow';\n\nimport { usePermissions } from '@/hooks/usePermissions';\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport ContextMenu from '../../ui/context-menu';\n\nimport './ActionNode.css';\n\nconst areActionNodePropertiesEqual = (previousProperties, nextProperties) => {\n  if (\n    previousProperties.selected !== nextProperties.selected ||\n    previousProperties.isConnectable !== nextProperties.isConnectable\n  ) {\n    return false;\n  }\n\n  return (\n    JSON.stringify(previousProperties.data) ===\n    JSON.stringify(nextProperties.data)\n  );\n};\n\nconst ACTION_TYPES = [\n  { value: 'sendEmail', label: 'Enviar Correo', icon: '📧' },\n  { value: 'saveData', label: 'Guardar Datos', icon: '💾' },\n  { value: 'sendNotification', label: 'Enviar Notificación', icon: '🔔' },\n  { value: 'apiCall', label: 'Llamada a API', icon: '🌐' },\n  { value: 'transformData', label: 'Transformar Datos', icon: '🔄' },\n  { value: 'conditional', label: 'Ejecutar Condicional', icon: '⚙️' },\n  { value: 'delay', label: 'Aplicar Retraso', icon: '⏱️' },\n  { value: 'webhook', label: 'Webhook', icon: '🔗' },\n];\n\nconst ParameterFields = memo(\n  ({ actionType, parameters, onParameterChange }) => {\n    const inputReferences = useRef({});\n\n    const renderInputField = useCallback(\n      ({ key, placeholder, type = 'text', options }) => {\n        const adjustHeight = (reference) => {\n          if (reference.current) {\n            reference.current.style.height = 'auto';\n            reference.current.style.height = `${Math.min(reference.current.scrollHeight, 200)}px`;\n          }\n        };\n\n        return (\n          <div key={key} className='parameter-field'>\n            <label htmlFor={`param-${key}`} className='parameter-label'>\n              {placeholder}\n            </label>\n            {(() => {\n              if (type === 'select' && options) {\n                return (\n                  <select\n                    id={`param-${key}`}\n                    value={parameters[key] || ''}\n                    onChange={(event) =>\n                      onParameterChange(key, event.target.value)\n                    }\n                    className='action-node-input parameter-select'\n                  >\n                    <option value=''>Selecciona una opción&hellip;</option>\n                    {options.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                );\n              }\n              if (type === 'textarea') {\n                return (\n                  <textarea\n                    ref={(element) => {\n                      inputReferences.current[key] = element;\n                    }}\n                    id={`param-${key}`}\n                    value={parameters[key] || ''}\n                    onChange={(event) => {\n                      onParameterChange(key, event.target.value);\n                      adjustHeight({ current: inputReferences.current[key] });\n                    }}\n                    onFocus={() =>\n                      adjustHeight({ current: inputReferences.current[key] })\n                    }\n                    placeholder={placeholder}\n                    className='action-node-input parameter-textarea'\n                    rows={3}\n                    style={{\n                      minHeight: '60px',\n                      maxHeight: '200px',\n                      overflowY: 'auto',\n                    }}\n                  />\n                );\n              }\n              return (\n                <input\n                  id={`param-${key}`}\n                  type={type}\n                  value={parameters[key] || ''}\n                  onChange={(event) =>\n                    onParameterChange(\n                      key,\n                      type === 'number'\n                        ? Number(event.target.value)\n                        : event.target.value,\n                    )\n                  }\n                  placeholder={placeholder}\n                  className='action-node-input'\n                  style={{ minHeight: '30px' }}\n                />\n              );\n            })()}\n          </div>\n        );\n      },\n      [parameters, onParameterChange],\n    );\n\n    switch (actionType) {\n      case 'sendEmail': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({ key: 'to', placeholder: 'Destinatario' })}\n            {renderInputField({ key: 'cc', placeholder: 'CC' })}\n            {renderInputField({ key: 'subject', placeholder: 'Asunto' })}\n            {renderInputField({\n              key: 'template',\n              placeholder: 'Plantilla',\n              type: 'select',\n              options: [\n                { value: 'welcome', label: 'Bienvenida' },\n                { value: 'notification', label: 'Notificación' },\n                { value: 'reminder', label: 'Recordatorio' },\n                { value: 'custom', label: 'Personalizada' },\n              ],\n            })}\n            {parameters.template === 'custom' &&\n              renderInputField({\n                key: 'body',\n                placeholder: 'Contenido',\n                type: 'textarea',\n              })}\n          </div>\n        );\n      }\n      case 'saveData': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({ key: 'key', placeholder: 'Clave de datos' })}\n            {renderInputField({ key: 'value', placeholder: 'Valor' })}\n            {renderInputField({\n              key: 'dataType',\n              placeholder: 'Tipo de dato',\n              type: 'select',\n              options: [\n                { value: 'string', label: 'Texto' },\n                { value: 'number', label: 'Número' },\n                { value: 'boolean', label: 'Booleano' },\n                { value: 'object', label: 'Objeto' },\n              ],\n            })}\n            {renderInputField({\n              key: 'storage',\n              placeholder: 'Almacenamiento',\n              type: 'select',\n              options: [\n                { value: 'session', label: 'Sesión' },\n                { value: 'local', label: 'Local' },\n                { value: 'database', label: 'Base de datos' },\n              ],\n            })}\n          </div>\n        );\n      }\n      case 'sendNotification': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({ key: 'message', placeholder: 'Mensaje' })}\n            {renderInputField({\n              key: 'type',\n              placeholder: 'Tipo',\n              type: 'select',\n              options: [\n                { value: 'info', label: 'Información' },\n                { value: 'success', label: 'Éxito' },\n                { value: 'warning', label: 'Advertencia' },\n                { value: 'error', label: 'Error' },\n              ],\n            })}\n            {renderInputField({\n              key: 'duration',\n              placeholder: 'Duración (seg)',\n              type: 'number',\n            })}\n          </div>\n        );\n      }\n      case 'apiCall': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({ key: 'url', placeholder: 'URL' })}\n            {renderInputField({\n              key: 'method',\n              placeholder: 'Método',\n              type: 'select',\n              options: [\n                { value: 'GET', label: 'GET' },\n                { value: 'POST', label: 'POST' },\n                { value: 'PUT', label: 'PUT' },\n                { value: 'DELETE', label: 'DELETE' },\n              ],\n            })}\n            {renderInputField({\n              key: 'headers',\n              placeholder: 'Encabezados',\n              type: 'textarea',\n            })}\n            {renderInputField({\n              key: 'body',\n              placeholder: 'Cuerpo',\n              type: 'textarea',\n            })}\n          </div>\n        );\n      }\n      case 'transformData': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({\n              key: 'inputVariable',\n              placeholder: 'Variable de entrada',\n            })}\n            {renderInputField({\n              key: 'transformation',\n              placeholder: 'Transformación',\n              type: 'select',\n              options: [\n                { value: 'uppercase', label: 'Convertir a mayúsculas' },\n                { value: 'lowercase', label: 'Convertir a minúsculas' },\n                { value: 'number', label: 'Convertir a número' },\n                { value: 'json', label: 'Formato JSON' },\n                { value: 'custom', label: 'Personalizada' },\n              ],\n            })}\n            {parameters.transformation === 'custom' &&\n              renderInputField({\n                key: 'formula',\n                placeholder: 'Fórmula personalizada',\n                type: 'textarea',\n              })}\n            {renderInputField({\n              key: 'outputVariable',\n              placeholder: 'Variable de salida',\n            })}\n          </div>\n        );\n      }\n      case 'conditional': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({\n              key: 'variable',\n              placeholder: 'Variable a evaluar',\n            })}\n            {renderInputField({\n              key: 'operator',\n              placeholder: 'Operador',\n              type: 'select',\n              options: [\n                { value: 'equal', label: 'Es igual a' },\n                { value: 'notEqual', label: 'No es igual a' },\n                { value: 'contains', label: 'Contiene' },\n                { value: 'greater', label: 'Mayor que' },\n                { value: 'less', label: 'Menor que' },\n              ],\n            })}\n            {renderInputField({\n              key: 'value',\n              placeholder: 'Valor de comparación',\n            })}\n          </div>\n        );\n      }\n      case 'delay': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({\n              key: 'duration',\n              placeholder: 'Duración',\n              type: 'number',\n            })}\n            {renderInputField({\n              key: 'unit',\n              placeholder: 'Unidad',\n              type: 'select',\n              options: [\n                { value: 'milliseconds', label: 'Milisegundos' },\n                { value: 'seconds', label: 'Segundos' },\n                { value: 'minutes', label: 'Minutos' },\n                { value: 'hours', label: 'Horas' },\n              ],\n            })}\n          </div>\n        );\n      }\n      case 'webhook': {\n        return (\n          <div className='parameter-container'>\n            {renderInputField({\n              key: 'endpoint',\n              placeholder: 'Punto de conexión',\n            })}\n            {renderInputField({ key: 'event', placeholder: 'Evento' })}\n            {renderInputField({\n              key: 'secretKey',\n              placeholder: 'Clave secreta',\n            })}\n          </div>\n        );\n      }\n      default: {\n        break;\n      }\n    }\n  },\n);\n\nParameterFields.propTypes = {\n  actionType: PropTypes.string,\n  parameters: PropTypes.object.isRequired,\n  onParameterChange: PropTypes.func.isRequired,\n};\n\nParameterFields.displayName = 'ParameterFields';\n\nconst ActionNode = ({ data, isConnectable = true, selected = false, id }) => {\n  const { description, actionType, parameters, isCollapsed } = data;\n  const updateNodeData = useFlowStore((state) => state.updateNodeData);\n  const deleteNode = useFlowStore((state) => state.deleteNode);\n  const nodeReference = useRef(null);\n  const textareaReference = useRef(null);\n  const permissions = usePermissions();\n  const [isHovered, setIsHovered] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editDescription, setEditDescription] = useState('');\n  const [editActionType, setEditActionType] = useState('');\n  const [editParameters, setEditParameters] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [contextMenuPosition, setContextMenuPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  const handleSaveChanges = useCallback(() => {\n    if (!permissions.canEdit) return;\n    setIsSaving(true);\n    updateNodeData(id, {\n      description: editDescription,\n      actionType: editActionType,\n      parameters: editParameters,\n    });\n    setIsEditing(false);\n  }, [\n    permissions.canEdit,\n    id,\n    updateNodeData,\n    editDescription,\n    editActionType,\n    editParameters,\n  ]);\n\n  const handleCancelEditing = useCallback(() => {\n    setIsEditing(false);\n  }, []);\n\n  const startEditing = useCallback(() => {\n    if (!permissions.canEdit || isEditing) return;\n    setEditDescription(description);\n    setEditActionType(actionType);\n    setEditParameters(parameters || {});\n    setIsEditing(true);\n    setTimeout(() => {\n      textareaReference.current?.focus();\n      textareaReference.current?.select();\n    }, 10);\n  }, [permissions.canEdit, isEditing, description, actionType, parameters]);\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        handleSaveChanges();\n      } else if (event.key === 'Escape') {\n        event.preventDefault();\n        handleCancelEditing();\n      }\n    },\n    [handleSaveChanges, handleCancelEditing],\n  );\n\n  const handleParameterChange = useCallback((key, value) => {\n    setEditParameters((previous) => ({ ...previous, [key]: value }));\n  }, []);\n\n  const toggleCollapse = useCallback(\n    (event) => {\n      event.stopPropagation();\n      updateNodeData(id, { isCollapsed: !isCollapsed });\n    },\n    [id, isCollapsed, updateNodeData],\n  );\n\n  const handleNodeKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter' && !isEditing) {\n        event.preventDefault();\n        startEditing();\n      }\n    },\n    [isEditing, startEditing],\n  );\n\n  const handleContextMenu = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setContextMenuPosition({ x: event.clientX, y: event.clientY });\n    setShowContextMenu(true);\n  }, []);\n\n  const handleHeaderKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault();\n        toggleCollapse(event);\n      }\n    },\n    [toggleCollapse],\n  );\n\n  const handleDescriptionKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        startEditing();\n      }\n    },\n    [startEditing],\n  );\n\n  useEffect(() => {\n    if (isSaving) {\n      const timer = setTimeout(() => setIsSaving(false), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isSaving]);\n\n  const contextMenuItems = useMemo(\n    () => [\n      {\n        label: 'Editar',\n        icon: <Edit2 size={14} />,\n        action: startEditing,\n        disabled: !permissions.canEdit || isEditing,\n      },\n      {\n        label: 'Duplicar',\n        icon: 'copy',\n        action: () => {\n          /* Implementación futura */\n        },\n        disabled: !permissions.canEdit,\n      },\n      {\n        label: 'Eliminar',\n        icon: <X size={14} />,\n        action: () => deleteNode(id),\n        disabled: !permissions.canDelete,\n        isDestructive: true,\n      },\n    ],\n    [\n      startEditing,\n      permissions.canEdit,\n      permissions.canDelete,\n      id,\n      deleteNode,\n      isEditing,\n    ],\n  );\n\n  const currentActionType = isEditing ? editActionType : actionType;\n  const actionDetails = useMemo(\n    () => ACTION_TYPES.find((at) => at.value === currentActionType),\n    [currentActionType],\n  );\n\n  const nodeClassName = [\n    'action-node',\n    selected && 'selected',\n    isEditing && 'editing',\n    isHovered && 'hovered',\n  ]\n    .filter(Boolean)\n    .join(' ');\n\n  return (\n    <div\n      ref={nodeReference}\n      role='button'\n      className={nodeClassName}\n      onDoubleClick={startEditing}\n      onKeyDown={handleNodeKeyDown}\n      onContextMenu={handleContextMenu}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      tabIndex={0}\n      style={{\n        width: isCollapsed ? 180 : 300,\n        transition: 'width 0.2s ease, height 0.2s ease',\n        opacity: isSaving ? 0.7 : 1,\n      }}\n    >\n      <Handle\n        type='target'\n        position='top'\n        isConnectable={isConnectable && !isEditing}\n        className='action-node-handle'\n      />\n\n      <div\n        className='action-node-header'\n        onClick={toggleCollapse}\n        onKeyDown={handleHeaderKeyDown}\n        role='button'\n        tabIndex={0}\n      >\n        <span className='action-node-icon'>{actionDetails?.icon || '⚙️'}</span>\n        <h5 className='action-node-title'>\n          {actionDetails?.label || 'Acción'}\n        </h5>\n        <div className='action-node-controls'>\n          <button\n            type='button'\n            onClick={toggleCollapse}\n            className='action-node-control-button'\n            aria-label={isCollapsed ? 'Expandir nodo' : 'Colapsar nodo'}\n          >\n            {isCollapsed ? <ChevronDown size={16} /> : <ChevronUp size={16} />}\n          </button>\n          {isHovered && (\n            <button\n              type='button'\n              className='action-node-context-button'\n              onClick={handleContextMenu}\n              aria-label='Opciones del nodo'\n            >\n              <MoreHorizontal size={16} />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {!isCollapsed && (\n        <div className='action-node-content'>\n          {isEditing ? (\n            <div\n              role='presentation'\n              className='action-node-edit-view'\n              onKeyDown={handleKeyDown}\n            >\n              <textarea\n                ref={textareaReference}\n                value={editDescription}\n                onChange={(event) => setEditDescription(event.target.value)}\n                placeholder='Añade una descripción clara&hellip;'\n                className='action-node-textarea'\n              />\n              <select\n                value={editActionType}\n                onChange={(event) => setEditActionType(event.target.value)}\n                className='action-node-select'\n              >\n                <option value=''>Selecciona un tipo de acción&hellip;</option>\n                {ACTION_TYPES.map((type) => (\n                  <option key={type.value} value={type.value}>\n                    {type.icon} {type.label}\n                  </option>\n                ))}\n              </select>\n              <ParameterFields\n                actionType={editActionType}\n                parameters={editParameters}\n                onParameterChange={handleParameterChange}\n              />\n              <div className='action-node-edit-buttons'>\n                <button\n                  type='button'\n                  onClick={handleCancelEditing}\n                  className='action-node-button-cancel'\n                >\n                  Cancelar\n                </button>\n                <button\n                  type='button'\n                  onClick={handleSaveChanges}\n                  className='action-node-button-save'\n                  onKeyDown={(event) => {\n                    if (event.key === 'Enter' || event.key === ' ') {\n                      handleSaveChanges(event);\n                    }\n                  }}\n                >\n                  Guardar\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div\n              className='action-node-description'\n              onDoubleClick={startEditing}\n              onKeyDown={handleDescriptionKeyDown}\n              role='button'\n              tabIndex={0}\n            >\n              {description || 'Haz doble clic para editar&hellip;'}\n            </div>\n          )}\n        </div>\n      )}\n\n      <Handle\n        type='source'\n        position='bottom'\n        isConnectable={isConnectable && !isEditing}\n        className='action-node-handle'\n      />\n\n      {showContextMenu && (\n        <ContextMenu\n          items={contextMenuItems}\n          position={contextMenuPosition}\n          onClose={() => setShowContextMenu(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nActionNode.propTypes = {\n  data: PropTypes.shape({\n    description: PropTypes.string,\n    actionType: PropTypes.string,\n    parameters: PropTypes.object,\n    isCollapsed: PropTypes.bool,\n  }).isRequired,\n  id: PropTypes.string.isRequired,\n  isConnectable: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nActionNode.displayName = 'ActionNode';\n\nexport default memo(ActionNode, areActionNodePropertiesEqual);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/actionnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainode/AiNode.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainode/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainode/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainode/useAINode.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 67,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 67,
        "endColumn": 63
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 67,
        "column": 46,
        "nodeType": "MemberExpression",
        "messageId": "unsafeReturn",
        "endLine": 67,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateNode on an `any` value.",
        "line": 67,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 67,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 72,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 72,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 99,
        "column": 24,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 99,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 155,
        "column": 35,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 155,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [4728, 4730], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [130, 133], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [130, 133], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2834, 2837], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2834, 2837], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/* eslint-disable @typescript-eslint/no-explicit-any */\ndeclare global {\n  interface ImportMeta {\n    env: {\n      [key: string]: any;\n      VITE_API_URL?: string;\n    };\n  }\n}\n\nimport { useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport type { AiNodeData } from './types'; // Asegúrate que la ruta a types.ts sea correcta\n\n// Props que el hook espera, usualmente pasadas desde el componente AiNode\nexport interface UseAINodeProperties {\n  id: string;\n  data: AiNodeData;\n}\n\n// Interfaz para la respuesta esperada de la API de Grok\ninterface GrokApiResponse {\n  response?: string;\n}\n\n// Función para realizar la llamada al backend que interactúa con la API de Grok\nconst callGrokApi = async (\n  prompt: string,\n  temperature: number,\n  maxTokens: number,\n  systemMessage?: string,\n): Promise<string> => {\n  try {\n    const apiUrl = import.meta.env.VITE_API_URL ?? 'http://localhost:5000/api';\n    if (!apiUrl) {\n      throw new Error('La URL de la API no está configurada');\n    }\n    const response = await fetch(`${apiUrl}/ai-node`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        prompt,\n        temperature,\n        maxTokens,\n        systemMessage,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Error en la llamada al backend: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const data = (await response.json()) as GrokApiResponse;\n    return data.response ?? 'Respuesta vacía del backend';\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const useAINode = ({ id, data }: UseAINodeProperties) => {\n  const updateNode = useFlowStore((state) => state.updateNode);\n\n  // Función genérica para actualizar cualquier parte de node.data\n  const updateNodeData = useCallback(\n    (newData: Partial<AiNodeData>) => {\n      updateNode(id, newData);\n    },\n    [id, updateNode],\n  );\n\n  // Manejador para cambios en el promptTemplate\n  const handlePromptChange = useCallback(\n    (newPrompt: string) => {\n      // Aquí iría la lógica de interpolación de variables para interpolatedPromptPreview\n      // Por ahora, lo mantenemos simple:\n      updateNodeData({\n        promptTemplate: newPrompt,\n        // TODO: Implementar interpolación real para la vista previa\n        interpolatedPromptPreview: `Vista previa interpolada para: ${newPrompt.slice(0, 30)}...`,\n      });\n    },\n    [updateNodeData],\n  );\n\n  // Manejador para el estado de expansión/contracción del nodo\n  const handleToggleCollapse = useCallback(() => {\n    updateNodeData({ isCollapsed: !data.isCollapsed });\n  }, [updateNodeData, data.isCollapsed]);\n\n  // Manejador genérico para cambios en otros settings del nodo\n  const handleSettingChange = useCallback(\n    (settingKey: keyof AiNodeData, value: any) => {\n      updateNodeData({ [settingKey]: value });\n    },\n    [updateNodeData],\n  );\n\n  // Manejador para ejecutar la lógica del nodo IA\n  const handleExecute = useCallback(async () => {\n    updateNodeData({ isLoading: true, error: null, lastResponse: null });\n    try {\n      // TODO: Implementar la interpolación real del prompt usando variables del contexto del flujo\n      const promptToExecute = data.promptTemplate; // Usar el prompt interpolado real en el futuro\n\n      if (!promptToExecute && !data.systemMessage) {\n        updateNodeData({\n          isLoading: false,\n          error:\n            'El prompt y el mensaje de sistema están vacíos. No se puede ejecutar.',\n          lastResponse: null,\n        });\n        return;\n      }\n\n      const response = await callGrokApi(\n        promptToExecute,\n        data.temperature,\n        data.maxTokens,\n        data.systemMessage,\n      );\n      updateNodeData({ isLoading: false, lastResponse: response, error: null });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Ocurrió un error desconocido durante la ejecución.';\n      updateNodeData({\n        isLoading: false,\n        error: errorMessage,\n        lastResponse: null,\n      });\n    }\n  }, [data, updateNodeData]);\n\n  // Devolvemos los estados y manejadores que AiNode.tsx utilizará\n  return {\n    // Directamente desde data para que AiNode.tsx los consuma\n    promptTemplate: data.promptTemplate,\n    temperature: data.temperature,\n    maxTokens: data.maxTokens,\n    systemMessage: data.systemMessage,\n    responseVariable: data.responseVariable,\n    streaming: data.streaming,\n    ultraMode: data.ultraMode,\n    isLoading: data.isLoading,\n    error: data.error,\n    lastResponse: data.lastResponse,\n    interpolatedPromptPreview: data.interpolatedPromptPreview,\n    isCollapsed: data.isCollapsed || false, // Valor por defecto si no está definido\n    handlePromptChange,\n    handleSettingChange,\n    handleExecute,\n    handleToggleCollapse,\n    updateNodeData, // Exponer para flexibilidad, si es necesario\n  };\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainodepro/AiNodePro.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-meaningless-void-operator",
        "severity": 2,
        "message": "void operator shouldn't be used on void; it should convey that a return value is being ignored",
        "line": 251,
        "column": 21,
        "nodeType": "UnaryExpression",
        "messageId": "meaninglessVoidOperator",
        "endLine": 251,
        "endColumn": 67,
        "fix": { "range": [7116, 7121], "text": "" },
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 352,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 352,
        "endColumn": 29,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 352,
        "column": 34,
        "nodeType": "MemberExpression",
        "endLine": 352,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainodepro/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainodepro/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/ainodepro/useAiNodePro.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 54,
        "column": 34,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 54,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": {
              "range": [1558, 1610],
              "text": "(validatedData.promptTemplate ?? validatedData.prompt)"
            },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has unnecessary dependencies: 'maxTokens' and 'temperature'. Either exclude them or remove the dependency array.",
        "line": 123,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 123,
        "endColumn": 60,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [id, data, prompt, updateNode]",
            "fix": { "range": [4133, 4187], "text": "[id, data, prompt, updateNode]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { debounce } from 'lodash';\nimport { useState, useCallback, useMemo } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport type { AiNodeProData } from './types';\nimport { AiNodeProDataSchema } from './types';\n\n// Definir la forma del estado del store para proporcionar tipos a TypeScript\ninterface FlowStoreState {\n  updateNode: (id: string, data: Partial<AiNodeProData>) => void;\n  nodes: { id: string; data: Partial<AiNodeProData> }[];\n  isUltraMode: boolean;\n  getState: () => FlowStoreState;\n}\n\ninterface UseAiNodeProProperties {\n  id: string;\n  data: AiNodeProData;\n}\n\nexport interface UseAiNodeProReturn {\n  prompt: string;\n  temperature: number;\n  maxTokens: number;\n  isCollapsed: boolean;\n  isLoading: boolean;\n  error: string | null;\n  lastResponse: string | undefined;\n  lastPrompt: string | undefined;\n  ultraMode: boolean;\n  handlePromptChange: (newPrompt: string) => void;\n  handleSettingChange: <K extends keyof AiNodeProData>(\n    field: K,\n    value: AiNodeProData[K],\n  ) => void;\n  handleToggleCollapse: () => void;\n  handleExecute: () => Promise<void>;\n}\n\nexport const useAiNodePro = ({\n  id,\n  data,\n}: UseAiNodeProProperties): UseAiNodeProReturn => {\n  const { updateNode } = useFlowStore() as unknown as {\n    updateNode: FlowStoreState['updateNode'];\n  };\n\n  // Validar y usar datos por defecto del schema si es necesario\n  const validatedData = AiNodeProDataSchema.parse(data ?? {});\n\n  // Initialize prompt state from `promptTemplate` or fallback to `prompt`\n  const [prompt, setPrompt] = useState(\n    validatedData.promptTemplate || validatedData.prompt || '',\n  );\n  const [temperature, setTemperature] = useState(validatedData.temperature);\n  const [maxTokens, setMaxTokens] = useState(validatedData.maxTokens);\n  const [isCollapsed, setIsCollapsed] = useState(validatedData.isCollapsed);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const debouncedUpdateNode = useMemo(\n    () =>\n      debounce((updatedData: Partial<AiNodeProData>) => {\n        // [FIX] Get the latest node data directly from the store to avoid stale closure\n        const { nodes } = (useFlowStore.getState as () => FlowStoreState)();\n        const currentNode = nodes.find((n) => n.id === id);\n        if (currentNode) {\n          updateNode(id, { ...currentNode.data, ...updatedData });\n        }\n      }, 300),\n    [id, updateNode], // `data` is removed from dependencies to prevent re-creation on every change\n  );\n\n  const handlePromptChange = useCallback(\n    (newPrompt: string) => {\n      setPrompt(newPrompt);\n      // [FIX] Save to `promptTemplate` for the simulation and `prompt` for display/compatibility\n      debouncedUpdateNode({ promptTemplate: newPrompt, prompt: newPrompt });\n    },\n    [debouncedUpdateNode],\n  );\n\n  const handleSettingChange = useCallback(\n    <K extends keyof AiNodeProData>(field: K, value: AiNodeProData[K]) => {\n      if (field === 'temperature') setTemperature(value as number);\n      if (field === 'maxTokens') setMaxTokens(value as number);\n      debouncedUpdateNode({ [field]: value });\n    },\n    [debouncedUpdateNode],\n  );\n\n  const handleToggleCollapse = useCallback(() => {\n    const newCollapsedState = !isCollapsed;\n    setIsCollapsed(newCollapsedState);\n    updateNode(id, { ...data, isCollapsed: newCollapsedState });\n  }, [isCollapsed, id, data, updateNode]);\n\n  const handleExecute = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Simulación de llamada a API\n\n      await new Promise((resolve) => setTimeout(resolve, 1500));\n      const response = `Respuesta simulada para el prompt: \"${prompt.slice(0, 30)}...\"`;\n\n      // Actualizar el nodo con la respuesta y el último prompt ejecutado\n      updateNode(id, {\n        ...data,\n        lastResponse: response,\n        lastPrompt: prompt,\n      });\n    } catch (error_) {\n      const errorMessage =\n        error_ instanceof Error\n          ? error_.message\n          : 'Ocurrió un error desconocido.';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id, data, prompt, temperature, maxTokens, updateNode]);\n\n  return {\n    prompt,\n    temperature,\n    maxTokens,\n    isCollapsed,\n    isLoading,\n    error,\n    lastResponse: data.lastResponse,\n    lastPrompt: data.lastPrompt,\n    ultraMode:\n      data.ultraMode ??\n      (useFlowStore.getState as () => FlowStoreState)().isUltraMode,\n    handlePromptChange,\n    handleSettingChange,\n    handleToggleCollapse,\n    handleExecute,\n  };\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/customedge/CustomEdge.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 12,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 80,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import EliteEdge from '../../flow-editor/ui/EliteEdge';\n\n/**\n * CustomEdge - Wrapper inteligente para EliteEdge\n * Este componente redirige todas las propiedades a EliteEdge con normalización\n * para mantener un renderizado y estilo consistente de las aristas en toda la aplicación.\n *\n * @version 2.0.0\n * @param {Object} props - Todas las propiedades de la arista\n * @returns {JSX.Element} EliteEdge con las propiedades ajustadas\n */\nconst CustomEdge = (properties) => {\n  // Extraer propiedades relevantes\n  const {\n    sourceHandleId,\n    sourceHandle,\n    sourceX,\n    id,\n    source,\n    target,\n    data,\n    ...restProperties\n  } = properties;\n\n  // Crear un objeto de propiedades ajustadas\n  const adjustedProperties = { ...restProperties };\n\n  // Normalizar sourceHandle: priorizar sourceHandleId si existe\n  let normalizedSourceHandle = sourceHandle;\n\n  // Procesar sourceHandle si tiene formato JSON serializado\n  if (typeof sourceHandle === 'string' && sourceHandle.startsWith('|||{')) {\n    try {\n      // Extraer el JSON después del prefijo '|||'\n      const jsonString = sourceHandle.slice(3);\n      const handleData = JSON.parse(jsonString);\n\n      // Usar el sourceHandle interno\n      normalizedSourceHandle = handleData.sourceHandle || 'default';\n\n      // Si hay un targetHandle en los datos, pasarlo a las props ajustadas\n      if (handleData.targetHandle) {\n        adjustedProperties.targetHandle = handleData.targetHandle;\n      }\n    } catch {\n      normalizedSourceHandle = 'default';\n    }\n  }\n\n  // Si hay un sourceHandleId, usarlo y ajustar la posición X\n  if (sourceHandleId) {\n    normalizedSourceHandle = sourceHandleId;\n\n    // Ajustar posición para handles múltiples en nodos de decisión\n    const nodeWidth = 150; // Ancho estándar de los nodos\n    const outputIndex = Number.parseInt(sourceHandleId.split('-')[1], 10) || 0;\n    const offsetX = (outputIndex - 0.5) * (nodeWidth / 2);\n\n    // Ajustar sourceX si está definido\n    if (typeof sourceX === 'number') {\n      adjustedProperties.sourceX = sourceX + offsetX;\n    }\n  }\n\n  // Asegurarse de que los IDs estén presentes\n  adjustedProperties.id = id || `edge-${source}-${target}-${Date.now()}`;\n  adjustedProperties.source = source;\n  adjustedProperties.target = target;\n\n  // Pasar sourceHandle normalizado\n  adjustedProperties.sourceHandle = normalizedSourceHandle;\n\n  // Pasar data si existe\n  if (data) {\n    adjustedProperties.data = data;\n  }\n\n  // Usar EliteEdge para el renderizado con propiedades normalizadas\n  return <EliteEdge {...adjustedProperties} />;\n};\n\nexport default CustomEdge;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/customedge/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/DecisionNode.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (295). Maximum allowed is 80.",
        "line": 45,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 384,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 31. Maximum allowed is 10.",
        "line": 45,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 384,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNode.jsx\n * @description Componente de alto rendimiento para el nodo de decisión, refactorizado con selectores granulares.\n * @version 5.0.0 - Refactorización con selectores granulares para eliminar ciclos de renderizado.\n */\n\nimport PropTypes from 'prop-types';\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  useRef,\n  Suspense,\n} from 'react';\nimport { Position, Handle, useUpdateNodeInternals } from 'reactflow';\nimport { shallow } from 'zustand/shallow';\n\nimport './DecisionNode.css';\n\nimport useFlowStore, { useDecisionNodeActions } from '@/stores/use-flow-store';\n\nimport DecisionNodeHandles from './components/DecisionNodeHandles';\nimport { getConnectorColor } from './DecisionNode.types';\n\n// Carga diferida de componentes para optimización\nconst DecisionNodeHeader = React.lazy(\n  () => import('./components/DecisionNodeHeader'),\n);\nconst DecisionNodeQuestion = React.lazy(\n  () => import('./components/DecisionNodeQuestion'),\n);\nconst DecisionNodeConditions = React.lazy(\n  () => import('./components/DecisionNodeConditions'),\n);\nconst DecisionNodeOptions = React.lazy(\n  () => import('./components/DecisionNodeOptions'),\n);\n\nconst MAX_CONDITIONS = 5;\n\nconst isValidQuestion = (question) =>\n  question?.trim().length > 0 && question.trim().length <= 500;\n\nconst DecisionNodeInternal = ({ id, selected, isConnectable }) => {\n  // --- Prop Types para validación interna ---\n  DecisionNodeInternal.propTypes = {\n    id: PropTypes.string.isRequired,\n    selected: PropTypes.bool,\n    isConnectable: PropTypes.bool,\n  };\n  // --- 1. Hooks de React y Zustand (TODOS INCONDICIONALES) ---\n  const updateNodeInternals = useUpdateNodeInternals();\n\n  const { updateNodeData, showContextMenu, isUltraPerformanceModeGlobal } =\n    useFlowStore(\n      (state) => ({\n        updateNodeData: state.updateNodeData,\n        showContextMenu: state.showContextMenu,\n        isUltraPerformanceModeGlobal: state.isUltraPerformanceMode,\n      }),\n      shallow,\n    );\n\n  const {\n    addDecisionNodeCondition,\n    updateDecisionNodeConditionText,\n    deleteDecisionNodeCondition,\n  } = useDecisionNodeActions();\n\n  // Selector granular para optimizar re-renderizados. Solo nos subscribimos a los cambios de las props que realmente usamos.\n  // La clave es `conditions.length`, que fuerza la actualización cuando se agrega/elimina una condición.\n  const nodeData = useFlowStore((state) => {\n    const node = state.nodes.find((n) => n.id === id);\n    if (!node) return;\n    return {\n      question: node.data.question,\n      conditions: node.data.conditions,\n      conditionsLength: node.data.conditions?.length || 0, // Dependencia CRÍTICA\n      isEditing: node.data.isEditing,\n      isSaving: node.data.isSaving,\n      enableMarkdown: node.data.enableMarkdown,\n      enableVariables: node.data.enableVariables,\n      isUltraPerformanceMode: node.data.isUltraPerformanceMode,\n      lodLevel: node.data.lodLevel,\n    };\n  }, shallow);\n\n  const [currentQuestion, setCurrentQuestion] = useState(\n    nodeData?.question || '',\n  );\n  const [markdownEnabled, setMarkdownEnabled] = useState(\n    nodeData?.enableMarkdown || false,\n  );\n  const [variablesEnabled, setVariablesEnabled] = useState(\n    nodeData?.enableVariables || false,\n  );\n\n  const previousIsEditing = useRef(nodeData?.isEditing);\n\n  const defaultConditions = useMemo(\n    () => [\n      {\n        id: `cond-${id}-default-yes`,\n        text: 'Sí',\n        color: getConnectorColor('Sí', 0),\n      },\n      {\n        id: `cond-${id}-default-no`,\n        text: 'No',\n        color: getConnectorColor('No', 1),\n      },\n    ],\n    [id],\n  );\n\n  // Se elimina useMemo para garantizar que siempre se use la lista más actualizada de condiciones.\n  // La optimización anterior estaba causando que la lista de handles no se actualizara.\n  const currentConditions =\n    nodeData?.conditions && nodeData.conditions.length > 0\n      ? nodeData.conditions\n      : defaultConditions;\n  const isUltraMode = useMemo(\n    () => nodeData?.isUltraPerformanceMode || isUltraPerformanceModeGlobal,\n    [nodeData?.isUltraPerformanceMode, isUltraPerformanceModeGlobal],\n  );\n  const nodeClasses = useMemo(\n    () =>\n      [\n        'decision-node',\n        selected && 'selected',\n        nodeData?.isEditing && 'editing',\n        isUltraMode && 'ultra-performance',\n      ]\n        .filter(Boolean)\n        .join(' '),\n    [selected, nodeData?.isEditing, isUltraMode],\n  );\n\n  const startEditing = useCallback(() => {\n    setCurrentQuestion(nodeData?.question || '');\n    setMarkdownEnabled(nodeData?.enableMarkdown || false);\n    setVariablesEnabled(nodeData?.enableVariables || false);\n    updateNodeData(id, { isEditing: true });\n  }, [\n    id,\n    nodeData?.question,\n    nodeData?.enableMarkdown,\n    nodeData?.enableVariables,\n    updateNodeData,\n  ]);\n\n  const cancelEditing = useCallback(() => {\n    updateNodeData(id, { isEditing: false });\n  }, [id, updateNodeData]);\n\n  const finishEditing = useCallback(() => {\n    if (isValidQuestion(currentQuestion)) {\n      updateNodeData(id, {\n        question: currentQuestion,\n        enableMarkdown: markdownEnabled,\n        enableVariables: variablesEnabled,\n        isEditing: false,\n      });\n    } else {\n      cancelEditing();\n    }\n  }, [\n    id,\n    currentQuestion,\n    markdownEnabled,\n    variablesEnabled,\n    updateNodeData,\n    cancelEditing,\n  ]);\n\n  const addCondition = useCallback(() => {\n    if ((nodeData?.conditions?.length || 0) < MAX_CONDITIONS) {\n      addDecisionNodeCondition(id);\n    }\n  }, [id, nodeData?.conditions?.length, addDecisionNodeCondition]);\n\n  const handleConditionTextChange = useCallback(\n    (conditionId, newText) => {\n      updateDecisionNodeConditionText(id, conditionId, newText);\n    },\n    [id, updateDecisionNodeConditionText],\n  );\n\n  const handleDeleteCondition = useCallback(\n    (conditionId) => {\n      deleteDecisionNodeCondition(id, conditionId);\n    },\n    [id, deleteDecisionNodeCondition],\n  );\n\n  const handleContextMenu = useCallback(\n    (event_) => {\n      event_.preventDefault();\n      event_.stopPropagation();\n      const { clientX, clientY } = event_;\n      const items = [\n        {\n          label: 'Editar',\n          action: startEditing,\n        },\n        {\n          label: 'Agregar Opción',\n          action: addCondition,\n          disabled: (nodeData?.conditions?.length || 0) >= MAX_CONDITIONS,\n        },\n        {\n          label: 'Eliminar',\n          action: () => useFlowStore.getState().deleteNode(id),\n        },\n      ];\n      showContextMenu({ x: clientX, y: clientY, nodeId: id, items });\n    },\n    [\n      id,\n      showContextMenu,\n      startEditing,\n      addCondition,\n      nodeData?.conditions?.length,\n    ],\n  );\n\n  const handleKeyDown = useCallback(\n    (event_) => {\n      // Permite la interacción con teclado para accesibilidad\n      if (event_.key === 'Enter' || event_.key === ' ') {\n        event_.preventDefault();\n        startEditing();\n      }\n    },\n    [startEditing],\n  );\n\n  useEffect(() => {\n    if (\n      nodeData &&\n      (!nodeData.conditions || nodeData.conditions.length === 0)\n    ) {\n      updateNodeData(id, { conditions: defaultConditions });\n    }\n  }, [id, nodeData, defaultConditions, updateNodeData]);\n\n  useEffect(() => {\n    // Si el estado de edición ha cambiado (de true a false o de false a true),\n    // es crucial forzar una actualización de los \"internals\" del nodo.\n    // Esto le indica a React Flow que debe volver a medir el tamaño del nodo y\n    // la posición de sus handles, asegurando que las aristas se reconecten\n    // correctamente al nuevo layout.\n    if (previousIsEditing.current !== nodeData?.isEditing) {\n      // Se usa un pequeño timeout para asegurar que el DOM se haya actualizado\n      // con el nuevo tamaño del nodo antes de que React Flow intente medirlo.\n      setTimeout(() => updateNodeInternals(id), 50);\n    }\n    previousIsEditing.current = nodeData?.isEditing;\n  }, [nodeData?.isEditing, updateNodeInternals, id]);\n\n  // Efecto para forzar la actualización de handles al cambiar el modo ultra.\n  // Esto es crucial para prevenir que los handles desaparezcan o se desincronicen.\n  useEffect(() => {\n    if (id) {\n      updateNodeInternals(id);\n    }\n  }, [isUltraMode, id, updateNodeInternals]);\n\n  // --- Guarda de renderizado ---\n  // Se ejecuta DESPUÉS de todos los hooks para cumplir las reglas de React.\n  if (!nodeData) {\n    return;\n  }\n\n  // --- Renderizado del Componente ---\n  const { question, isEditing, isSaving, enableMarkdown, enableVariables } =\n    nodeData;\n\n  return (\n    <div\n      className={nodeClasses}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={isEditing ? undefined : startEditing}\n    >\n      <Handle\n        type='target'\n        position={Position.Top}\n        className='decision-node__handle decision-node__handle--target'\n        isConnectable={isConnectable}\n      />\n      <Suspense fallback={<div className='suspense-loader'>Cargando...</div>}>\n        <DecisionNodeHeader\n          title={isEditing ? 'Editando Decisión' : question || '...'}\n          isEditing={isEditing}\n          isUltraPerformanceMode={isUltraMode}\n          onStartEdit={startEditing}\n        />\n        <div className='decision-node__content'>\n          {isEditing ? (\n            <>\n              <DecisionNodeQuestion\n                question={currentQuestion}\n                onQuestionChange={setCurrentQuestion}\n                isEditing={isEditing}\n                onStartEditing={startEditing}\n                onSave={finishEditing}\n                onCancel={cancelEditing}\n              />\n              <DecisionNodeConditions\n                conditions={currentConditions}\n                onAddCondition={addCondition}\n                onConditionChange={handleConditionTextChange}\n                onDeleteCondition={handleDeleteCondition}\n                onMoveCondition={() => {\n                  // Placeholder\n                }}\n                isUltraPerformanceMode={isUltraMode}\n                isEditing={isEditing}\n                activeConditionId={undefined}\n                setActiveConditionId={() => {\n                  // Placeholder\n                }}\n              />\n            </>\n          ) : (\n            <div\n              className='decision-node__question-preview'\n              onClick={startEditing}\n              onKeyDown={handleKeyDown}\n              role='button'\n              tabIndex={0}\n            >\n              {question || 'Haz clic para editar la pregunta...'}\n            </div>\n          )}\n        </div>\n\n        <div className='decision-node__footer'>\n          {isEditing ? (\n            <div className='decision-node__edit-actions'>\n              <button\n                onClick={cancelEditing}\n                className='decision-node__button decision-node__button--secondary'\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={finishEditing}\n                className='decision-node__button decision-node__button--primary'\n              >\n                Guardar\n              </button>\n            </div>\n          ) : (\n            <DecisionNodeOptions\n              onAddCondition={addCondition}\n              isEditing={isEditing}\n              isSaving={isSaving || false}\n              onToggleMarkdown={() =>\n                updateNodeData(id, { enableMarkdown: !enableMarkdown })\n              }\n              onToggleVariables={() =>\n                updateNodeData(id, { enableVariables: !enableVariables })\n              }\n              onToggleLogic={() => {\n                // Placeholder\n              }}\n              enableMarkdown={enableMarkdown || false}\n              enableVariables={enableVariables || false}\n              enableLogic={false} // Placeholder\n            />\n          )}\n        </div>\n      </Suspense>\n\n      <DecisionNodeHandles\n        nodeId={id}\n        outputs={currentConditions}\n        isConnectable={isConnectable}\n      />\n    </div>\n  );\n};\n\nconst arePropertiesEqual = (previousProperties, nextProperties) => {\n  return (\n    previousProperties.id === nextProperties.id &&\n    previousProperties.selected === nextProperties.selected &&\n    previousProperties.isConnectable === nextProperties.isConnectable\n  );\n};\n\nconst DecisionNode = React.memo(DecisionNodeInternal, arePropertiesEqual);\n\nDecisionNode.displayName = 'DecisionNode';\n\nDecisionNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  isConnectable: PropTypes.bool,\n};\n\nexport default DecisionNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/DecisionNode.types.js",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 120,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 120,
        "endColumn": 32
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 129,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 129,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNode.types.js\n * @description Tipos y constantes para el componente DecisionNode\n */\n\n/**\n * Configuración global del nodo de decisión\n * @constant\n */\nexport const NODE_CONFIG = {\n  // Dimensiones\n  MIN_WIDTH: 180,\n  MIN_HEIGHT: 110,\n  MAX_TEXTAREA_HEIGHT: 200,\n\n  // Valores por defecto\n  DEFAULT_QUESTION: '¿Cuál es tu pregunta?',\n  DEFAULT_OUTPUTS: ['Sí', 'No'],\n  DEBOUNCE_DELAY: 300,\n  MAX_CONDITIONS: 8,\n  ANIMATION_DURATION: 200,\n  KEY_SHORTCUTS: {\n    save: { key: 'Enter', description: 'Guardar cambios' },\n    cancel: { key: 'Escape', description: 'Cancelar edición' },\n    addCondition: { key: 'Ctrl+A', description: 'Añadir condición' },\n    deleteCondition: { key: 'Delete', description: 'Eliminar condición' },\n    moveUp: { key: 'Ctrl+ArrowUp', description: 'Mover condición arriba' },\n    moveDown: { key: 'Ctrl+ArrowDown', description: 'Mover condición abajo' },\n  },\n  ARIA_LABELS: {\n    node: 'Nodo de decisión',\n    question: 'Pregunta del nodo de decisión',\n    editQuestion: 'Editar pregunta',\n    saveChanges: 'Guardar cambios',\n    cancelEditing: 'Cancelar edición',\n    addCondition: 'Añadir nueva condición',\n    editCondition: 'Editar condición',\n    deleteCondition: 'Eliminar condición',\n    moveCondition: 'Mover condición',\n  },\n  COLORS: {\n    background: {\n      normal: '#1e40af', // Azul oscuro\n      ultra: '#1e3a8a', // Azul oscuro para ultra rendimiento\n    },\n    border: {\n      normal: '#1e3a8a', // Borde azul oscuro\n      ultra: '#1e3a8a', // Mismo azul para ultra rendimiento\n    },\n    text: {\n      normal: '#713f12', // Marrón oscuro\n      ultra: '#78350f', // Marrón más oscuro para ultra rendimiento\n    },\n  },\n};\n\n// Tipos de condiciones\nexport const CONDITION_TYPES = {\n  TRUE: 'true',\n  FALSE: 'false',\n  DEFAULT: 'default',\n};\n\n// Modos de visualización\nexport const DISPLAY_MODES = {\n  NORMAL: 'normal',\n  ULTRA_PERFORMANCE: 'ultra-performance',\n};\n\n// Colores para los conectores según el tipo de condición\nexport const CONNECTOR_COLORS = {\n  [CONDITION_TYPES.TRUE]: '#22c55e', // Verde para \"Sí\"\n  [CONDITION_TYPES.FALSE]: '#ef4444', // Rojo para \"No\"\n  // El color por defecto ahora se manejará con la paleta\n};\n\n// Paleta de colores para condiciones \"default\" (no Sí/No)\nexport const DEFAULT_CONDITION_PALETTE = [\n  '#3b82f6', // Azul (original por defecto, puede ser el primero)\n  '#FF69B4', // HotPink\n  '#FFA500', // Orange\n  '#ADFF2F', // GreenYellow\n  '#00CED1', // DarkTurquoise\n  '#DA70D6', // Orchid\n  '#FFD700', // Gold\n  '#8A2BE2', // BlueViolet\n];\n\n/**\n * Determina el tipo de condición basado en su texto\n * @param {string} condition - Texto de la condición\n * @returns {string} - Tipo de condición (true, false, default)\n */\nexport const getConditionType = (condition) => {\n  const text = (condition || '').toLowerCase();\n  if (\n    text.includes('sí') ||\n    text.includes('si') ||\n    text.includes('yes') ||\n    text.includes('true')\n  ) {\n    return CONDITION_TYPES.TRUE;\n  }\n  if (text.includes('no') || text.includes('not') || text.includes('false')) {\n    return CONDITION_TYPES.FALSE;\n  }\n  return CONDITION_TYPES.DEFAULT;\n};\n\n/**\n * Obtiene el color del conector según el tipo de condición\n * @param {string} condition - Texto de la condición\n * @returns {string} - Color CSS para el conector\n */\nexport const getConnectorColor = (conditionText, index = 0) => {\n  const type = getConditionType(conditionText);\n  if (type === CONDITION_TYPES.DEFAULT) {\n    return DEFAULT_CONDITION_PALETTE[index % DEFAULT_CONDITION_PALETTE.length];\n  }\n  return CONNECTOR_COLORS[type]; // Para TRUE y FALSE\n};\n\n/**\n * Genera un ID único para un nodo\n * @param {string} prefix - Prefijo para el ID\n * @returns {string} - ID único\n */\nexport const generateNodeId = (prefix = 'decision') => {\n  return `${prefix}_${Math.random().toString(36).slice(2, 9)}`;\n};\n\n/**\n * Valida si una pregunta es válida\n * @param {string} question - Texto de la pregunta\n * @returns {boolean} - True si es válida\n */\nexport const isValidQuestion = (question) => {\n  return (\n    question &&\n    question.trim().length > 0 &&\n    question !== NODE_CONFIG.DEFAULT_QUESTION\n  );\n};\n\n/**\n * Valida si una condición es válida\n * @param {string} condition - Texto de la condición\n * @returns {boolean} - True si es válida\n */\nexport const isValidCondition = (condition) => {\n  return condition && condition.trim().length > 0;\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/components/DecisionNodeConditions.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (166). Maximum allowed is 80.",
        "line": 38,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 227,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 38,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 227,
        "endColumn": 4
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "The 'handleStartEditing' function makes the dependencies of useCallback Hook (at line 131) change on every render. To fix this, wrap the definition of 'handleStartEditing' in its own useCallback() Hook.",
        "line": 74,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "endLine": 77,
        "endColumn": 6,
        "suggestions": [
          {
            "desc": "Wrap the definition of 'handleStartEditing' in its own useCallback() Hook.",
            "fix": {
              "range": [2926, 3010],
              "text": "useCallback(() => {\n      setEditedText(condition.text);\n      setIsEditingThisItem(true);\n    })"
            }
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (164). Maximum allowed is 80.",
        "line": 259,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 444,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNodeConditions.jsx\n * @description Componente para gestionar las condiciones del nodo de decisión\n */\n\nimport {\n  X,\n  Check,\n  Plus,\n  Pencil,\n  // Move, ChevronUp, ChevronDown removed as move functionality UI is being removed\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { memo, useState, useRef, useCallback, useEffect } from 'react';\n\nimport Tooltip from '../../../ui/ToolTip';\nimport {\n  NODE_CONFIG,\n  getConditionType,\n  getConnectorColor as getGlobalConnectorColor,\n} from '../DecisionNode.types';\n\n/**\n * Componente para renderizar una condición individual.\n * La edición se maneja localmente. La funcionalidad de mover se ha eliminado.\n * @param {Object} props - Propiedades del componente\n * @param {Object} props.condition - Objeto de condición con id y texto.\n * @param {string} props.condition.id - ID único de la condición.\n * @param {string} props.condition.text - Texto de la condición.\n * @param {number} props.index - Índice de la condición.\n * @param {Function} props.onConditionChange - Función para notificar el cambio de texto de la condición (id, newText).\n * @param {Function} props.onDelete - Función para eliminar la condición (conditionId).\n * @param {boolean} [props.isUltraPerformanceMode=false] - Indica si está en modo ultra rendimiento.\n * @param {boolean} [props.isActive=false] - Indica si la condición está activa.\n * @returns {JSX.Element} - Componente de condición.\n */\nconst ConditionItem = memo(\n  ({\n    condition, // Ahora es { id: string, text: string }\n    index,\n    onConditionChange, // Prop para notificar cambio de texto\n    onDelete, // Espera (conditionId)\n    // onMove no longer needed as UI is removed\n    isUltraPerformanceMode,\n    isActive = false,\n    // onEdit prop is removed, editing is handled locally\n  }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n    const [isEditingThisItem, setIsEditingThisItem] = useState(false);\n    const [editedText, setEditedText] = useState(condition.text);\n    const inputReference = useRef(null);\n\n    // Determinar si la condición es verdadera o falsa para aplicar estilos\n    const conditionType = getConditionType(condition.text);\n    const conditionTypeClass = `decision-node__condition--${conditionType}`;\n\n    // Las variables isTrue e isFalse no se usan, por lo que se eliminan para limpiar el código.\n\n    // Manejar eliminación con confirmación\n    const handleDelete = useCallback(() => {\n      if (showDeleteConfirm) {\n        onDelete(condition.id);\n        setShowDeleteConfirm(false);\n      } else {\n        setShowDeleteConfirm(true);\n        // Auto-ocultar la confirmación después de 3 segundos\n        setTimeout(() => setShowDeleteConfirm(false), 3000);\n      }\n    }, [showDeleteConfirm, onDelete, condition.id]);\n\n    // Move handlers removed\n\n    const handleStartEditing = () => {\n      setEditedText(condition.text);\n      setIsEditingThisItem(true);\n    };\n\n    const handleSaveEdit = () => {\n      if (editedText.trim() !== condition.text) {\n        onConditionChange(condition.id, editedText.trim());\n      }\n      setIsEditingThisItem(false);\n    };\n\n    const handleCancelEdit = () => {\n      setEditedText(condition.text); // Revert to original text\n      setIsEditingThisItem(false);\n    };\n\n    const handleInputKeyDown = (event_) => {\n      if (event_.key === 'Enter') {\n        event_.preventDefault();\n        handleSaveEdit();\n      } else if (event_.key === 'Escape') {\n        event_.preventDefault();\n        handleCancelEdit();\n      }\n    };\n\n    // Effect to focus input when editing starts\n    useEffect(() => {\n      if (isEditingThisItem && inputReference.current) {\n        inputReference.current.focus();\n        inputReference.current.select(); // Select all text\n      }\n    }, [isEditingThisItem]);\n\n    // Manejar teclas para accesibilidad del ítem (no del input)\n    const handleItemKeyDown = useCallback(\n      (event_) => {\n        if (isEditingThisItem) return; // Don't interfere with input keydown\n\n        switch (event_.key) {\n          case 'Enter':\n          case ' ': {\n            event_.preventDefault();\n            handleStartEditing();\n            break;\n          }\n          case 'Delete': {\n            event_.preventDefault();\n            handleDelete();\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      },\n      [isEditingThisItem, handleDelete, handleStartEditing],\n    );\n\n    return (\n      <div\n        className={`decision-node__condition ${isUltraPerformanceMode ? 'decision-node__condition--ultra' : ''} ${conditionTypeClass} ${isActive ? 'decision-node__condition--active' : ''}`}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        data-index={index}\n        data-condition-text={condition.text}\n        data-condition-id={condition.id}\n        tabIndex={0}\n        role='button'\n        aria-label={`Condición: ${condition.text}`}\n        onKeyDown={handleItemKeyDown}\n        onDoubleClick={isEditingThisItem ? undefined : handleStartEditing}\n      >\n        {/* Marca de color para la condición */}\n        <div\n          className='decision-node__condition-color-mark'\n          style={{\n            backgroundColor: getGlobalConnectorColor(condition.text, index),\n            width: '12px',\n            height: '12px',\n            borderRadius: '50%',\n            marginRight: '8px',\n            border: '1px solid white',\n            boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.1)',\n            flexShrink: 0,\n          }}\n        />\n\n        {isEditingThisItem ? (\n          <input\n            ref={inputReference}\n            type='text'\n            value={editedText}\n            onChange={(event_) => setEditedText(event_.target.value)}\n            onBlur={handleSaveEdit}\n            onKeyDown={handleInputKeyDown}\n            className='decision-node__condition-input decision-node__condition-input--inline'\n            aria-label={`Editar texto de la condición: ${condition.text}`}\n            onClick={(event_) => event_.stopPropagation()} // Prevent double click from bubbling if input is clicked\n            onMouseDown={(event_) => event_.stopPropagation()} // Evitar que el drag del nodo interfiera\n          />\n        ) : (\n          <span\n            className='decision-node__condition-text'\n            onClick={handleStartEditing}\n            role='button'\n            tabIndex={0}\n            onKeyDown={(event_) => {\n              if (event_.key === 'Enter' || event_.key === ' ') {\n                event_.preventDefault();\n                handleStartEditing();\n              }\n            }}\n          >\n            {condition.text}\n          </span>\n        )}\n\n        {!isUltraPerformanceMode &&\n          !isEditingThisItem &&\n          (isHovered || globalThis.matchMedia('(hover: none)').matches) && (\n            <div className='decision-node__condition-actions'>\n              <Tooltip content='Editar condición' position='top'>\n                <button\n                  className='decision-node__condition-button decision-node__condition-button--edit'\n                  onClick={handleStartEditing} // Now triggers in-place editing\n                  aria-label={NODE_CONFIG.ARIA_LABELS.editCondition}\n                >\n                  <Pencil size={14} />\n                </button>\n              </Tooltip>\n\n              <Tooltip\n                content={\n                  showDeleteConfirm\n                    ? 'Confirmar eliminación'\n                    : 'Eliminar condición'\n                }\n                position='top'\n              >\n                <button\n                  className={`decision-node__condition-button ${showDeleteConfirm ? 'decision-node__condition-button--confirm' : 'decision-node__condition-button--delete'}`}\n                  onClick={handleDelete}\n                  aria-label={NODE_CONFIG.ARIA_LABELS.deleteCondition}\n                >\n                  <X size={14} />\n                </button>\n              </Tooltip>\n            </div>\n          )}\n      </div>\n    );\n  },\n);\n\nConditionItem.displayName = 'ConditionItem';\n\nConditionItem.propTypes = {\n  condition: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  onConditionChange: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  isUltraPerformanceMode: PropTypes.bool,\n  isActive: PropTypes.bool,\n};\n\n/**\n * Componente para gestionar las condiciones del nodo de decisión\n * @param {Object} props - Propiedades del componente\n * @param {Array<Object>} props.conditions - Lista de condiciones { id: string, text: string }\n * @param {Function} props.onAddCondition - Función para añadir condición\n * @param {Function} props.onConditionChange - Función para cambiar el texto de una condición\n * @param {Function} props.onDeleteCondition - Función para eliminar condición\n * @param {Function} props.onMoveCondition - Función para mover condición\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @param {string|null} props.activeConditionId - ID de la condición activa\n * @param {Function} props.setActiveConditionId - Función para cambiar el ID de la condición activa\n * @param {boolean} props.isEditing - Indica si está en modo edición\n * @returns {JSX.Element} - Gestor de condiciones\n */\nconst DecisionNodeConditions = memo(\n  ({\n    conditions,\n    onAddCondition,\n    onConditionChange,\n    onDeleteCondition,\n    onMoveCondition,\n    isUltraPerformanceMode,\n    activeConditionId,\n    setActiveConditionId,\n    isEditing,\n    disableAdd = false, // Default to false if not provided\n    maxConditions = Infinity, // Default if not provided\n  }) => {\n    const [isAddingCondition, setIsAddingCondition] = useState(false);\n    const [editingConditionId, setEditingConditionId] = useState();\n    const [editingText, setEditingText] = useState('');\n    const conditionInputReference = useRef(null);\n\n    // Enfocar el input al añadir o editar una condición\n    useEffect(() => {\n      let animationId;\n      if (\n        (isAddingCondition || editingConditionId !== undefined) &&\n        conditionInputReference.current\n      ) {\n        animationId = requestAnimationFrame(() => {\n          conditionInputReference.current.focus();\n          conditionInputReference.current.select();\n        });\n      }\n      return () => {\n        if (animationId) cancelAnimationFrame(animationId);\n      };\n    }, [isAddingCondition, editingConditionId]);\n\n    // Actualizar el estado de `disableAdd` internamente si es necesario, aunque se prefiere que venga de props\n    // const internalDisableAdd = disableAdd || (conditions && conditions.length >= maxConditions);\n\n    // Iniciar adición de condición\n    const startAddingCondition = useCallback(() => {\n      if (disableAdd || conditions.length >= maxConditions) {\n        // Optionally, show a message or log, but the button should be disabled visually\n\n        return;\n      }\n      setIsAddingCondition(true);\n      setEditingText('');\n    }, [disableAdd, conditions, maxConditions]);\n\n    // Añadir condición\n    const addCondition = useCallback(() => {\n      if (editingText.trim()) {\n        onAddCondition(editingText.trim());\n        setEditingText('');\n      }\n      setIsAddingCondition(false);\n    }, [editingText, onAddCondition]);\n\n    // Manejar cambios en el input de nueva condición\n    const handleNewConditionChange = useCallback((event_) => {\n      setEditingText(event_.target.value);\n    }, []);\n\n    // Guardar nueva condición al presionar Enter\n    const handleNewConditionKeyDown = useCallback(\n      (event_) => {\n        if (event_.key === 'Enter' && editingText.trim()) {\n          event_.preventDefault();\n          addCondition();\n        } else if (event_.key === 'Escape') {\n          event_.preventDefault();\n          setIsAddingCondition(false);\n          setEditingText('');\n        }\n      },\n      [editingText, addCondition],\n    );\n\n    // Guardar condición editada\n    const saveEditedCondition = useCallback(() => {\n      if (editingConditionId !== undefined) {\n        onConditionChange(editingConditionId, editingText);\n        setEditingConditionId(undefined);\n        setEditingText('');\n        conditionInputReference.current?.blur(); // Quitar foco del input\n      }\n    }, [editingConditionId, editingText, onConditionChange]);\n\n    // Manejar teclas al editar una condición\n    const handleEditConditionKeyDown = useCallback(\n      (event_) => {\n        if (event_.key === 'Enter' && editingText.trim()) {\n          event_.preventDefault();\n          saveEditedCondition();\n        } else if (event_.key === 'Escape') {\n          event_.preventDefault();\n          setEditingConditionId(undefined);\n          setEditingText('');\n        }\n      },\n      [editingText, saveEditedCondition],\n    );\n\n    return (\n      <div className='decision-node__conditions'>\n        {/* Lista de condiciones */}\n        <div className='decision-node__conditions-list'>\n          {conditions.map((condition, index) => (\n            <ConditionItem\n              key={condition.id}\n              condition={condition}\n              index={index}\n              onConditionChange={onConditionChange} // Passthrough from parent\n              onDelete={() => onDeleteCondition(condition.id)} // Pasa (conditionId)\n              // onMove prop removed\n              isUltraPerformanceMode={isUltraPerformanceMode}\n              isActive={condition.id === activeConditionId}\n            />\n          ))}\n        </div>\n\n        {/* Formulario para añadir/editar condición */}\n        {isEditing && (\n          <div className='decision-node__add-condition-container'>\n            {isAddingCondition || editingConditionId !== null ? (\n              <div className='decision-node__condition-form'>\n                <input\n                  ref={conditionInputReference}\n                  type='text'\n                  className='decision-node__condition-input'\n                  onMouseDown={(event_) => event_.stopPropagation()} // Evitar que el drag del nodo interfiera con la selección de texto\n                  value={editingText}\n                  onChange={handleNewConditionChange}\n                  onKeyDown={\n                    editingConditionId === undefined\n                      ? handleNewConditionKeyDown\n                      : handleEditConditionKeyDown\n                  }\n                  placeholder='Escribe la condición...'\n                  aria-label='Texto de la condición'\n                />\n                <div className='decision-node__condition-form-actions'>\n                  <button\n                    onClick={() => {\n                      setIsAddingCondition(false);\n                      setEditingConditionId(undefined);\n                      setEditingText('');\n                    }}\n                    className='decision-node__condition-button decision-node__condition-button--cancel'\n                    aria-label={NODE_CONFIG.ARIA_LABELS.cancelEditing}\n                  >\n                    <X size={14} />\n                  </button>\n                  <button\n                    onClick={\n                      editingConditionId === undefined\n                        ? addCondition\n                        : saveEditedCondition\n                    }\n                    className='decision-node__condition-button decision-node__condition-button--save'\n                    aria-label={NODE_CONFIG.ARIA_LABELS.saveChanges}\n                    disabled={!editingText.trim()}\n                  >\n                    <Check size={14} />\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <Tooltip content='Añadir nueva condición (Ctrl+A)' position='top'>\n                <button\n                  onClick={startAddingCondition}\n                  className='decision-node__add-condition-button'\n                  disabled={disableAdd || conditions.length >= maxConditions}\n                  aria-label={NODE_CONFIG.ARIA_LABELS.addCondition}\n                  aria-keyshortcuts='Ctrl+A'\n                >\n                  <Plus size={14} />\n                  <span>Añadir condición</span>\n                </button>\n              </Tooltip>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nDecisionNodeConditions.displayName = 'DecisionNodeConditions';\n\nDecisionNodeConditions.propTypes = {\n  conditions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onAddCondition: PropTypes.func.isRequired,\n  onConditionChange: PropTypes.func.isRequired, // This prop is now used by ConditionItem\n  onDeleteCondition: PropTypes.func.isRequired,\n  onMoveCondition: PropTypes.func.isRequired,\n  isUltraPerformanceMode: PropTypes.bool,\n  activeConditionId: PropTypes.string,\n  setActiveConditionId: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool,\n  disableAdd: PropTypes.bool,\n  maxConditions: PropTypes.number,\n};\n\nexport default DecisionNodeConditions;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/components/DecisionNodeHandles.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (99). Maximum allowed is 80.",
        "line": 17,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 134,
        "endColumn": 2
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useMemo has unnecessary dependencies: 'activeOutputs' and 'isUltraPerformanceMode'. Either exclude them or remove the dependency array.",
        "line": 102,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 108,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [outputs, isConnectable, isEditing]",
            "fix": { "range": [3648, 3747], "text": "[outputs, isConnectable, isEditing]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNodeHandles.jsx\n * @description Componente para los conectores del nodo de decisión\n */\n\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useEffect } from 'react';\nimport { Handle, Position, useUpdateNodeInternals } from 'reactflow';\n\n// Constantes para el posicionamiento de los handles\nconst HANDLE_SIZE = 15; // tamaño del handle en px\nconst NODE_PADDING = 20; // padding del nodo en px\n\n/**\n * Componente para los conectores del nodo de decisión\n */\nconst DecisionNodeHandles = ({\n  nodeId,\n  outputs = [],\n  isConnectable = true,\n  isUltraPerformanceMode = false,\n  isEditing = false,\n  activeOutputs = [],\n}) => {\n  const updateNodeInternals = useUpdateNodeInternals();\n\n  // Efecto CRÍTICO para forzar la actualización de los handles.\n  // Se ejecuta de forma síncrona cada vez que el NÚMERO de salidas cambia.\n  // Esto asegura que React Flow registre los handles inmediatamente, evitando condiciones de carrera.\n  useEffect(() => {\n    if (nodeId) {\n      updateNodeInternals(nodeId);\n    }\n  }, [nodeId, outputs.length, updateNodeInternals]);\n\n  // Renderizar los handles\n  const renderSourceHandles = useMemo(() => {\n    return outputs.map((output, index) => {\n      // Algoritmo de distribución matemáticamente perfecto.\n      const numberHandles = outputs.length;\n      const positionPercent = (index + 1) * (100 / (numberHandles + 1));\n\n      // El color se toma directamente de la propiedad 'color' persistente.\n      const finalColor = output.color;\n\n      // Estilo para el CONTENEDOR que posiciona el handle.\n      // Este div es nuestro pivote de posicionamiento, inmune a React Flow.\n      const wrapperStyle = {\n        position: 'absolute',\n        left: `${positionPercent}%`,\n        transform: 'translateX(-50%)',\n        bottom: `-${HANDLE_SIZE / 2}px`, // Centrado verticalmente en el borde\n        zIndex: 50,\n        pointerEvents: 'none', // El wrapper no captura eventos, solo el handle\n      };\n\n      // Estilo para el HANDLE, neutralizando su propio posicionamiento.\n      const handleStyle = {\n        position: 'relative', // Clave: anula el 'absolute' por defecto de React Flow\n        transform: 'none', // Clave: anula el 'translate' por defecto\n        top: 'auto',\n        left: 'auto',\n        right: 'auto',\n        bottom: 'auto',\n        // Estilos visuales\n        backgroundColor: finalColor,\n        border: '2px solid #ffffff',\n        borderRadius: '50%',\n        width: `${HANDLE_SIZE}px`,\n        height: `${HANDLE_SIZE}px`,\n        pointerEvents: 'all', // El handle sí captura eventos\n        transition: 'none', // Anula la transición de React Flow para un enganche perfecto\n      };\n\n      // Determinar la clase CSS basada en el tipo de condición\n      let handleClass = 'decision-node__handle--source';\n      if (output.id === 'true') {\n        handleClass += ' custom-handle-true';\n      } else if (output.id === 'false') {\n        handleClass += ' custom-handle-false';\n      }\n\n      return (\n        <div\n          key={output.id}\n          style={wrapperStyle}\n          data-testid={`handle-wrapper-${output.id}`}\n        >\n          <Handle\n            type='source'\n            position={Position.Bottom} // Requerido por React Flow, pero su efecto visual es neutralizado\n            id={`output-${output.id}`} // This ID must match the edge's sourceHandle\n            className={`decision-node__handle ${handleClass}`}\n            isConnectable={isConnectable && !isEditing}\n            style={handleStyle}\n            data-color={finalColor}\n            data-testid={`handle-source-${output.id}`}\n          />\n        </div>\n      );\n    });\n  }, [\n    outputs,\n    isConnectable,\n    isEditing,\n    isUltraPerformanceMode,\n    activeOutputs,\n  ]);\n\n  return (\n    <div\n      className='decision-node__handles-container'\n      data-testid='decision-node-source-handles'\n      style={{\n        position: 'absolute !important',\n        width: '100%',\n        left: 0,\n        right: 0,\n        height: 0,\n        overflow: 'visible',\n        bottom: 0, // Posicionar en el borde inferior exacto del nodo\n        zIndex: 50,\n        pointerEvents: 'none', // Permitir que los eventos pasen a través del contenedor a los handles\n        transform: 'none !important', // Propiedad crítica para evitar que React Flow modifique la posición\n        transformOrigin: 'center center !important',\n        alignItems: 'center',\n        margin: 0,\n        padding: 0,\n      }}\n    >\n      {renderSourceHandles}\n    </div>\n  );\n};\n\nDecisionNodeHandles.propTypes = {\n  nodeId: PropTypes.string.isRequired,\n  outputs: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    }),\n  ),\n  isConnectable: PropTypes.bool,\n  isUltraPerformanceMode: PropTypes.bool,\n  isEditing: PropTypes.bool,\n  activeOutputs: PropTypes.arrayOf(PropTypes.string),\n};\n\n// Memorizar el componente completo al exportarlo\nexport default React.memo(DecisionNodeHandles);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/components/DecisionNodeHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/components/DecisionNodeOptions.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (131). Maximum allowed is 80.",
        "line": 34,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 173,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 19. Maximum allowed is 10.",
        "line": 34,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 173,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNodeOptions.jsx\n * @description Componente para opciones avanzadas del nodo de decisión\n */\n\nimport {\n  Settings,\n  ChevronDown,\n  ChevronUp,\n  PenTool,\n  Code,\n  Layers,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { memo, useState, useCallback } from 'react';\n\nimport Tooltip from '../../../ui/ToolTip';\n\n/**\n * Componente para opciones avanzadas del nodo de decisión\n * @param {Object} props - Propiedades del componente\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @param {Function} props.onToggleMarkdown - Función para alternar markdown\n * @param {boolean} props.enableMarkdown - Indica si el markdown está habilitado\n * @param {Function} props.onToggleVariables - Función para alternar variables\n * @param {boolean} props.enableVariables - Indica si las variables están habilitadas\n * @param {Function} props.onToggleLogic - Función para alternar lógica avanzada\n * @param {boolean} props.enableLogic - Indica si la lógica avanzada está habilitada\n * @param {Function} props.onToggleAnimation - Función para alternar animaciones\n * @param {boolean} props.enableAnimation - Indica si las animaciones están habilitadas\n * @returns {JSX.Element} - Componente de opciones avanzadas\n */\nconst DecisionNodeOptions = memo(\n  ({\n    isUltraPerformanceMode,\n    onToggleMarkdown,\n    enableMarkdown = false,\n    onToggleVariables,\n    enableVariables = false,\n    onToggleLogic,\n    enableLogic = false,\n    // onToggleAnimation y enableAnimation eliminados\n  }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    // Alternar expansión del panel de opciones\n    const toggleExpand = useCallback(() => {\n      setIsExpanded((previous) => !previous);\n    }, []);\n\n    // Si está en modo ultra rendimiento, mostrar opciones reducidas\n    if (isUltraPerformanceMode) {\n      return (\n        <div className='decision-node__options decision-node__options--ultra'>\n          <Tooltip\n            content='Opciones avanzadas deshabilitadas en modo ultra rendimiento'\n            position='top'\n          >\n            <button\n              className='decision-node__options-button decision-node__options-button--disabled'\n              aria-label='Opciones avanzadas (deshabilitadas en modo ultra rendimiento)'\n              disabled\n            >\n              <Settings size={14} />\n            </button>\n          </Tooltip>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`decision-node__options ${isExpanded ? 'decision-node__options--expanded' : ''}`}\n      >\n        <div className='decision-node__options-header'>\n          <Tooltip\n            content={\n              isExpanded ? 'Ocultar opciones' : 'Mostrar opciones avanzadas'\n            }\n            position='top'\n          >\n            <button\n              onClick={toggleExpand}\n              className='decision-node__options-toggle'\n              aria-label={\n                isExpanded\n                  ? 'Ocultar opciones avanzadas'\n                  : 'Mostrar opciones avanzadas'\n              }\n              aria-expanded={isExpanded}\n            >\n              <Settings size={14} />\n              <span className='decision-node__options-title'>Opciones</span>\n              {isExpanded ? <ChevronUp size={14} /> : <ChevronDown size={14} />}\n            </button>\n          </Tooltip>\n        </div>\n\n        {isExpanded && (\n          <div className='decision-node__options-content'>\n            <div className='decision-node__option-group'>\n              <Tooltip\n                content={\n                  enableMarkdown\n                    ? 'Desactivar formato Markdown'\n                    : 'Activar formato Markdown. Usa `**negrita**`, `*cursiva*`, etc. (visible fuera de edición).'\n                }\n                position='right'\n              >\n                <button\n                  onClick={onToggleMarkdown}\n                  className={`decision-node__option-button ${enableMarkdown ? 'decision-node__option-button--active' : ''}`}\n                  aria-label={\n                    enableMarkdown ? 'Desactivar Markdown' : 'Activar Markdown'\n                  }\n                  aria-pressed={enableMarkdown}\n                >\n                  <PenTool size={14} />\n                  <span>Markdown</span>\n                </button>\n              </Tooltip>\n\n              <Tooltip\n                content={\n                  enableVariables\n                    ? 'Desactivar uso de variables'\n                    : 'Activar uso de variables (ej: `{{nombre_cliente}}`). Se reemplazan en ejecución.'\n                }\n                position='right'\n              >\n                <button\n                  onClick={onToggleVariables}\n                  className={`decision-node__option-button ${enableVariables ? 'decision-node__option-button--active' : ''}`}\n                  aria-label={\n                    enableVariables\n                      ? 'Desactivar variables'\n                      : 'Activar variables'\n                  }\n                  aria-pressed={enableVariables}\n                >\n                  <Code size={14} />\n                  <span>Variables</span>\n                </button>\n              </Tooltip>\n\n              <Tooltip\n                content={\n                  enableLogic\n                    ? 'Desactivar lógica de condiciones avanzada'\n                    : 'Activar lógica de condiciones avanzada (expresiones complejas, scripts). Funcionalidad futura o requiere config. adicional.'\n                }\n                position='right'\n              >\n                <button\n                  onClick={onToggleLogic}\n                  className={`decision-node__option-button ${enableLogic ? 'decision-node__option-button--active' : ''}`}\n                  aria-label={\n                    enableLogic\n                      ? 'Desactivar lógica avanzada'\n                      : 'Activar lógica avanzada'\n                  }\n                  aria-pressed={enableLogic}\n                >\n                  <Layers size={14} />\n                  <span>Lógica avanzada</span>\n                </button>\n              </Tooltip>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nDecisionNodeOptions.displayName = 'DecisionNodeOptions';\n\nDecisionNodeOptions.propTypes = {\n  isUltraPerformanceMode: PropTypes.bool,\n  onToggleMarkdown: PropTypes.func.isRequired,\n  enableMarkdown: PropTypes.bool,\n  onToggleVariables: PropTypes.func.isRequired,\n  enableVariables: PropTypes.bool,\n  onToggleLogic: PropTypes.func.isRequired,\n  enableLogic: PropTypes.bool,\n  // onToggleAnimation y enableAnimation eliminados de propTypes\n};\n\nexport default DecisionNodeOptions;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/components/DecisionNodeQuestion.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (139). Maximum allowed is 80.",
        "line": 33,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 191,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (86). Maximum allowed is 80.",
        "line": 99,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 188,
        "endColumn": 6
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 150,
        "column": 9,
        "nodeType": "JSXOpeningElement",
        "endLine": 153,
        "endColumn": 10
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 166,
        "column": 14,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 182,
        "endColumn": 14
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 170,
        "column": 17,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 182,
        "endColumn": 14
      },
      {
        "ruleId": "react/no-danger",
        "severity": 2,
        "message": "Dangerous property 'dangerouslySetInnerHTML' found",
        "line": 173,
        "column": 17,
        "nodeType": "JSXAttribute",
        "messageId": "dangerousProp",
        "endLine": 178,
        "endColumn": 19
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 175,
        "column": 21,
        "nodeType": "Literal",
        "endLine": 175,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file DecisionNodeQuestion.jsx\n * @description Componente para editar la pregunta del nodo de decisión\n */\n\nimport { X, Save, Check } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { memo, useRef, useEffect, useCallback, useState } from 'react';\n\nimport Tooltip from '../../../ui/ToolTip';\nimport { NODE_CONFIG } from '../DecisionNode.types';\n\n// Importación dinámica para ReactMarkdown\nconst ReactMarkdown = React.lazy(\n  () => import('../../../../../lib/simplified-markdown'),\n);\n\n/**\n * Componente para editar la pregunta del nodo de decisión\n * @param {Object} props - Propiedades del componente\n * @param {string} props.question - Texto de la pregunta\n * @param {Function} props.onQuestionChange - Función para manejar cambios en la pregunta\n * @param {boolean} props.isEditing - Indica si está en modo edición\n * @param {Function} props.onStartEditing - Función para iniciar edición\n * @param {Function} props.onSave - Función para guardar cambios\n * @param {Function} props.onCancel - Función para cancelar edición\n * @param {boolean} props.isSaving - Indica si está guardando\n * @param {boolean} props.enableMarkdown - Indica si se debe renderizar markdown\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @returns {JSX.Element} - Editor de pregunta del nodo\n */\nconst DecisionNodeQuestion = memo(\n  ({\n    question,\n    onQuestionChange,\n    isEditing,\n    onStartEditing,\n    onSave,\n    onCancel,\n    isSaving = false,\n    enableMarkdown = false,\n    enableVariables = false, // Asegurarse de que se recibe y se usa\n    isUltraPerformanceMode = false,\n  }) => {\n    const textareaReference = useRef(null);\n    // Usar estado local para el input para evitar problemas de renderizado\n    const [localQuestion, setLocalQuestion] = useState(question);\n\n    // Sincronizar el estado local con el prop cuando cambia externamente\n    useEffect(() => {\n      setLocalQuestion(question);\n    }, [question]);\n\n    // Ajustar altura del textarea y enfocar cuando se inicia la edición\n    useEffect(() => {\n      if (isEditing && textareaReference.current) {\n        requestAnimationFrame(() => {\n          textareaReference.current.style.height = 'auto';\n          textareaReference.current.style.height = `${Math.min(textareaReference.current.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT || 300)}px`;\n          textareaReference.current.focus();\n          textareaReference.current.select();\n        });\n      }\n    }, [isEditing]);\n\n    // Manejar cambios en el textarea usando estado local\n    const handleChange = useCallback(\n      (event) => {\n        const newValue = event.target.value;\n        setLocalQuestion(newValue); // Actualizar estado local inmediatamente\n\n        // Propagar el cambio al componente padre\n        onQuestionChange(newValue);\n\n        // Ajustar la altura del textarea dinámicamente\n        if (textareaReference.current) {\n          textareaReference.current.style.height = 'auto';\n          textareaReference.current.style.height = `${Math.min(textareaReference.current.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT || 300)}px`;\n        }\n      },\n      [onQuestionChange],\n    );\n\n    // Manejar teclas al editar\n    const handleKeyDown = useCallback(\n      (event) => {\n        if (event.key === 'Enter' && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault();\n          onSave();\n        } else if (event.key === 'Escape') {\n          event.preventDefault();\n          onCancel();\n        }\n      },\n      [onSave, onCancel],\n    );\n\n    // Renderizar contenido según modo\n    const renderContent = () => {\n      if (isEditing) {\n        return (\n          <div className='decision-node__question-wrapper nodrag'>\n            <textarea\n              ref={textareaReference}\n              className='decision-node__question-input'\n              value={localQuestion}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              placeholder={NODE_CONFIG.DEFAULT_QUESTION}\n              aria-label={NODE_CONFIG.ARIA_LABELS.question}\n              disabled={isSaving}\n            />\n\n            <div className='decision-node__actions-toolbar'>\n              <Tooltip\n                content={`Cancelar (${NODE_CONFIG.KEY_SHORTCUTS.cancel.key})`}\n                position='top'\n              >\n                <button\n                  onClick={onCancel}\n                  className='decision-node__button decision-node__button--cancel'\n                  aria-label={NODE_CONFIG.ARIA_LABELS.cancelEditing}\n                  aria-keyshortcuts={NODE_CONFIG.KEY_SHORTCUTS.cancel.key}\n                  disabled={isSaving}\n                >\n                  <X size={14} />\n                  <span>Cancelar</span>\n                </button>\n              </Tooltip>\n              <Tooltip content='Guardar (Ctrl/Cmd + Enter)' position='top'>\n                <button\n                  onClick={onSave}\n                  className='decision-node__button decision-node__button--save'\n                  aria-label={NODE_CONFIG.ARIA_LABELS.saveChanges}\n                  aria-keyshortcuts='Control+Enter Meta+Enter'\n                  disabled={isSaving}\n                  type='submit'\n                >\n                  <Check size={14} />\n                  <span>{isSaving ? 'Guardando...' : 'Guardar'}</span>\n                </button>\n              </Tooltip>\n            </div>\n          </div>\n        );\n      }\n\n      // En modo visualización\n      return (\n        <div\n          className='decision-node__question-wrapper'\n          onClick={isUltraPerformanceMode ? undefined : onStartEditing}\n        >\n          <div\n            className='decision-node__question'\n            role='button'\n            tabIndex={0}\n            aria-label={`${NODE_CONFIG.ARIA_LABELS.question}: ${question}. Doble clic para editar.`}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter' || event.key === ' ') {\n                event.preventDefault();\n                onStartEditing();\n              }\n            }}\n          >\n            {enableMarkdown ? (\n              <React.Suspense fallback={<div>{question}</div>}>\n                <ReactMarkdown>{question}</ReactMarkdown>\n              </React.Suspense>\n            ) : enableVariables ? (\n              // Renderizar con variables resaltadas si enableVariables es true y enableMarkdown es false\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: question.replaceAll(\n                    /\\{\\{(.*?)\\}\\}/g,\n                    '<span class=\"variable-highlight\">{{$1}}</span>',\n                  ),\n                }}\n              />\n            ) : (\n              question\n            )}\n            {/* Nota: Si enableMarkdown y enableVariables están activos, Markdown tiene precedencia.\n              Para tener ambos, ReactMarkdown necesitaría un componente personalizado para los spans. */}\n          </div>\n        </div>\n      );\n    };\n\n    return renderContent();\n  },\n);\n\nDecisionNodeQuestion.displayName = 'DecisionNodeQuestion';\n\nDecisionNodeQuestion.propTypes = {\n  question: PropTypes.string.isRequired,\n  onQuestionChange: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n  onStartEditing: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  isSaving: PropTypes.bool,\n  enableMarkdown: PropTypes.bool,\n  enableVariables: PropTypes.bool, // Añadir a propTypes\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\nexport default DecisionNodeQuestion;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/decisionnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/discordnode/DiscordNode.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/emotiondetectionnode/EmotionDetectionNode.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 137,
        "column": 50,
        "nodeType": "MemberExpression",
        "endLine": 137,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/emotiondetectionnode/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/emotiondetectionnode/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/emotiondetectionnode/useEmotionDetectionNode.ts",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 73,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 73,
        "endColumn": 31
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 79,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 79,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe array destructuring of a tuple element with an `any` value.",
        "line": 95,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unsafeArrayPatternFromTuple",
        "endLine": 95,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 96,
        "column": 5,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 96,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateNodeData on an `any` value.",
        "line": 96,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 96,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 103,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 103,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 115,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 115,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 122,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 122,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useEmotionDetectionNode.ts\n *\n * Hook personalizado para encapsular la lógica del EmotionDetectionNode.\n * Maneja las llamadas a la API, la actualización de datos y el estado interno.\n */\n\nimport { useState, useCallback } from 'react';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\n// Lista de emociones que el nodo puede detectar y para las que creará salidas\nexport const EMOTIONS = [\n  'happy',\n  'angry',\n  'sad',\n  'neutral',\n  'frustrated',\n  'surprised',\n];\n\n// Tipo para la emoción detectada\nexport type Emotion = (typeof EMOTIONS)[number];\n\n// Interfaz para el resultado del análisis de emociones\nexport interface EmotionAnalysis {\n  emotion: Emotion;\n  scores: Record<Emotion, number>;\n}\n\n// Simulación de una API de detección de emociones\nconst fakeEmotionAPI = async (text: string): Promise<EmotionAnalysis> => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const emotions = EMOTIONS;\n      let detectedEmotion: Emotion = 'neutral';\n\n      // Lógica de detección simple basada en palabras clave para la simulación\n      if (\n        text.toLowerCase().includes('feliz') ||\n        text.toLowerCase().includes('bien') ||\n        text.toLowerCase().includes('genial')\n      )\n        detectedEmotion = 'happy';\n      else if (\n        text.toLowerCase().includes('mal') ||\n        text.toLowerCase().includes('triste') ||\n        text.toLowerCase().includes('deprimido')\n      )\n        detectedEmotion = 'sad';\n      else if (\n        text.toLowerCase().includes('enojo') ||\n        text.toLowerCase().includes('rabia') ||\n        text.toLowerCase().includes('molesto')\n      )\n        detectedEmotion = 'angry';\n      else if (\n        text.toLowerCase().includes('sorpresa') ||\n        text.toLowerCase().includes('increíble') ||\n        text.toLowerCase().includes('asombro')\n      )\n        detectedEmotion = 'surprised';\n      else if (\n        text.toLowerCase().includes('frustrado') ||\n        text.toLowerCase().includes('harto') ||\n        text.toLowerCase().includes('cansado')\n      )\n        detectedEmotion = 'frustrated';\n\n      // Generamos scores aleatorios, dando un puntaje más alto a la emoción detectada\n      const scores = emotions.reduce(\n        (accumulator, emotion) => {\n          accumulator[emotion] = Math.random() * 0.4;\n          return accumulator;\n        },\n        {} as Record<Emotion, number>,\n      );\n\n      scores[detectedEmotion] = 0.8 + Math.random() * 0.2; // Puntaje más alto para la emoción detectada\n\n      resolve({ emotion: detectedEmotion, scores });\n    }, 1000); // Simulamos una demora de red\n  });\n};\n\nexport interface UseEmotionDetectionNodeReturn {\n  isLoading: boolean;\n  handleOutputVariableChange: (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => void;\n  runEmotionDetection: (text: string) => Promise<Emotion>;\n}\n\nexport const useEmotionDetectionNode = (id: string) => {\n  const { updateNodeData } = useFlowStore((state) => ({\n    updateNodeData: state.updateNodeData,\n  }));\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Función para manejar cambios en el campo de la variable de salida\n  const handleOutputVariableChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateNodeData(id, { outputVariable: event.target.value });\n    },\n    [id, updateNodeData],\n  );\n\n  // Función para ejecutar la detección de emociones\n  const runEmotionDetection = useCallback(\n    async (text: string) => {\n      setIsLoading(true);\n      try {\n        const result = await fakeEmotionAPI(text);\n        // Actualizamos los datos del nodo con la emoción detectada\n        updateNodeData(id, {\n          detectedEmotion: result.emotion,\n          inputText: text,\n        });\n\n        return result.emotion; // Retornamos la emoción para que el sistema de flujo pueda ramificar\n      } catch {\n        updateNodeData(id, { detectedEmotion: 'neutral' });\n        return 'neutral';\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [id, updateNodeData],\n  );\n\n  return {\n    handleOutputVariableChange,\n    runEmotionDetection,\n    isLoading,\n  };\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/EndNode.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 25,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 25,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 25,
        "column": 56,
        "nodeType": "MemberExpression",
        "messageId": "unsafeReturn",
        "endLine": 25,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .isUltraMode on an `any` value.",
        "line": 25,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 25,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 44,
        "column": 13,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 44,
        "endColumn": 52
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file EndNode.tsx\n * @description Componente optimizado para representar el nodo final en el editor de flujos PLUBOT.\n * @author PLUBOT Team\n * @version 5.0.0 (Refactored for simplicity and performance)\n */\n\nimport { memo } from 'react';\nimport { Handle, Position, useReactFlow } from 'reactflow';\nimport type { NodeProps as RFNodeProperties } from 'reactflow';\n\nimport { cn } from '@/lib/utils';\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport Tooltip from '../../ui/ToolTip';\n\nimport { type EndNodeData } from './endNode.schema';\n\nimport './EndNode.css';\n\n// --- COMPONENTE PRINCIPAL ---\nconst EndNode = memo<RFNodeProperties<EndNodeData>>(\n  ({ id: nodeId, data, selected }) => {\n    const { getEdges } = useReactFlow();\n    const isUltraPerformance = useFlowStore((state) => state.isUltraMode);\n\n    const incomingEdges = getEdges().filter(\n      (edge) => edge.target === nodeId,\n    ).length;\n\n    const endNodeData = {\n      ...data,\n      label: data.label || 'Fin',\n      highlight: data.highlight || false,\n      dynamicContent: data.dynamicContent || 'Este es el final del flujo.',\n      connections: incomingEdges,\n      lastRun: data.lastRun || new Date().toLocaleDateString(),\n    };\n\n    return (\n      <div\n        className={cn(\n          'end-node',\n          { 'ultra-performance': isUltraPerformance },\n          { 'end-node-highlight': endNodeData.highlight },\n          { selected: selected },\n        )}\n      >\n        <Handle\n          type='target'\n          position={Position.Left}\n          className='end-node-handle end-node-handle--target'\n          isConnectable\n        />\n        <div className='end-node-title'>{endNodeData.label}</div>\n        <div className='end-node-content'>{endNodeData.dynamicContent}</div>\n        <div className='end-node-elite-info'>\n          <Tooltip\n            content={`Número de flujos que finalizan aquí: ${endNodeData.connections}`}\n            position='top'\n            delay={300}\n          >\n            <span>Conexiones: {endNodeData.connections}</span>\n          </Tooltip>\n          <Tooltip\n            content='Fecha de la última ejecución de este nodo.'\n            position='top'\n            delay={300}\n          >\n            <span>Última Ejecución: {endNodeData.lastRun}</span>\n          </Tooltip>\n        </div>\n        <div className='end-node-indicator' />\n      </div>\n    );\n  },\n);\n\nEndNode.displayName = 'EndNode';\n\nexport default EndNode;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/EndNodeContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/EndNodeHeader.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 82,
        "column": 21,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 82,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [2255, 2257], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import cn from 'classnames'; // For conditional class names\nimport {\n  Flag,\n  ChevronDown,\n  ChevronRight,\n  MoreVertical,\n  Check,\n  X,\n  Edit3,\n} from 'lucide-react';\nimport React, { useEffect, ChangeEvent } from 'react';\n\nimport Tooltip from '../../ui/ToolTip'; // Adjust path if needed\n\ninterface EndNodeHeaderProperties {\n  label: string;\n  status?: string;\n  customIcon?: React.ReactNode;\n  isCollapsed: boolean;\n  isEditingLabel: boolean;\n  editingLabelValue: string;\n  labelInputRef: React.RefObject<HTMLInputElement | HTMLTextAreaElement | null>;\n  onToggleCollapse: () => void;\n  onMenuClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onStartEditingLabel: () => void;\n  onLabelChange: (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n  onLabelSubmit: () => void;\n  onLabelCancel: () => void;\n  onLabelKeyDown: (\n    event: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n  canEdit?: boolean;\n}\n\nconst EndNodeHeader: React.FC<EndNodeHeaderProperties> = ({\n  label,\n  status,\n  customIcon,\n  isCollapsed,\n  isEditingLabel,\n  editingLabelValue,\n  labelInputRef,\n  onToggleCollapse,\n  onMenuClick,\n  onStartEditingLabel,\n  onLabelChange,\n  onLabelSubmit,\n  onLabelCancel,\n  onLabelKeyDown,\n  canEdit = true, // Default to true if not provided\n}) => {\n  useEffect(() => {\n    if (isEditingLabel && labelInputRef.current) {\n      labelInputRef.current.focus();\n      labelInputRef.current.select();\n    }\n  }, [isEditingLabel, labelInputRef]);\n\n  const handleLabelDoubleClick = () => {\n    if (!isEditingLabel && canEdit) {\n      onStartEditingLabel();\n    }\n  };\n\n  return (\n    <div className={cn('end-node-header', { 'editing-label': isEditingLabel })}>\n      <button\n        onClick={onToggleCollapse}\n        className='end-node-collapse-button'\n        aria-label={isCollapsed ? 'Expandir nodo' : 'Colapsar nodo'}\n        title={isCollapsed ? 'Expandir nodo' : 'Colapsar nodo'}\n      >\n        {isCollapsed ? <ChevronRight size={18} /> : <ChevronDown size={18} />}\n      </button>\n\n      <div\n        className='flex items-center flex-grow mr-2 overflow-hidden'\n        onDoubleClick={canEdit ? onStartEditingLabel : undefined}\n      >\n        {customIcon || <Flag size={16} />}\n      </div>\n\n      <div\n        className='end-node-title-container'\n        onDoubleClick={handleLabelDoubleClick}\n      >\n        {isEditingLabel ? (\n          <div className='end-node-label-edit-container'>\n            <input\n              ref={labelInputRef as React.RefObject<HTMLInputElement>} // Cast if primarily input\n              type='text'\n              value={editingLabelValue}\n              onChange={onLabelChange}\n              onKeyDown={onLabelKeyDown} // Handles Enter/Escape\n              onBlur={onLabelSubmit} // Submit on blur as a common pattern\n              className='end-node-label-input'\n              aria-label='Editar etiqueta del nodo'\n            />\n            <button\n              onClick={onLabelSubmit}\n              className='end-node-label-edit-button submit'\n              aria-label='Confirmar etiqueta'\n            >\n              <Check size={16} />\n            </button>\n            <button\n              onClick={onLabelCancel}\n              className='end-node-label-edit-button cancel'\n              aria-label='Cancelar edición'\n            >\n              <X size={16} />\n            </button>\n          </div>\n        ) : (\n          <h3 className='end-node-title' title={label}>\n            {label.length > 25 ? `${label.slice(0, 22)}...` : label}\n            {canEdit && (\n              <Tooltip content='Editar nombre del nodo'>\n                <button\n                  type='button'\n                  onClick={onStartEditingLabel}\n                  className='p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-md w-6 h-6 flex items-center justify-center'\n                  disabled={!canEdit}\n                  aria-label='Editar nombre del nodo'\n                >\n                  <Edit3 size={14} />\n                </button>\n              </Tooltip>\n            )}\n          </h3>\n        )}\n        {status && !isEditingLabel && (\n          <Tooltip content={`Estado: ${status}`} position='top'>\n            <span\n              className={`end-node-status-badge status-${status.toLowerCase()}`}\n            >\n              {status}\n            </span>\n          </Tooltip>\n        )}\n      </div>\n\n      <button\n        onClick={onMenuClick}\n        className='end-node-menu-button'\n        aria-label='Abrir menú contextual'\n        title='Más opciones'\n      >\n        <MoreVertical size={18} />\n      </button>\n    </div>\n  );\n};\n\nexport default EndNodeHeader;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/endNode.schema.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/endnode/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/httprequestnode/HttpRequestNode.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 26,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 63,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/prefer-single-boolean-return",
        "severity": 2,
        "message": "Replace this if-then-else flow by a single return statement.",
        "line": 52,
        "column": 3,
        "nodeType": "IfStatement",
        "messageId": "replaceIfThenElseByReturn",
        "endLine": 60,
        "endColumn": 4,
        "suggestions": [
          {
            "messageId": "suggest",
            "fix": {
              "range": [1512, 1838],
              "text": "return !(JSON.stringify(previousData.headers) !== JSON.stringify(nextData.headers) ||\n    JSON.stringify(previousData.bodyFormData) !==\n      JSON.stringify(nextData.bodyFormData) ||\n    JSON.stringify(previousData.responseMapping) !==\n      JSON.stringify(nextData.responseMapping));"
            },
            "desc": "Replace with single return statement"
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (742). Maximum allowed is 80.",
        "line": 66,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 879,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 49. Maximum allowed is 10.",
        "line": 66,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 879,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 34 to the 15 allowed.",
        "line": 73,
        "column": 6,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 73,
        "endColumn": 8
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 76,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 23
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 117,
        "column": 50,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 117,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [3507, 3511], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 15. Maximum allowed is 10.",
        "line": 124,
        "column": 15,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 150,
        "endColumn": 6
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 176,
        "column": 7,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 268,
        "endColumn": 8
      },
      {
        "ruleId": "unicorn/consistent-function-scoping",
        "severity": 2,
        "message": "Move arrow function 'getPathOrKeyLabel' to the outer scope.",
        "line": 355,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "consistent-function-scoping",
        "endLine": 355,
        "endColumn": 42
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 365,
        "column": 14,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 365,
        "endColumn": 18
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 381,
        "column": 21,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 381,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [11721, 11725], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 394,
        "column": 18,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 394,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [12168, 12172], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [12168, 12172], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 407,
        "column": 45,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 407,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [12559, 12563], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"errorDetails\".",
        "line": 418,
        "column": 13,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 418,
        "endColumn": 25
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 452,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 452,
        "endColumn": 22
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 514,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 514,
        "endColumn": 29
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 533,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 533,
        "endColumn": 29
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 548,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 548,
        "endColumn": 31
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 558,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 558,
        "endColumn": 31
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 588,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 588,
        "endColumn": 29
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 608,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 608,
        "endColumn": 31
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 634,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 634,
        "endColumn": 35
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 644,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 644,
        "endColumn": 35
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (98). Maximum allowed is 80.",
        "line": 675,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 774,
        "endColumn": 14
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 682,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 682,
        "endColumn": 33
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 710,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 710,
        "endColumn": 35
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 732,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 732,
        "endColumn": 33
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 752,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 752,
        "endColumn": 33
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 825,
        "column": 70,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 825,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [28481, 28485], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has missing dependencies: 'bodyFormData', 'bodyString', 'bodyType', 'defaultData.bodyFormData', 'defaultData.bodyString', 'defaultData.bodyType', 'defaultData.headers', 'defaultData.method', 'defaultData.url', 'headers', 'method', 'responseMapping', and 'url'. Either include them or remove the dependency array.",
        "line": 150,
        "column": 8,
        "nodeType": "ArrayExpression",
        "endLine": 150,
        "endColumn": 14,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [bodyFormData, bodyString, bodyType, data, defaultData.bodyFormData, defaultData.bodyString, defaultData.bodyType, defaultData.headers, defaultData.method, defaultData.url, headers, method, responseMapping, url]",
            "fix": {
              "range": [4957, 4963],
              "text": "[bodyFormData, bodyString, bodyType, data, defaultData.bodyFormData, defaultData.bodyString, defaultData.bodyType, defaultData.headers, defaultData.method, defaultData.url, headers, method, responseMapping, url]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 325,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 325,
        "endColumn": 34,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 30,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import axios from 'axios';\nimport {\n  Network,\n  ChevronDown,\n  ChevronUp,\n  Trash2,\n  Copy,\n  AlertCircle,\n  CheckCircle,\n  XCircle,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect, useCallback, memo } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport useNode from '@/hooks/useNode';\nimport useFlowStore from '@/stores/use-flow-store';\nimport { NODE_TYPES } from '@/utils/node-config.js';\n\nimport ContextMenu from '../../ui/context-menu';\nimport Tooltip from '../../ui/ToolTip';\n\nimport './HttpRequestNode.css';\n\nconst arePropertiesEqual = (previousProperties, nextProperties) => {\n  if (\n    previousProperties.selected !== nextProperties.selected ||\n    previousProperties.isConnectable !== nextProperties.isConnectable\n  ) {\n    return false;\n  }\n\n  // Deep comparison for the data object\n  const previousData = previousProperties.data || {};\n  const nextData = nextProperties.data || {};\n\n  // Compare primitive and easily comparable fields first\n  if (\n    previousData.label !== nextData.label ||\n    previousData.method !== nextData.method ||\n    previousData.url !== nextData.url ||\n    previousData.bodyType !== nextData.bodyType ||\n    previousData.bodyString !== nextData.bodyString ||\n    previousData.isCollapsed !== nextData.isCollapsed\n  ) {\n    return false;\n  }\n\n  // Use JSON.stringify for deep comparison of arrays of objects\n  // This is a pragmatic approach for complex but serializable data.\n  if (\n    JSON.stringify(previousData.headers) !== JSON.stringify(nextData.headers) ||\n    JSON.stringify(previousData.bodyFormData) !==\n      JSON.stringify(nextData.bodyFormData) ||\n    JSON.stringify(previousData.responseMapping) !==\n      JSON.stringify(nextData.responseMapping)\n  ) {\n    return false;\n  }\n\n  return true; // Props are equal\n};\n\nconst HttpRequestNode = memo(\n  ({\n    data = {},\n    isConnectable = true,\n    selected = false,\n    id,\n    onNodesChange,\n    isUltraPerformanceMode = false,\n  }) => {\n    const { updateNodeData } = useFlowStore();\n\n    useEffect(() => {}, [id, data.lodLevel]);\n\n    const defaultData = {\n      label: 'Llamada API',\n      type: NODE_TYPES.httpRequest,\n      method: 'GET',\n      url: 'https://api.example.com/data',\n      headers: [],\n      bodyType: 'none',\n      bodyString: '',\n      bodyFormData: [],\n      responseMapping: [],\n      status: '',\n      isCollapsed: false,\n      lastModified: new Date().toISOString(),\n      modifiedBy: 'system',\n      notes: '',\n    };\n\n    const [method, setMethod] = useState(data.method || defaultData.method);\n    const [url, setUrl] = useState(data.url || defaultData.url);\n    const [headers, setHeaders] = useState(data.headers || defaultData.headers);\n    const [bodyType, setBodyType] = useState(\n      data.bodyType || defaultData.bodyType,\n    );\n    const [bodyString, setBodyString] = useState(\n      data.bodyString || defaultData.bodyString,\n    );\n    const [bodyFormData, setBodyFormData] = useState(\n      data.bodyFormData || defaultData.bodyFormData,\n    );\n    const initialResponseMapping = (\n      data.responseMapping || defaultData.responseMapping\n    ).map((entry) => ({\n      ...entry,\n      defaultValue: entry.defaultValue === undefined ? '' : entry.defaultValue,\n    }));\n    const [responseMapping, setResponseMapping] = useState(\n      initialResponseMapping,\n    );\n    const [isTesting, setIsTesting] = useState(false);\n    const [testResult, setTestResult] = useState(null);\n\n    // This effect synchronizes the component's internal state with the `data` prop.\n    // It's designed to run only when the `data` prop object itself changes,\n    // preventing infinite loops that would occur if state variables updated within\n    // the effect were added to the dependency array.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    useEffect(() => {\n      if (data.method !== method) setMethod(data.method || defaultData.method);\n      if (data.url !== url) setUrl(data.url || defaultData.url);\n      if (JSON.stringify(data.headers) !== JSON.stringify(headers)) {\n        setHeaders(data.headers || defaultData.headers);\n      }\n      if (data.bodyType !== bodyType)\n        setBodyType(data.bodyType || defaultData.bodyType);\n      if (data.bodyString !== bodyString)\n        setBodyString(data.bodyString || defaultData.bodyString);\n      if (JSON.stringify(data.bodyFormData) !== JSON.stringify(bodyFormData)) {\n        setBodyFormData(data.bodyFormData || defaultData.bodyFormData);\n      }\n      const newResponseMappingFromData = (data.responseMapping || []).map(\n        (entry) => ({\n          ...entry,\n          defaultValue:\n            entry.defaultValue === undefined ? '' : entry.defaultValue,\n        }),\n      );\n      if (\n        JSON.stringify(newResponseMappingFromData) !==\n        JSON.stringify(responseMapping)\n      ) {\n        setResponseMapping(newResponseMappingFromData);\n      }\n    }, [data]);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const {\n      isCollapsed,\n      showContextMenu,\n      contextMenuPosition,\n      errorMessage,\n      nodeRef,\n      toggleCollapse,\n      handleContextMenu,\n      setShowContextMenu,\n      setIsHovered,\n      trackChanges,\n      canEdit,\n      canDelete,\n    } = useNode({\n      id,\n      data,\n      onNodesChange,\n      isConnectable,\n      minWidth: 280,\n      minHeight: 150,\n    });\n\n    const handleConfigurationChange = useCallback(\n      (field, value) => {\n        const oldDataForLog = { ...data };\n        const newLocalStateUpdates = {};\n\n        switch (field) {\n          case 'method': {\n            setMethod(value);\n            newLocalStateUpdates.method = value;\n\n            break;\n          }\n          case 'url': {\n            setUrl(value);\n            newLocalStateUpdates.url = value;\n\n            break;\n          }\n          case 'headers': {\n            setHeaders(value);\n            newLocalStateUpdates.headers = value;\n\n            break;\n          }\n          case 'bodyType': {\n            setBodyType(value);\n            newLocalStateUpdates.bodyType = value;\n            switch (value) {\n              case 'none': {\n                setBodyString('');\n                setBodyFormData([]);\n                newLocalStateUpdates.bodyString = '';\n                newLocalStateUpdates.bodyFormData = [];\n\n                break;\n              }\n              case 'json':\n              case 'text': {\n                setBodyFormData([]);\n                newLocalStateUpdates.bodyFormData = [];\n\n                break;\n              }\n              case 'form-data': {\n                setBodyString('');\n                newLocalStateUpdates.bodyString = '';\n\n                break;\n              }\n              default: {\n                break;\n              }\n            }\n\n            break;\n          }\n          case 'bodyString': {\n            setBodyString(value);\n            newLocalStateUpdates.bodyString = value;\n\n            break;\n          }\n          case 'bodyFormData': {\n            setBodyFormData(value);\n            newLocalStateUpdates.bodyFormData = value;\n\n            break;\n          }\n          case 'responseMapping': {\n            setResponseMapping(value);\n            newLocalStateUpdates.responseMapping = value;\n\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n\n        const updatedNodeData = {\n          ...data,\n          ...newLocalStateUpdates,\n          lastModified: new Date().toISOString(),\n        };\n\n        trackChanges(\n          'configuration',\n          updatedNodeData,\n          oldDataForLog,\n          newLocalStateUpdates,\n        );\n\n        updateNodeData(id, updatedNodeData);\n      },\n      [id, data, trackChanges, updateNodeData],\n    );\n\n    const handleHeaderChange = (index, field, value) => {\n      const newHeaders = headers.map((header, index_) => {\n        if (index_ !== index) return header;\n        // The 'field' variable is controlled and can only be 'key' or 'value', so this is safe.\n\n        return { ...header, [field]: value };\n      });\n      handleConfigurationChange('headers', newHeaders);\n    };\n\n    const addHeader = () => {\n      const newHeader = { id: uuidv4(), key: '', value: '' };\n      const newHeaders = [...headers, newHeader];\n      handleConfigurationChange('headers', newHeaders);\n    };\n\n    const removeHeader = (index) => {\n      const newHeaders = headers.filter((_, index_) => index_ !== index);\n      handleConfigurationChange('headers', newHeaders);\n    };\n\n    const handleFormDataEntryChange = (index, field, value) => {\n      const newFormData = bodyFormData.map((entry, index_) => {\n        if (index_ !== index) return entry;\n        // The 'field' variable is controlled and can only be 'key' or 'value', so this is safe.\n\n        return { ...entry, [field]: value };\n      });\n      handleConfigurationChange('bodyFormData', newFormData);\n    };\n\n    const addFormDataEntry = () => {\n      const newEntry = { id: uuidv4(), key: '', value: '' };\n      const newFormData = [...bodyFormData, newEntry];\n      handleConfigurationChange('bodyFormData', newFormData);\n    };\n\n    const removeFormDataEntry = (index) => {\n      const newFormData = bodyFormData.filter((_, index_) => index_ !== index);\n      handleConfigurationChange('bodyFormData', newFormData);\n    };\n\n    const handleResponseMapEntryChange = (index, field, value) => {\n      const newResponseMapping = responseMapping.map((entry, index_) => {\n        if (index_ !== index) return entry;\n        // The 'field' variable is controlled and comes from a trusted source.\n\n        return { ...entry, [field]: value };\n      });\n      if (field === 'source' && value === 'status_code') {\n        // The linter incorrectly flags the line below as a security risk.\n        // It's a false positive, as we are assigning a static empty string, not user input.\n        // eslint-disable-next-line security/detect-object-injection\n        newResponseMapping[index].pathOrKey = '';\n      }\n      handleConfigurationChange('responseMapping', newResponseMapping);\n    };\n\n    const addResponseMapEntry = () => {\n      const newEntry = {\n        id: uuidv4(),\n        source: 'status_code',\n        pathOrKey: '',\n        targetVariable: '',\n        defaultValue: '',\n      };\n      const newResponseMapping = [...responseMapping, newEntry];\n      handleConfigurationChange('responseMapping', newResponseMapping);\n    };\n\n    const removeResponseMapEntry = (index) => {\n      const newResponseMapping = responseMapping.filter(\n        (_, index_) => index_ !== index,\n      );\n      handleConfigurationChange('responseMapping', newResponseMapping);\n    };\n\n    const responseSourceOptions = [\n      { value: 'status_code', label: 'Código de Estado' },\n      { value: 'body_json_path', label: 'Body (JSON Path)' },\n      { value: 'header_key', label: 'Cabecera (Header)' },\n    ];\n\n    const getPathOrKeyLabel = (source) => {\n      if (source === 'body_json_path') return 'JSON Path (ej: data.user.id)';\n      if (source === 'header_key') return 'Nombre Cabecera (ej: X-Request-ID)';\n      return '';\n    };\n\n    const contextMenuItems = [\n      {\n        label: 'Duplicar Nodo',\n        action: () => {\n          // TODO: Implementar la lógica de duplicación de nodos.\n        },\n        icon: <Copy size={14} />,\n        disabled: !canEdit,\n      },\n      {\n        label: 'Eliminar Nodo',\n        action: () => onNodesChange([{ type: 'remove', id }]),\n        icon: <Trash2 size={14} />,\n        danger: true,\n        disabled: !canDelete,\n      },\n    ];\n\n    const handleTestRequest = useCallback(async () => {\n      setIsTesting(true);\n      setTestResult(null);\n\n      try {\n        const formData = new FormData();\n        if (bodyType === 'form-data') {\n          for (const item of bodyFormData)\n            formData.append(item.key, item.value);\n        }\n\n        const getBodyPayload = () => {\n          if (bodyType === 'json') return JSON.parse(bodyString || '{}');\n          if (bodyType === 'text') return bodyString;\n          if (bodyType === 'form-data') return formData;\n          return null;\n        };\n\n        const response = await axios({\n          method,\n          url,\n          headers: Object.fromEntries(headers.map((h) => [h.key, h.value])),\n          data: getBodyPayload(),\n          timeout: 10_000, // 10 segundos de timeout\n        });\n\n        const responseBodyPreview =\n          typeof response.data === 'object'\n            ? JSON.stringify(response.data, null, 2)\n            : String(response.data);\n\n        setTestResult({\n          success: true,\n          statusCode: response.status,\n          message: 'Solicitud exitosa.',\n          responseBodyPreview: responseBodyPreview.slice(0, 500), // Limitar preview\n          headersPreview: response.headers,\n        });\n      } catch (error) {\n        let errorDetails = 'Error desconocido.';\n        if (error.response) {\n          const responseData = JSON.stringify(error.response.data);\n          errorDetails =\n            `Servidor respondió con estado ${error.response.status}. ` +\n            `Data: ${responseData}`;\n        } else if (error.request) {\n          errorDetails = 'No se recibió respuesta del servidor.';\n        } else {\n          errorDetails = `Error de configuración: ${error.message}`;\n        }\n\n        setTestResult({\n          success: false,\n          message: 'Falló la solicitud de prueba.',\n          errorDetails,\n        });\n      } finally {\n        setIsTesting(false);\n      }\n    }, [method, url, headers, bodyType, bodyString, bodyFormData]);\n\n    return (\n      <div\n        ref={nodeRef}\n        className={`http-request-node${selected ? ' selected' : ''}${isCollapsed ? ' collapsed' : ''}${isUltraPerformanceMode ? ' ultra-performance' : ''}`}\n        style={{\n          transition: isUltraPerformanceMode ? 'none' : 'all 0.2s ease-in-out',\n          boxShadow: isUltraPerformanceMode\n            ? 'none'\n            : '0 0 10px rgba(0, 0, 0, 0.1)',\n        }}\n        role='button'\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (canEdit && (e.key === 'Enter' || e.key === ' ')) {\n            toggleCollapse();\n            e.preventDefault(); // Evita el scroll en la página al presionar espacio\n          }\n        }}\n        onDoubleClick={canEdit ? toggleCollapse : undefined}\n        onMouseEnter={\n          isUltraPerformanceMode ? undefined : () => setIsHovered(true)\n        }\n        onMouseLeave={\n          isUltraPerformanceMode ? undefined : () => setIsHovered(false)\n        }\n        onContextMenu={handleContextMenu}\n        aria-label={data.label || 'Nodo HTTP'}\n      >\n        <Handle\n          type='target'\n          position={Position.Top}\n          isConnectable={isConnectable}\n          className='ts-handle-target'\n        />\n\n        <div\n          className='ts-node-header'\n          onDoubleClick={canEdit ? toggleCollapse : undefined}\n        >\n          <Network size={16} className='ts-node-icon' />\n          <span className='ts-node-title'>\n            {data.label || defaultData.label}\n          </span>\n          <div className='ts-node-header-actions'>\n            {canEdit && (\n              <Tooltip content={isCollapsed ? 'Expandir' : 'Colapsar'}>\n                <button\n                  onClick={toggleCollapse}\n                  className='ts-node-action-button'\n                >\n                  {isCollapsed ? (\n                    <ChevronDown size={14} />\n                  ) : (\n                    <ChevronUp size={14} />\n                  )}\n                </button>\n              </Tooltip>\n            )}\n          </div>\n        </div>\n\n        {!isCollapsed && (\n          <div className='ts-node-content'>\n            {errorMessage && (\n              <div className='ts-node-error-message'>\n                <AlertCircle size={14} /> {errorMessage}\n              </div>\n            )}\n\n            <div className='ts-node-setting'>\n              <label htmlFor={`method-${id}`}>Método:</label>\n              <select\n                id={`method-${id}`}\n                value={method}\n                onChange={(e) =>\n                  handleConfigurationChange('method', e.target.value)\n                }\n                disabled={!canEdit}\n              >\n                <option value='GET'>GET</option>\n                <option value='POST'>POST</option>\n                <option value='PUT'>PUT</option>\n                <option value='DELETE'>DELETE</option>\n                <option value='PATCH'>PATCH</option>\n              </select>\n            </div>\n\n            <div className='ts-node-setting'>\n              <label htmlFor={`url-${id}`}>URL:</label>\n              <input\n                type='text'\n                id={`url-${id}`}\n                value={url}\n                onChange={(e) =>\n                  handleConfigurationChange('url', e.target.value)\n                }\n                placeholder='https://api.example.com/data'\n                disabled={!canEdit}\n              />\n            </div>\n\n            <div className='ts-node-section-title'>Cabeceras</div>\n            {headers.map((header, index) => (\n              <div key={header.id} className='ts-header-item ts-key-value-item'>\n                <input\n                  type='text'\n                  placeholder='Clave'\n                  value={header.key}\n                  onChange={(e) =>\n                    handleHeaderChange(index, 'key', e.target.value)\n                  }\n                  className='ts-header-input ts-key-value-input-key'\n                  disabled={!canEdit}\n                />\n                <input\n                  type='text'\n                  placeholder='Valor'\n                  value={header.value}\n                  onChange={(e) =>\n                    handleHeaderChange(index, 'value', e.target.value)\n                  }\n                  className='ts-header-input ts-key-value-input-value'\n                  disabled={!canEdit}\n                />\n                {canEdit && (\n                  <Tooltip content='Eliminar Cabecera'>\n                    <button\n                      onClick={() => removeHeader(index)}\n                      className='ts-remove-header-button ts-icon-button'\n                    >\n                      <Trash2 size={14} />\n                    </button>\n                  </Tooltip>\n                )}\n              </div>\n            ))}\n            {canEdit && (\n              <button onClick={addHeader} className='ts-add-button'>\n                Añadir Cabecera\n              </button>\n            )}\n\n            <div className='ts-node-section-title'>Cuerpo de la Petición</div>\n            <div className='ts-node-setting'>\n              <label htmlFor={`bodyType-${id}`}>Tipo de Cuerpo:</label>\n              <select\n                id={`bodyType-${id}`}\n                value={bodyType}\n                onChange={(e) =>\n                  handleConfigurationChange('bodyType', e.target.value)\n                }\n                disabled={!canEdit}\n              >\n                <option value='none'>Ninguno (None)</option>\n                <option value='json'>JSON</option>\n                <option value='text'>Texto Plano (Text)</option>\n                <option value='form-data'>Form Data</option>\n              </select>\n            </div>\n\n            {(bodyType === 'json' || bodyType === 'text') && (\n              <div className='ts-node-setting'>\n                <label htmlFor={`bodyString-${id}`}>\n                  Cuerpo ({bodyType === 'json' ? 'JSON' : 'Texto Plano'}):\n                </label>\n                <textarea\n                  id={`bodyString-${id}`}\n                  value={bodyString}\n                  onChange={(e) =>\n                    handleConfigurationChange('bodyString', e.target.value)\n                  }\n                  placeholder={\n                    bodyType === 'json'\n                      ? '{ \"clave\": \"valor\" }'\n                      : 'Contenido del cuerpo...'\n                  }\n                  rows={4}\n                  disabled={!canEdit}\n                  className='ts-body-textarea'\n                />\n              </div>\n            )}\n\n            {bodyType === 'form-data' && (\n              <div className='ts-formdata-section'>\n                {bodyFormData.map((entry, index) => (\n                  <div\n                    key={entry.id}\n                    className='ts-formdata-item ts-key-value-item'\n                  >\n                    <input\n                      type='text'\n                      placeholder='Clave'\n                      value={entry.key}\n                      onChange={(e) =>\n                        handleFormDataEntryChange(index, 'key', e.target.value)\n                      }\n                      className='ts-formdata-input ts-key-value-input-key'\n                      disabled={!canEdit}\n                    />\n                    <input\n                      type='text'\n                      placeholder='Valor'\n                      value={entry.value}\n                      onChange={(e) =>\n                        handleFormDataEntryChange(\n                          index,\n                          'value',\n                          e.target.value,\n                        )\n                      }\n                      className='ts-formdata-input ts-key-value-input-value'\n                      disabled={!canEdit}\n                    />\n                    {canEdit && (\n                      <Tooltip content='Eliminar Campo'>\n                        <button\n                          onClick={() => removeFormDataEntry(index)}\n                          className='ts-remove-formdata-button ts-icon-button'\n                        >\n                          <Trash2 size={14} />\n                        </button>\n                      </Tooltip>\n                    )}\n                  </div>\n                ))}\n                {canEdit && (\n                  <button onClick={addFormDataEntry} className='ts-add-button'>\n                    Añadir Campo Form Data\n                  </button>\n                )}\n              </div>\n            )}\n\n            <div className='ts-node-section-title'>Mapeo de Respuesta</div>\n            {responseMapping.map((entry, index) => (\n              <div key={entry.id} className='ts-response-map-item'>\n                <div className='ts-node-setting ts-response-map-row'>\n                  <label htmlFor={`map-source-${id}-${index}`}>Fuente:</label>\n                  <select\n                    id={`map-source-${id}-${index}`}\n                    value={entry.source}\n                    onChange={(e) =>\n                      handleResponseMapEntryChange(\n                        index,\n                        'source',\n                        e.target.value,\n                      )\n                    }\n                    disabled={!canEdit}\n                    className='ts-response-map-select'\n                  >\n                    {responseSourceOptions.map((opt) => (\n                      <option key={opt.value} value={opt.value}>\n                        {opt.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {entry.source !== 'status_code' && (\n                  <div className='ts-node-setting ts-response-map-row'>\n                    <label htmlFor={`map-path-${id}-${index}`}>\n                      {`${getPathOrKeyLabel(entry.source)}:`}\n                    </label>\n                    <input\n                      type='text'\n                      id={`map-path-${id}-${index}`}\n                      value={entry.pathOrKey}\n                      placeholder={getPathOrKeyLabel(entry.source)}\n                      onChange={(e) =>\n                        handleResponseMapEntryChange(\n                          index,\n                          'pathOrKey',\n                          e.target.value,\n                        )\n                      }\n                      disabled={!canEdit}\n                      className='ts-response-map-input'\n                    />\n                  </div>\n                )}\n\n                <div className='ts-node-setting ts-response-map-row'>\n                  <label htmlFor={`map-targetVar-${id}-${index}`}>\n                    Guardar en Variable:\n                  </label>\n                  <input\n                    type='text'\n                    id={`map-targetVar-${id}-${index}`}\n                    value={entry.targetVariable}\n                    placeholder='nombreDeVariable'\n                    onChange={(e) =>\n                      handleResponseMapEntryChange(\n                        index,\n                        'targetVariable',\n                        e.target.value,\n                      )\n                    }\n                    disabled={!canEdit}\n                    className='ts-response-map-input'\n                  />\n                </div>\n                <div className='ts-node-setting ts-response-map-row'>\n                  <label htmlFor={`map-defaultValue-${id}-${index}`}>\n                    Valor por Defecto:\n                  </label>\n                  <input\n                    type='text'\n                    id={`map-defaultValue-${id}-${index}`}\n                    value={entry.defaultValue}\n                    placeholder='Valor por defecto'\n                    onChange={(e) =>\n                      handleResponseMapEntryChange(\n                        index,\n                        'defaultValue',\n                        e.target.value,\n                      )\n                    }\n                    disabled={!canEdit}\n                    className='ts-response-map-input'\n                  />\n                </div>\n                {canEdit && (\n                  <Tooltip content='Eliminar Mapeo'>\n                    <button\n                      onClick={() => removeResponseMapEntry(index)}\n                      className='ts-remove-map-entry-button ts-icon-button'\n                    >\n                      <Trash2 size={14} />\n                    </button>\n                  </Tooltip>\n                )}\n              </div>\n            ))}\n            {canEdit && (\n              <button onClick={addResponseMapEntry} className='ts-add-button'>\n                Añadir Mapeo de Respuesta\n              </button>\n            )}\n\n            {canEdit && (\n              <div className='ts-node-section ts-test-section'>\n                <div className='ts-node-section-title'>Probar Solicitud</div>\n                <button\n                  onClick={handleTestRequest}\n                  disabled={isTesting || !url.trim()} // Deshabilitar si no hay URL o está probando\n                  className='ts-test-button ts-add-button'\n                >\n                  {isTesting ? (\n                    <>\n                      <span className='ts-loading-spinner' />\n                      Probando...\n                    </>\n                  ) : (\n                    'Ejecutar Prueba'\n                  )}\n                </button>\n                {testResult && (\n                  <div\n                    className={`ts-test-result ${testResult.success ? 'ts-test-success' : 'ts-test-error'}`}\n                  >\n                    <strong>Resultado de la Prueba:</strong>\n                    <p>\n                      Estado: {testResult.statusCode || 'N/A'}{' '}\n                      {testResult.success ? (\n                        <CheckCircle size={14} className='ts-icon-success' />\n                      ) : (\n                        <XCircle size={14} className='ts-icon-error' />\n                      )}\n                    </p>\n                    {testResult.message && <p>Mensaje: {testResult.message}</p>}\n\n                    {testResult.responseBodyPreview && (\n                      <div>\n                        <p>Preview Body Respuesta:</p>\n                        <pre className='ts-test-preview-area'>\n                          {testResult.responseBodyPreview}\n                        </pre>\n                      </div>\n                    )}\n                    {testResult.headersPreview && (\n                      <div>\n                        <p>Preview Headers Respuesta:</p>\n                        <pre className='ts-test-preview-area'>\n                          {JSON.stringify(testResult.headersPreview, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                    {testResult.errorDetails && (\n                      <p className='ts-test-error-details'>\n                        Detalles: {testResult.errorDetails}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {data.notes && (\n              <div className='ts-node-notes'>Notas: {data.notes}</div>\n            )}\n          </div>\n        )}\n\n        {showContextMenu && (\n          <ContextMenu\n            x={contextMenuPosition.x}\n            y={contextMenuPosition.y}\n            items={contextMenuItems}\n            onClose={() => setShowContextMenu(false)}\n          />\n        )}\n\n        <Handle\n          type='source'\n          position={Position.Bottom}\n          id='onSuccess'\n          isConnectable={isConnectable}\n          className='ts-handle-source ts-handle-success'\n        >\n          <Tooltip content='En caso de éxito' placement='bottom'>\n            <CheckCircle size={12} />\n          </Tooltip>\n        </Handle>\n        <Handle\n          type='source'\n          position={Position.Bottom}\n          id='onError'\n          isConnectable={isConnectable}\n          className='ts-handle-source ts-handle-error'\n          style={{ left: 'auto', right: '15px' }}\n        >\n          <Tooltip content='En caso de error' placement='bottom'>\n            <XCircle size={12} />\n          </Tooltip>\n        </Handle>\n      </div>\n    );\n  },\n  arePropertiesEqual,\n);\n\nHttpRequestNode.propTypes = {\n  data: PropTypes.shape({\n    label: PropTypes.string,\n    type: PropTypes.string,\n    method: PropTypes.string,\n    url: PropTypes.string,\n    headers: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        key: PropTypes.string,\n        value: PropTypes.string,\n      }),\n    ),\n    bodyType: PropTypes.string,\n    bodyString: PropTypes.string,\n    bodyFormData: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        key: PropTypes.string,\n        value: PropTypes.string,\n      }),\n    ),\n    responseMapping: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        source: PropTypes.string,\n        pathOrKey: PropTypes.string,\n        targetVariable: PropTypes.string,\n        defaultValue: PropTypes.string,\n      }),\n    ),\n    status: PropTypes.string,\n    isCollapsed: PropTypes.bool,\n    lastModified: PropTypes.string,\n    modifiedBy: PropTypes.string,\n    notes: PropTypes.string,\n    lodLevel: PropTypes.number,\n  }).isRequired,\n  isConnectable: PropTypes.bool,\n  selected: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  onNodesChange: PropTypes.func.isRequired,\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\nHttpRequestNode.displayName = 'HttpRequestNode';\n\nexport default HttpRequestNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/httprequestnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/CompactMessageNode.jsx",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 26,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 26,
        "endColumn": 22
      },
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 30,
        "column": 28,
        "nodeType": "CallExpression",
        "messageId": "noDisplayName",
        "endLine": 125,
        "endColumn": 3
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (85). Maximum allowed is 80.",
        "line": 30,
        "column": 33,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 125,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file CompactMessageNode.jsx\n * @description Componente para el nivel de detalle COMPACTO del MessageNode.\n * @author PLUBOT Team\n * @version 1.1.0\n * @description_of_changes Se ha refactorizado para eliminar el acceso directo al store de Zustand (antipatrón). Ahora, todos los datos se reciben exclusivamente a través de `props`, garantizando un flujo de datos unidireccional y predecible, y previniendo el renderizado de datos obsoletos.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { Handle, Position } from 'reactflow';\n\nimport { MessageNodeIcon } from './MessageNodeIcon';\nimport './MessageNode.css';\n\nconst typeToTitle = (type) => {\n  const titles = {\n    user: 'Usuario',\n    bot: 'Bot',\n    system: 'Sistema',\n    error: 'Error',\n    warning: 'Advertencia',\n    info: 'Info',\n    question: 'Pregunta',\n  };\n  return titles[type] || 'Mensaje';\n};\n\n// El componente ahora es más puro, dependiendo únicamente de sus props.\nconst CompactMessageNode = memo(({ data, selected }) => {\n  // Los datos se obtienen directamente de las props, la única fuente de verdad.\n  const { messageType, message, title: customTitle } = data;\n\n  const title = customTitle || typeToTitle(messageType);\n  const truncatedMessage =\n    message?.length > 30 ? `${message.slice(0, 30)}...` : message;\n\n  const nodeClasses = [\n    'message-node',\n    'message-node--compact',\n    selected ? 'message-node--selected-style' : '',\n  ].join(' ');\n\n  // Estilo dinámico para el color del borde\n  const isSystem = messageType === 'system';\n\n  const systemStyle = {\n    background:\n      'linear-gradient(145deg, rgba(59, 7, 100, 0.8), rgba(59, 7, 100, 1))',\n    border: '1px solid rgba(37, 99, 235, 0.5)',\n    boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n  };\n\n  const otherStyle = {\n    background:\n      'linear-gradient(145deg, rgba(23, 37, 84, 0.8), rgba(23, 37, 84, 1))',\n    border: '1px solid rgba(37, 99, 235, 0.5)',\n    boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n  };\n\n  const nodeStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: 178,\n    height: 58,\n    padding: '8px',\n    borderRadius: '12px',\n    ...(isSystem ? systemStyle : otherStyle),\n  };\n\n  return (\n    <div className={nodeClasses} style={nodeStyle}>\n      <Handle\n        type='target'\n        position={Position.Top}\n        className='message-node__handle'\n      />\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          height: '100%',\n        }}\n      >\n        <div\n          style={{ display: 'flex', alignItems: 'center', marginBottom: '4px' }}\n        >\n          <MessageNodeIcon type={messageType} />\n          <h3\n            style={{\n              marginLeft: '8px',\n              fontSize: '14px',\n              fontWeight: 'bold',\n              color: 'white',\n              margin: 0,\n              whiteSpace: 'nowrap',\n            }}\n          >\n            {title}\n          </h3>\n        </div>\n        <div\n          style={{\n            fontSize: '12px',\n            color: 'rgba(255, 255, 255, 0.8)',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {truncatedMessage || ' '}\n        </div>\n      </div>\n\n      <Handle\n        type='source'\n        position={Position.Bottom}\n        className='message-node__handle'\n      />\n    </div>\n  );\n});\n\nCompactMessageNode.propTypes = {\n  data: PropTypes.shape({\n    messageType: PropTypes.string,\n    message: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool,\n};\n\n// Se elimina la prop 'id' de propTypes ya que no se utiliza.\nexport default memo(CompactMessageNode);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/MessageNode.jsx",
    "messages": [
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 2,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 157,
        "column": 25,
        "nodeType": "NewExpression",
        "endLine": 160,
        "endColumn": 12
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (201). Maximum allowed is 80.",
        "line": 270,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 504,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (346). Maximum allowed is 80.",
        "line": 839,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 1292,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 1301,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1319,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 850,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 850,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 853,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 853,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file MessageNode.jsx\n * @description Componente optimizado para representar nodos de mensaje en el editor de flujos PLUBOT.\n * Implementa diseño profesional, accesibilidad y optimización para modo normal y ultra rendimiento.\n * @author PLUBOT Team\n * @version 2.0.0\n */\n\nimport {\n  Clock,\n  Copy,\n  Edit2,\n  HelpCircle,\n  Loader2,\n  Maximize2,\n  Minimize2,\n  Save,\n  Send,\n  Trash2,\n  X,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  memo,\n  useMemo,\n  useLayoutEffect,\n} from 'react';\nimport { Handle, Position, useUpdateNodeInternals } from 'reactflow';\n\nimport ReactMarkdown from '@/lib/simplified-markdown';\nimport { useContextMenu } from '@/stores/selectors';\nimport useFlowStore from '@/stores/use-flow-store';\nimport { formatDateRelative, formatTime } from '@/utils/date.js';\nimport { replaceVariablesInMessage } from '@/utils/message-utilities.js';\n\nimport { escapeRegex } from '../../../../utils/regex-utilities.js';\nimport Tooltip from '../../ui/ToolTip';\n\nimport { MessageNodeIcon } from './MessageNodeIcon';\n\nimport './MessageNode.css';\nimport './MessageNodeLOD.css';\n\n// Configuración centralizada para el MessageNode\nconst NODE_CONFIG = {\n  TYPE: 'message', // O podría ser dinámico basado en data.messageType\n  DEFAULT_MESSAGE_PLACEHOLDER: 'Escribe tu mensaje aquí...',\n  DEFAULT_TITLE_PREFIX: 'Mensaje',\n  TRANSITION_DURATION: 300, // ms, igual que en CSS\n  ANIMATION_DURATION: 500, // ms, igual que en CSS\n  MAX_PREVIEW_LINES: 2,\n  COLORS: {\n    // Estos se mapearán/refinarán con las variables CSS\n    // Ejemplo:\n    // USER_PRIMARY: 'rgb(var(--message-node-bg-user-color-rgb))',\n    // BOT_PRIMARY: 'rgb(var(--message-node-bg-bot-color-rgb))',\n    TEXT_PRIMARY: 'var(--message-node-text)',\n    BORDER_SELECTED: 'var(--message-node-border-selected)',\n  },\n  DIMENSIONS: {\n    MIN_WIDTH: '200px', // Desde CSS\n    MAX_WIDTH: '320px', // Desde CSS\n    MIN_HEIGHT: '100px', // Desde CSS\n    BORDER_RADIUS: '12px', // Desde CSS\n    PADDING: '1rem', // Desde CSS\n  },\n  HANDLES: {\n    INPUT_TYPE: 'target',\n    OUTPUT_TYPE: 'source',\n    DEFAULT_POSITION: Position.Top, // O Position.Left/Right si cambia el diseño\n  },\n};\n\n// Constantes y configuración (Mantenemos las específicas si NODE_CONFIG no las cubre todas aún)\nconst placeholder = NODE_CONFIG.DEFAULT_MESSAGE_PLACEHOLDER;\nconst { MAX_PREVIEW_LINES } = NODE_CONFIG;\n\n/**\n * Tipos de mensajes disponibles\n * @type {Object}\n */\nconst MESSAGE_TYPES = {\n  USER: 'user', // Mensaje del usuario\n  BOT: 'bot', // Respuesta del bot\n  SYSTEM: 'system', // Mensaje de sistema\n  ERROR: 'error', // Mensaje de error\n  WARNING: 'warning', // Advertencia\n  INFO: 'info', // Información\n  QUESTION: 'question', // Pregunta\n};\n\n// Helper function to generate titles based on message type\nconst typeToTitle = (type) => {\n  switch (type) {\n    case MESSAGE_TYPES.USER: {\n      return 'Mensaje de Usuario';\n    }\n    case MESSAGE_TYPES.BOT: {\n      return 'Respuesta del Bot';\n    }\n    case MESSAGE_TYPES.SYSTEM: {\n      return 'Mensaje de Sistema';\n    }\n    case MESSAGE_TYPES.ERROR: {\n      return 'Error';\n    }\n    case MESSAGE_TYPES.WARNING: {\n      return 'Advertencia';\n    }\n    case MESSAGE_TYPES.INFO: {\n      return 'Información';\n    }\n    case MESSAGE_TYPES.QUESTION: {\n      return 'Pregunta';\n    }\n    default: {\n      return NODE_CONFIG.DEFAULT_TITLE_PREFIX;\n    }\n  }\n};\n\n/**\n * Componente para el ícono del nodo de mensaje\n * @param {Object} props - Propiedades del componente\n * @param {string} props.type - Tipo de mensaje (user, bot, system, etc.)\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @returns {JSX.Element} - Ícono del nodo de mensaje\n */\n\n/**\n * Componente para la vista previa del mensaje con soporte para Markdown y truncado inteligente\n * @param {Object} props - Propiedades del componente\n * @param {string} props.message - Contenido del mensaje\n * @param {Array} props.variables - Variables para reemplazar en el mensaje\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @returns {JSX.Element} - Vista previa del mensaje formateada\n */\nconst MessagePreview = memo(\n  ({ message = '', variables = [], isUltraPerformanceMode = false }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const messageReference = useRef();\n    const [isTruncated, setIsTruncated] = useState(false);\n\n    // Formatear mensaje con variables\n    const formattedMessage = useMemo(() => {\n      if (!message) return '';\n\n      let formatted = message;\n\n      // Reemplazar variables en el mensaje\n      if (variables && variables.length > 0) {\n        for (const variable of variables) {\n          const regex = new RegExp(\n            `\\\\{\\\\{\\\\s*${escapeRegex(variable.name)}\\\\s*\\\\}\\\\}`,\n            'g',\n          );\n          formatted = formatted.replace(\n            regex,\n            variable.value || `{{${variable.name}}}`,\n          );\n        }\n      }\n\n      return formatted;\n    }, [message, variables]);\n\n    // Detectar si el mensaje necesita ser truncado\n    useEffect(() => {\n      if (messageReference.current && !isUltraPerformanceMode) {\n        const element = messageReference.current;\n        const lineHeight = Number.parseInt(\n          globalThis.getComputedStyle(element).lineHeight,\n          10,\n        );\n        const maxHeight = lineHeight * MAX_PREVIEW_LINES;\n\n        setIsTruncated(element.scrollHeight > maxHeight);\n      }\n    }, [formattedMessage, isUltraPerformanceMode]);\n\n    // Alternar entre vista completa y truncada\n    const toggleExpand = useCallback(() => {\n      setIsExpanded((previous) => !previous);\n    }, []);\n\n    // Clases para el contenedor del mensaje\n    const messageClasses = useMemo(() => {\n      const classes = ['message-node__message'];\n\n      if (!isExpanded && !isUltraPerformanceMode) {\n        classes.push('message-node__message--truncated');\n      }\n\n      if (isUltraPerformanceMode) {\n        classes.push('message-node__message--ultra');\n      }\n\n      return classes.join(' ');\n    }, [isExpanded, isUltraPerformanceMode]);\n\n    return (\n      <div className='message-node__message-container'>\n        <div ref={messageReference} className={messageClasses}>\n          {isUltraPerformanceMode ? (\n            // En modo ultra rendimiento, mostramos texto plano sin formato\n            <div className='message-node__plain-text'>{formattedMessage}</div>\n          ) : (\n            // En modo normal, usamos Markdown\n            <ReactMarkdown>{formattedMessage}</ReactMarkdown>\n          )}\n        </div>\n\n        {/* Botón para expandir/colapsar si el mensaje está truncado */}\n        {isTruncated && !isUltraPerformanceMode && (\n          <button\n            type='button'\n            className='message-node__expand-button'\n            onClick={toggleExpand}\n            aria-expanded={isExpanded}\n            aria-controls='message-content'\n          >\n            {isExpanded ? (\n              <>\n                <Minimize2 size={14} aria-hidden='true' />\n                <span>Colapsar</span>\n              </>\n            ) : (\n              <>\n                <Maximize2 size={14} aria-hidden='true' />\n                <span>Expandir</span>\n              </>\n            )}\n          </button>\n        )}\n      </div>\n    );\n  },\n);\n\nMessagePreview.displayName = 'MessagePreview';\n\nMessagePreview.propTypes = {\n  message: PropTypes.string,\n  variables: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.string,\n    }),\n  ),\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\n// Valores predeterminados ahora definidos directamente en los parámetros de la función\n\n/**\n * Componente para editar variables del mensaje\n * @param {Object} props - Propiedades del componente\n * @param {Array} props.variables - Lista de variables actuales\n * @param {Function} props.onAddVariable - Función para agregar una variable\n * @param {Function} props.onUpdateVariable - Función para actualizar una variable\n * @param {Function} props.onDeleteVariable - Función para eliminar una variable\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @param {string} props.nodeId - Identificador del nodo\n * @returns {JSX.Element} - Editor de variables\n */\nconst VariableEditor = ({\n  nodeId, // <--- Añadir nodeId como prop\n  variables = [],\n  onAddVariable,\n  onUpdateVariable,\n  onDeleteVariable,\n  isUltraPerformanceMode = false,\n}) => {\n  const [newVariable, setNewVariable] = useState({ name: '', value: '' });\n  const [isAdding, setIsAdding] = useState(false);\n  const newNameInputReference = useRef(null);\n  const updateNodeInternals = useUpdateNodeInternals(); // <--- Hook de React Flow\n\n  // Enfocar el campo de nombre al agregar una nueva variable\n  useEffect(() => {\n    if (isAdding && newNameInputReference.current) {\n      newNameInputReference.current.focus();\n    }\n  }, [isAdding]);\n\n  // Efecto para actualizar las dimensiones del nodo cuando el form de añadir aparece/desaparece\n  useEffect(() => {\n    if (nodeId) {\n      updateNodeInternals(nodeId);\n    }\n  }, [isAdding, nodeId, updateNodeInternals]);\n\n  /**\n   * Iniciar la adición de una nueva variable\n   */\n  const handleAddClick = useCallback(() => {\n    setIsAdding(true);\n  }, []);\n\n  /**\n   * Cancelar la adición de una nueva variable\n   */\n  const handleCancelAdd = useCallback(() => {\n    setIsAdding(false);\n    setNewVariable({ name: '', value: '' });\n  }, []);\n\n  /**\n   * Guardar una nueva variable\n   */\n  const handleSubmitAdd = useCallback(() => {\n    if (newVariable.name.trim()) {\n      onAddVariable(newVariable);\n      setNewVariable({ name: '', value: '' });\n      setIsAdding(false);\n    }\n  }, [newVariable, onAddVariable]);\n\n  /**\n   * Manejar cambios en los campos de una variable existente\n   * @param {number} index - Índice de la variable\n   * @param {string} field - Campo a modificar (name o value)\n   * @param {string} value - Nuevo valor\n   */\n  const handleVariableChange = useCallback(\n    (id, field, value) => {\n      const variableToUpdate = variables.find((v) => v.id === id);\n      if (variableToUpdate) {\n        onUpdateVariable(id, { ...variableToUpdate, [field]: value });\n      }\n    },\n    [variables, onUpdateVariable],\n  );\n\n  /**\n   * Manejar teclas en el formulario de nueva variable\n   * @param {Event} e - Evento de teclado\n   */\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        handleSubmitAdd();\n      } else if (event.key === 'Escape') {\n        handleCancelAdd();\n      }\n    },\n    [handleSubmitAdd, handleCancelAdd],\n  );\n\n  const VARIABLE_EDITOR_TOOLTIP_CONTENT = `**¿Qué son las Variables?**\nSon como etiquetas para guardar información que cambia, como el nombre de un cliente o una fecha.\n\n**¿Cómo las uso?**\n1.  **Crea una:** Haz clic en el botón \\`+\\` de abajo.\n    *   **Nombre:** Un nombre corto para recordar qué es (ej: \\`nombre_cliente\\`).\n    *   **Valor:** La información que quieres guardar (ej: \\`Ana Sofía\\`).\n2.  **Insértala en tu mensaje:** Escribe el Nombre de tu variable entre llaves dobles, así: \\`{{nombre_cliente}}\\`.\n    Cuando el mensaje se envíe, \\`{{nombre_cliente}}\\` se reemplazará automáticamente por \\`Ana Sofía\\`.\n\n¡Así puedes personalizar mensajes fácilmente!`;\n\n  return (\n    <div\n      className={`message-node__variables ${isUltraPerformanceMode ? 'message-node__variables--ultra' : ''}`}\n      role='region'\n      aria-label='Editor de variables'\n    >\n      <div\n        className='message-node__variables-header'\n        style={{ display: 'flex', alignItems: 'center', gap: '8px' }}\n      >\n        <h4 className='message-node__variables-title'>Variables</h4>\n        <Tooltip\n          content={\n            <ReactMarkdown>{VARIABLE_EDITOR_TOOLTIP_CONTENT}</ReactMarkdown>\n          }\n        >\n          <HelpCircle\n            size={16}\n            className='message-node__help-icon'\n            style={{ cursor: 'help' }}\n          />\n        </Tooltip>\n        {!isAdding && (\n          <button\n            type='button'\n            className='message-node__variable-button'\n            onClick={handleAddClick}\n            aria-label='Agregar variable'\n            aria-describedby='variables-heading'\n            disabled={isUltraPerformanceMode}\n          >\n            +\n          </button>\n        )}\n      </div>\n\n      {isAdding && !isUltraPerformanceMode && (\n        <div\n          className='message-node__variable'\n          role='form'\n          aria-labelledby='new-variable-heading'\n        >\n          <span id='new-variable-heading' className='sr-only'>\n            Nueva variable\n          </span>\n          <input\n            ref={newNameInputReference}\n            type='text'\n            placeholder='Nombre'\n            value={newVariable.name}\n            onChange={(event) =>\n              setNewVariable({ ...newVariable, name: event.target.value })\n            }\n            className='message-node__variable-name'\n            aria-label='Nombre de variable'\n            onKeyDown={handleKeyDown}\n          />\n          <input\n            type='text'\n            placeholder='Valor'\n            value={newVariable.value}\n            onChange={(event) =>\n              setNewVariable({ ...newVariable, value: event.target.value })\n            }\n            className='message-node__variable-value'\n            aria-label='Valor de variable'\n            onKeyDown={handleKeyDown}\n          />\n          <div className='message-node__variable-actions'>\n            <button\n              type='button'\n              className='message-node__variable-button'\n              onClick={handleSubmitAdd}\n              aria-label='Guardar variable'\n            >\n              <Save size={14} aria-hidden='true' />\n            </button>\n            <button\n              type='button'\n              className='message-node__variable-button'\n              onClick={handleCancelAdd}\n              aria-label='Cancelar'\n            >\n              <X size={14} aria-hidden='true' />\n            </button>\n          </div>\n        </div>\n      )}\n\n      <div\n        className='message-node__variables-list'\n        role='list'\n        aria-label='Lista de variables'\n      >\n        {variables &&\n          variables.map((variable) => (\n            <div\n              key={variable.id}\n              className='message-node__variable'\n              role='listitem'\n            >\n              <input\n                type='text'\n                value={variable.name}\n                onChange={(event) =>\n                  handleVariableChange(variable.id, 'name', event.target.value)\n                }\n                className='message-node__variable-name'\n                aria-label={`Nombre de variable ${variable.name}`}\n                disabled={isUltraPerformanceMode}\n              />\n              <input\n                type='text'\n                value={variable.value}\n                onChange={(event) =>\n                  handleVariableChange(variable.id, 'value', event.target.value)\n                }\n                className='message-node__variable-value'\n                aria-label={`Valor de variable ${variable.name}`}\n                disabled={isUltraPerformanceMode}\n              />\n              {!isUltraPerformanceMode && (\n                <div className='message-node__variable-actions'>\n                  <button\n                    type='button'\n                    className='message-node__variable-button message-node__variable-button--delete'\n                    onClick={() => onDeleteVariable(variable.id)}\n                    aria-label={`Eliminar variable ${variable.name || 'sin nombre'}`}\n                  >\n                    <Trash2 size={14} aria-hidden='true' />\n                  </button>\n                </div>\n              )}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nVariableEditor.propTypes = {\n  nodeId: PropTypes.string.isRequired, // <--- Añadir nodeId como propType\n  variables: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.string,\n    }),\n  ),\n  onAddVariable: PropTypes.func.isRequired,\n  onUpdateVariable: PropTypes.func.isRequired,\n  onDeleteVariable: PropTypes.func.isRequired,\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\n/**\n * Componente para el ícono del nodo de mensaje\n * @param {Object} props - Propiedades del componente\n * @param {string} props.type - Tipo de mensaje (user, bot, system, etc.)\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @returns {JSX.Element} - Ícono del nodo de mensaje\n */\nconst MessageNodeHeader = memo(\n  ({\n    id: _id,\n    titleFromData,\n    messageType,\n    isUltraMode,\n    isSaving,\n    isSelected,\n    onDoubleClickHeader,\n    lastUpdatedTimestamp,\n    disableAnimations,\n  }) => {\n    const displayTitle = titleFromData || typeToTitle(messageType);\n    const headerClasses = [\n      'message-node__header',\n      isSaving ? 'message-node__header--saving' : '',\n      disableAnimations ? 'message-node__header--no-anim' : '',\n      isSelected ? 'message-node__header--selected' : '',\n      disableAnimations ? 'message-node__header--no-anim' : '', // Usar la prop\n      isSelected ? 'message-node__header--selected' : '', // Mantener si es necesario\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    return (\n      <header className={headerClasses} onDoubleClick={onDoubleClickHeader}>\n        <div className='message-node__title-container'>\n          <MessageNodeIcon\n            type={messageType}\n            isUltraPerformanceMode={isUltraMode}\n          />\n          <h2 className='message-node__title' title={displayTitle}>\n            {displayTitle}\n          </h2>\n        </div>\n        <div className='message-node__header-actions'>\n          {' '}\n          {/* Contenedor para acciones del header */}\n          {isSaving && <SavingIndicator />}\n          {!isUltraMode && lastUpdatedTimestamp && (\n            <Tooltip\n              content={`Última modificación: ${formatDateRelative(lastUpdatedTimestamp)} a las ${formatTime(lastUpdatedTimestamp)}`}\n            >\n              <Clock\n                size={12}\n                className='message-node__timestamp-icon'\n                aria-hidden='true'\n              />\n            </Tooltip>\n          )}\n        </div>\n      </header>\n    );\n  },\n); // Corregido el cierre del componente MessageNodeHeader\n\nMessageNodeHeader.displayName = 'MessageNodeHeader';\n\nMessageNodeHeader.propTypes = {\n  id: PropTypes.string.isRequired,\n  titleFromData: PropTypes.string,\n  messageType: PropTypes.string,\n  isUltraMode: PropTypes.bool,\n  isSaving: PropTypes.bool,\n  isSelected: PropTypes.bool,\n  onDoubleClickHeader: PropTypes.func,\n  lastUpdatedTimestamp: PropTypes.string, // Cambiado de number a string si es un timestamp ISO\n  disableAnimations: PropTypes.bool, // PropType para disableAnimations\n};\n\nconst MessageNodeEditor = memo(({ id, message, variables, editorActions }) => {\n  const {\n    handleMessageChange,\n    handleSave,\n    handleCancel,\n    handleAddVariable,\n    handleUpdateVariable,\n    handleDeleteVariable,\n  } = editorActions;\n\n  return (\n    <>\n      <textarea\n        className='message-node__textarea nodrag'\n        value={message}\n        onChange={handleMessageChange}\n        placeholder={placeholder}\n        aria-label='Editor de mensaje'\n        rows={4}\n        onKeyDown={(event) => {\n          if (event.key === 'Escape') {\n            event.stopPropagation();\n            handleCancel();\n          }\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n            handleSave();\n          }\n        }}\n      />\n      <VariableEditor\n        nodeId={id}\n        variables={variables}\n        onAddVariable={handleAddVariable}\n        onUpdateVariable={handleUpdateVariable}\n        onDeleteVariable={handleDeleteVariable}\n        isUltraPerformanceMode={false} // Siempre es false cuando se está editando\n      />\n      <div className='message-node__editor-actions'>\n        <Tooltip content='Guardar cambios (Ctrl+Enter o Cmd+Enter)'>\n          <button\n            onClick={handleSave}\n            className='message-node__editor-button message-node__editor-button--save'\n            aria-label='Guardar mensaje'\n          >\n            <Send size={14} /> Guardar\n          </button>\n        </Tooltip>\n        <Tooltip content='Descartar cambios (Esc)'>\n          <button\n            onClick={handleCancel}\n            className='message-node__editor-button message-node__editor-button--cancel'\n            aria-label='Cancelar edición'\n          >\n            <X size={14} /> Cancelar\n          </button>\n        </Tooltip>\n      </div>\n    </>\n  );\n});\n\nMessageNodeEditor.displayName = 'MessageNodeEditor';\n\nMessageNodeEditor.propTypes = {\n  id: PropTypes.string.isRequired,\n  message: PropTypes.string,\n  variables: PropTypes.array,\n  editorActions: PropTypes.shape({\n    handleMessageChange: PropTypes.func.isRequired,\n    handleSave: PropTypes.func.isRequired,\n    handleCancel: PropTypes.func.isRequired,\n    handleAddVariable: PropTypes.func.isRequired,\n    handleUpdateVariable: PropTypes.func.isRequired,\n    handleDeleteVariable: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst MessageNodeContent = memo(\n  ({\n    id,\n    isEditing,\n    isUltraMode,\n    safeData,\n    DEFAULT_MESSAGE,\n    editState,\n    editorActions,\n  }) => {\n    // En modo ultra, la lógica no cambia.\n    if (isUltraMode && !isEditing) {\n      return (\n        <main\n          className='message-node__content'\n          role='main'\n          id={`message-node-content-${id}`}\n        >\n          <div className='message-node__content message-node__content--ultra'>\n            <p className='message-node__ultra-text'>\n              {(() => {\n                if (!safeData.message) return DEFAULT_MESSAGE;\n                const processedMessage = replaceVariablesInMessage(\n                  safeData.message,\n                  safeData.variables,\n                );\n                return (\n                  processedMessage.slice(0, 50) +\n                  (processedMessage.length > 50 ? '...' : '')\n                );\n              })()}\n            </p>\n          </div>\n        </main>\n      );\n    }\n\n    // En modo normal, se renderiza CONDICIONALMENTE el editor o la vista previa.\n    // Este enfoque es más robusto y soluciona el bug de superposición.\n    // La animación de transición se sacrifica temporalmente por la estabilidad.\n    return (\n      <main\n        className='message-node__content'\n        role='main'\n        id={`message-node-content-${id}`}\n      >\n        {isEditing ? (\n          <div\n            className='message-node__editor'\n            onDoubleClick={(event) => event.stopPropagation()}\n          >\n            <MessageNodeEditor\n              id={id}\n              message={editState?.message ?? ''}\n              variables={editState?.variables ?? []}\n              DEFAULT_MESSAGE={DEFAULT_MESSAGE}\n              editorActions={editorActions}\n            />\n          </div>\n        ) : (\n          <div className='message-node__preview-display'>\n            <MessagePreview\n              message={safeData.message || DEFAULT_MESSAGE}\n              variables={safeData.variables}\n              isUltraPerformanceMode={isUltraMode}\n            />\n          </div>\n        )}\n      </main>\n    );\n  },\n);\n\nMessageNodeContent.displayName = 'MessageNodeContent';\n\nMessageNodeContent.propTypes = {\n  id: PropTypes.string.isRequired,\n  isEditing: PropTypes.bool,\n  isUltraMode: PropTypes.bool,\n  safeData: PropTypes.object.isRequired,\n  DEFAULT_MESSAGE: PropTypes.string,\n  editState: PropTypes.object,\n  editorActions: PropTypes.object,\n};\n\n/**\n * Componente para el indicador de guardado\n * @returns {JSX.Element} - Indicador de guardado\n */\nconst SavingIndicator = () => {\n  return (\n    <div\n      className='message-node__saving-indicator'\n      aria-live='polite'\n      aria-label='Guardando cambios'\n    >\n      <Loader2 size={14} className='animate-spin' />{' '}\n      {/* Usando Loader2 de lucide-react con animación */}\n      <span>Guardando...</span>\n    </div>\n  );\n};\n\n/**\n * Nombre para mostrar en DevTools\n */\nSavingIndicator.displayName = 'SavingIndicator';\n\nconst LOD_LEVELS = {\n  FULL: 'FULL',\n  COMPACT: 'COMPACT',\n  MINI: 'MINI',\n};\n\n// Vista para el nivel de detalle MÍNIMO (MINI)\nconst MiniView = memo(({ messageType }) => (\n  <div className='message-node__mini-content'>\n    <MessageNodeIcon type={messageType} isUltraPerformanceMode />\n  </div>\n));\nMiniView.displayName = 'MiniView';\nMiniView.propTypes = { messageType: PropTypes.string };\n\n// Vista para el nivel de detalle COMPACTO\nconst CompactView = memo(({ messageType, title, message, variables }) => {\n  const processedMessage = useMemo(() => {\n    if (!message) return placeholder;\n    const processed = replaceVariablesInMessage(message, variables);\n    return processed.length > 50 ? `${processed.slice(0, 50)}...` : processed;\n  }, [message, variables]);\n\n  return (\n    <div className='message-node'>\n      <Handle type='target' position={Position.Left} id='input' />\n      <Handle type='source' position={Position.Right} id='output' />\n      <div className='message-node__compact-content'>\n        <div className='message-node__compact-header'>\n          <MessageNodeIcon type={messageType} isUltraPerformanceMode />\n          <span className='message-node__compact-title'>{title}</span>\n        </div>\n        <div className='message-node__compact-message'>{processedMessage}</div>\n      </div>\n    </div>\n  );\n});\nCompactView.displayName = 'CompactView';\nCompactView.propTypes = {\n  messageType: PropTypes.string,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  variables: PropTypes.array,\n};\n\n/**\n * Componente principal MessageNode\n * @param {Object} props - Propiedades del componente\n * @param {Object} props.data - Datos del nodo\n * @param {boolean} props.isConnectable - Indica si el nodo puede conectarse\n * @param {boolean} props.selected - Indica si el nodo está seleccionado\n * @param {string} props.id - Identificador único del nodo\n * @param {Function} props.setNodes - Función para actualizar los nodos\n * @param {boolean} props.isUltraPerformanceMode - Indica si está en modo ultra rendimiento\n * @returns {JSX.Element} - Componente MessageNode\n */\nconst MessageNodeComponent = ({\n  data = {\n    message: placeholder,\n    type: MESSAGE_TYPES.SYSTEM,\n    variables: [],\n    lodLevel: LOD_LEVELS.FULL, // Valor por defecto\n  },\n  isConnectable = true,\n  selected = false,\n  id,\n  // eslint-disable-next-line no-empty-function\n  onDuplicate = () => {},\n\n  // eslint-disable-next-line no-empty-function\n  onDelete = () => {},\n}) => {\n  // Acceso seguro a los datos del nodo\n  const safeData = useMemo(\n    () => ({\n      message: data?.message || placeholder,\n      type: data?.type || MESSAGE_TYPES.SYSTEM,\n      variables: data?.variables || [],\n      lastUpdated: data?.lastUpdated,\n    }),\n    [data],\n  );\n\n  // Extraer el nivel de detalle (LOD) de los datos del nodo.\n  const { lodLevel = LOD_LEVELS.FULL } = data;\n  const isUltraMode = lodLevel !== LOD_LEVELS.FULL;\n  const disableAnimations = isUltraMode;\n\n  // Estados locales (preservando exactamente el comportamiento original)\n\n  // screenToFlowPosition se obtiene de useReactFlow, pero no lo usaremos aquí directamente para el menú contextual global.\n\n  const [editState, setEditState] = useState();\n  const editStateReference = useRef(editState);\n  editStateReference.current = editState;\n\n  // El modo de edición se deriva de la existencia de `editState`.\n  // Este es el patrón de estado derivado: una única fuente de verdad.\n  const isEditing = editState !== undefined;\n\n  const [nodeState, setNodeState] = useState({ isSaving: false });\n  const { showContextMenu } = useContextMenu();\n  const updateNodeInternals = useUpdateNodeInternals();\n  const updateNodeData = useFlowStore((state) => state.updateNodeData);\n\n  // Forzar la actualización de las dimensiones del nodo cuando se entra/sale del modo de edición.\n  // Esto es CRUCIAL para que el contenedor del nodo se expanda y contraiga correctamente.\n  // Se usa useLayoutEffect para evitar un \"salto\" visual, ya que se ejecuta\n  // después de la mutación del DOM pero antes de que el navegador pinte la pantalla.\n  useLayoutEffect(() => {\n    if (id) {\n      // HACK: Se usa un timeout para asegurar que la actualización de las dimensiones\n      // se ejecute DESPUÉS de que el DOM haya tenido tiempo de renderizar el nuevo contenido\n      // (editor o preview). Esto soluciona problemas de temporización donde updateNodeInternals\n      // se ejecuta antes de que el contenido tenga su tamaño final.\n      const timeoutId = setTimeout(() => {\n        updateNodeInternals(id);\n      }, 0);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isEditing, id, updateNodeInternals]);\n\n  // Sincronizar estado local con props actualizadas desde Zustand\n\n  // Compatibilidad con el setNodes proporcionado por props\n\n  // Referencias\n  const nodeReference = useRef();\n\n  // Hooks personalizados eliminados ya que implementamos la lógica directamente\n\n  /**\n   * Tipo de mensaje (user, bot, system, etc.)\n   * Memoizado para evitar cálculos innecesarios\n   */\n  const messageType = useMemo(\n    () => safeData.type || MESSAGE_TYPES.SYSTEM,\n    [safeData.type],\n  );\n\n  /**\n   * Guardar cambios en el nodo\n   */\n  const saveChanges = useCallback(() => {\n    const currentEditState = editStateReference.current;\n    if (!currentEditState || !currentEditState.message) {\n      setEditState(undefined);\n      return;\n    }\n\n    setNodeState({ isSaving: true });\n\n    updateNodeData(id, {\n      message: currentEditState.message,\n      variables: currentEditState.variables,\n      lastUpdated: new Date().toISOString(),\n    });\n\n    setEditState(undefined);\n    updateNodeInternals(id);\n\n    setTimeout(() => {\n      setNodeState({ isSaving: false });\n    }, 300);\n  }, [\n    id,\n    updateNodeData,\n    updateNodeInternals,\n    setNodeState,\n    setEditState,\n    editStateReference,\n  ]);\n\n  /**\n   * Cancelar edición y restaurar valores originales\n   */\n  const cancelEdit = useCallback(() => {\n    setEditState(undefined);\n  }, [setEditState]);\n\n  /**\n   * Manejar cambios en el texto del mensaje\n   */\n  const handleMessageChange = useCallback(\n    (event) => {\n      setEditState((previous) => ({\n        ...previous,\n        message: event.target.value,\n      }));\n    },\n    [setEditState],\n  );\n\n  /**\n   * Agregar una nueva variable\n   */\n  const handleAddVariable = useCallback(\n    (newVariable) => {\n      setEditState((previous) => ({\n        ...previous,\n        variables: [\n          ...(previous.variables || []),\n          { ...newVariable, id: Date.now() },\n        ],\n      }));\n    },\n    [setEditState],\n  );\n\n  /**\n   * Actualizar una variable existente\n   */\n  const handleUpdateVariable = useCallback(\n    (variableId, updatedVariable) => {\n      setEditState((previous) => ({\n        ...previous,\n        variables: previous.variables.map((v) =>\n          v.id === variableId ? updatedVariable : v,\n        ),\n      }));\n    },\n    [setEditState],\n  );\n\n  /**\n   * Eliminar una variable\n   */\n  const handleDeleteVariable = useCallback(\n    (variableId) => {\n      setEditState((previous) => ({\n        ...previous,\n        variables: previous.variables.filter((v) => v.id !== variableId),\n      }));\n    },\n    [setEditState],\n  );\n\n  /**\n   * Manejar doble clic para editar el nodo\n   */\n  const handleDoubleClick = useCallback(() => {\n    if (isEditing) {\n      saveChanges();\n    } else {\n      setEditState({\n        message: safeData.message || placeholder,\n        variables: (safeData.variables || []).map((v, index) => ({\n          ...v,\n          id: v.id || Date.now() + index,\n        })),\n      });\n    }\n  }, [\n    isEditing,\n    saveChanges,\n    safeData.message,\n    safeData.variables,\n    setEditState,\n  ]);\n\n  /**\n   * Opciones del menú contextual\n   */\n  const contextMenuOptions = useMemo(\n    () => [\n      {\n        label: 'Editar',\n        icon: <Edit2 size={14} aria-hidden='true' />,\n        action: handleDoubleClick,\n        disabled: isEditing,\n      },\n      {\n        label: 'Duplicar',\n        icon: <Copy size={14} aria-hidden='true' />,\n        action: () => onDuplicate(id),\n        disabled: false,\n      },\n      {\n        label: 'Eliminar',\n        icon: <Trash2 size={14} aria-hidden='true' />,\n        action: () => onDelete(id),\n        isDanger: true,\n        disabled: isEditing,\n      },\n    ],\n    [isEditing, id, onDuplicate, onDelete, handleDoubleClick],\n  );\n\n  const handleNodeContextMenu = useCallback(\n    (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      showContextMenu({\n        x: event.clientX,\n        y: event.clientY,\n        nodeId: id,\n        items: contextMenuOptions,\n      });\n    },\n    [id, contextMenuOptions, showContextMenu],\n  );\n\n  const editorActions = useMemo(\n    () => ({\n      handleMessageChange,\n      handleSave: saveChanges,\n      handleCancel: cancelEdit,\n      handleAddVariable,\n      handleUpdateVariable,\n      handleDeleteVariable,\n    }),\n    [\n      cancelEdit,\n      handleAddVariable,\n      handleDeleteVariable,\n      handleMessageChange,\n      handleUpdateVariable,\n      saveChanges,\n    ],\n  );\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        nodeReference.current &&\n        !nodeReference.current.contains(event.target) &&\n        isEditing\n      ) {\n        saveChanges();\n      }\n    };\n\n    if (isEditing) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isEditing, saveChanges]);\n\n  // El useLayoutEffect anterior se elimina porque la animación ahora es manejada puramente por CSS,\n  // lo que proporciona una transición más suave y performante sin necesidad de forzar actualizaciones.\n\n  /**\n   * Clases CSS del nodo\n   * Incluye variantes por tipo y estado\n   * Optimizado para rendimiento con memoización\n   */\n  const nodeClasses = useMemo(() => {\n    const classes = ['message-node', `message-node--${messageType}`];\n    if (selected) classes.push('selected');\n    if (isUltraMode) classes.push('ultra-performance');\n    return classes.join(' ');\n  }, [messageType, selected, isUltraMode]);\n\n  const nodeStyle = useMemo(() => {\n    const styles = {};\n    // Los estilos dinámicos basados en isUltraMode o selected se pueden agregar aquí.\n    // Por ejemplo:\n    // if (isUltraMode) { // isUltraMode aquí se refiere al definido en el alcance del componente\n    //   styles.opacity = 0.8;\n    // }\n    // if (selected) { // selected aquí se refiere al definido en el alcance del componente\n    //   styles.outline = '2px solid var(--message-node-primary, #2563eb)';\n    // }\n    return styles;\n  }, []);\n\n  // Dependencias del efecto (zoomLevel removido ya que isUltraMode lo cubre)\n\n  /**\n   * Renderizar el componente MessageNode\n   */\n  return (\n    <div\n      ref={nodeReference}\n      className={nodeClasses}\n      style={nodeStyle}\n      onDoubleClick={\n        lodLevel === LOD_LEVELS.FULL ? handleDoubleClick : undefined\n      }\n      onContextMenu={handleNodeContextMenu}\n      data-testid='message-node'\n      aria-labelledby={`message-node-title-${id}`}\n      role='group'\n    >\n      {(() => {\n        const handleProperties = {\n          type: 'source',\n          position: Position.Bottom,\n          id: 'default',\n          isConnectable,\n        };\n\n        switch (lodLevel) {\n          case LOD_LEVELS.MINI: {\n            return (\n              <>\n                <Handle\n                  {...handleProperties}\n                  type='target'\n                  position={Position.Top}\n                  className='message-node__handle message-node__handle--target message-node__handle--ultra'\n                />\n                <Handle\n                  {...handleProperties}\n                  type='source'\n                  position={Position.Bottom}\n                  className='message-node__handle message-node__handle--source message-node__handle--ultra'\n                />\n                <MiniView messageType={messageType} />\n              </>\n            );\n          }\n\n          case LOD_LEVELS.COMPACT: {\n            return (\n              <>\n                <Handle\n                  {...handleProperties}\n                  type='target'\n                  position={Position.Top}\n                  className='message-node__handle message-node__handle--target message-node__handle--ultra'\n                />\n                <Handle\n                  {...handleProperties}\n                  type='source'\n                  position={Position.Bottom}\n                  className='message-node__handle message-node__handle--source message-node__handle--ultra'\n                />\n                <CompactView\n                  messageType={messageType}\n                  title={typeToTitle(messageType)}\n                  message={safeData.message}\n                  variables={safeData.variables}\n                />\n              </>\n            );\n          }\n\n          default: {\n            // FULL\n            return (\n              <>\n                <MessageNodeHeader\n                  id={id}\n                  titleFromData={safeData.title}\n                  messageType={safeData.type}\n                  isUltraMode={isUltraMode}\n                  isSaving={nodeState.isSaving}\n                  isSelected={selected}\n                  onDoubleClickHeader={handleDoubleClick}\n                  lastUpdatedTimestamp={safeData.lastUpdated}\n                  disableAnimations={disableAnimations}\n                />\n                <MessageNodeContent\n                  id={id}\n                  isEditing={isEditing}\n                  isUltraMode={isUltraMode}\n                  safeData={safeData}\n                  placeholder={safeData.placeholder}\n                  editState={editState}\n                  editorActions={editorActions}\n                />\n                {!isEditing && safeData.lastUpdated && !isUltraMode && (\n                  <footer className='message-node__footer'>\n                    <div className='message-node__timestamp'>\n                      <Clock size={12} aria-hidden='true' />\n                      <span title={formatTime(safeData.lastUpdated)}>\n                        {formatDateRelative(safeData.lastUpdated)}\n                      </span>\n                    </div>\n                  </footer>\n                )}\n                <Handle\n                  type='target'\n                  position={Position.Top}\n                  id='default'\n                  isConnectable={isConnectable}\n                  className='message-node__handle message-node__handle--target'\n                  aria-label='Conector de entrada'\n                  title='Conectar desde otro nodo'\n                  tabIndex={isConnectable ? 0 : -1}\n                  role='button'\n                />\n                <Handle\n                  type='source'\n                  position={Position.Bottom}\n                  id='default'\n                  isConnectable={isConnectable}\n                  className='message-node__handle message-node__handle--source'\n                  aria-label='Conector de salida'\n                  title='Conectar hacia otro nodo'\n                  tabIndex={isConnectable ? 0 : -1}\n                  role='button'\n                />\n                <span className='sr-only'>\n                  Nodo de mensaje tipo {messageType}. {safeData.message}\n                </span>\n              </>\n            );\n          }\n        }\n      })()}\n    </div>\n  );\n};\n\n/**\n * Función de comparación personalizada para React.memo.\n * Evita re-renderizados innecesarios comparando props relevantes.\n * @param {Object} previousProperties - Propiedades anteriores\n * @param {Object} nextProps - Nuevas propiedades\n * @returns {boolean} - `true` si las props son iguales, `false` en caso contrario.\n */\nconst arePropertiesEqual = (previousProperties, nextProperties) => {\n  const previousData = previousProperties.data || {};\n  const nextData = nextProperties.data || {};\n\n  // Compara las propiedades principales del nodo y los datos internos.\n  // Devuelve `true` si son iguales para evitar un re-renderizado.\n  return (\n    previousProperties.selected === nextProperties.selected &&\n    previousProperties.isConnectable === nextProperties.isConnectable &&\n    previousProperties.id === nextProperties.id &&\n    previousData.message === nextData.message &&\n    previousData.type === nextData.type &&\n    previousData.lastUpdated === nextData.lastUpdated &&\n    previousData.lodLevel === nextData.lodLevel &&\n    previousData.title === nextData.title &&\n    JSON.stringify(previousData.variables) ===\n      JSON.stringify(nextData.variables)\n  );\n};\n\nMessageNodeComponent.propTypes = {\n  data: PropTypes.shape({\n    message: PropTypes.string,\n    type: PropTypes.oneOf(Object.values(MESSAGE_TYPES)),\n    variables: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string,\n      }),\n    ),\n    lastUpdated: PropTypes.string,\n    lodLevel: PropTypes.string,\n    title: PropTypes.string,\n  }),\n  isConnectable: PropTypes.bool,\n  selected: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  onDuplicate: PropTypes.func,\n  onDelete: PropTypes.func,\n};\n\nconst MessageNode = memo(MessageNodeComponent, arePropertiesEqual);\n\nMessageNode.displayName = 'MessageNode';\n\n// Definimos los propTypes para el componente memoizado final\n\n// Exportamos el componente optimizado\nexport default MessageNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/MessageNodeIcon.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 2,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 21,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 21,
        "endColumn": 27
      },
      {
        "ruleId": "unicorn/no-useless-switch-case",
        "severity": 2,
        "message": "Useless case in switch statement.",
        "line": 67,
        "column": 9,
        "nodeType": "SwitchCase",
        "messageId": "no-useless-switch-case/error",
        "endLine": 67,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "no-useless-switch-case/suggestion",
            "fix": { "range": [1882, 1908], "text": "" },
            "data": {},
            "desc": "Remove this case."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file MessageNodeIcon.jsx\n * @description Componente de ícono modularizado para nodos de mensaje.\n * @author PLUBOT Team\n * @version 1.0.0\n */\n\nimport {\n  MessageSquare,\n  User,\n  Bot,\n  AlertTriangle,\n  AlertCircle,\n  Info,\n  HelpCircle,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\n\n// Constantes\nexport const MESSAGE_TYPES = {\n  USER: 'user', // Mensaje del usuario\n  BOT: 'bot', // Respuesta del bot\n  SYSTEM: 'system', // Mensaje de sistema\n  ERROR: 'error', // Mensaje de error\n  WARNING: 'warning', // Advertencia\n  INFO: 'info', // Información\n  QUESTION: 'question', // Pregunta\n};\n\n/**\n * Componente para el ícono del nodo de mensaje\n */\nexport const MessageNodeIcon = memo(\n  ({ type, isUltraPerformanceMode = false }) => {\n    // Tamaño y grosor optimizados para legibilidad\n    const iconProperties = {\n      size: 16,\n      strokeWidth: 2,\n      // En modo ultra rendimiento, desactivamos animaciones\n      className: isUltraPerformanceMode ? '' : 'message-node__icon-svg',\n    };\n\n    /**\n     * Devuelve el ícono correspondiente al tipo de mensaje\n     */\n    const getIcon = () => {\n      switch (type) {\n        case MESSAGE_TYPES.USER: {\n          return <User {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.BOT: {\n          return <Bot {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.ERROR: {\n          return <AlertCircle {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.WARNING: {\n          return <AlertTriangle {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.INFO: {\n          return <Info {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.QUESTION: {\n          return <HelpCircle {...iconProperties} aria-hidden='true' />;\n        }\n        case MESSAGE_TYPES.SYSTEM:\n        default: {\n          return <MessageSquare {...iconProperties} aria-hidden='true' />;\n        }\n      }\n    };\n\n    return (\n      <div\n        className={`message-node__icon message-node__icon--${type || 'system'}`}\n        aria-hidden='true'\n      >\n        {getIcon()}\n      </div>\n    );\n  },\n);\n\nMessageNodeIcon.displayName = 'MessageNodeIcon';\n\nMessageNodeIcon.propTypes = {\n  type: PropTypes.oneOf(Object.values(MESSAGE_TYPES)),\n  isUltraPerformanceMode: PropTypes.bool,\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/MessagePreview.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/MiniMessageNode.jsx",
    "messages": [
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 16,
        "column": 25,
        "nodeType": "CallExpression",
        "messageId": "noDisplayName",
        "endLine": 70,
        "endColumn": 3
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file MiniMessageNode.jsx\n * @description Componente para el nivel de detalle MÍNIMO del MessageNode.\n * @author PLUBOT Team\n * @version 1.1.0\n * @description_of_changes Se ha refactorizado para eliminar el acceso directo al store de Zustand (antipatrón). Ahora, todos los datos se reciben exclusivamente a través de `props`, garantizando un flujo de datos unidireccional y predecible.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { Handle, Position } from 'reactflow';\n\nimport { MessageNodeIcon } from './MessageNodeIcon';\nimport './MessageNode.css';\n\nconst MiniMessageNode = memo(({ data, selected }) => {\n  const { messageType } = data;\n\n  const nodeClasses = [\n    'message-node',\n    'message-node--mini',\n    selected ? 'message-node--selected-style' : '',\n  ].join(' ');\n\n  const isSystem = messageType === 'system';\n\n  const baseStyle = {\n    width: 40,\n    height: 40,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '12px',\n  };\n\n  const systemStyle = {\n    background:\n      'linear-gradient(145deg, rgba(59, 7, 100, 0.8), rgba(59, 7, 100, 1))',\n    border: '1px solid rgba(37, 99, 235, 0.5)',\n    boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n  };\n\n  const otherStyle = {\n    background:\n      'linear-gradient(145deg, rgba(23, 37, 84, 0.8), rgba(23, 37, 84, 1))',\n    border: '1px solid rgba(37, 99, 235, 0.5)',\n    boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n  };\n\n  const nodeStyle = {\n    ...baseStyle,\n    ...(isSystem ? systemStyle : otherStyle),\n  };\n\n  return (\n    <div className={nodeClasses} style={nodeStyle}>\n      <Handle\n        type='target'\n        position={Position.Top}\n        className='message-node__handle'\n      />\n      <MessageNodeIcon type={messageType} isUltraPerformanceMode />\n      <Handle\n        type='source'\n        position={Position.Bottom}\n        className='message-node__handle'\n      />\n    </div>\n  );\n});\n\nMiniMessageNode.propTypes = {\n  data: PropTypes.shape({\n    messageType: PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool,\n};\n\nexport default memo(MiniMessageNode);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/VariableEditor.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (220). Maximum allowed is 80.",
        "line": 16,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 275,
        "endColumn": 4
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 108,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 108,
        "endColumn": 9
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 153,
        "column": 22,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 153,
        "endColumn": 36
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 163,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 163,
        "endColumn": 35
      },
      {
        "ruleId": "jsx-a11y/no-autofocus",
        "severity": 2,
        "message": "The autoFocus prop should not be used, as it can reduce usability and accessibility for users.",
        "line": 168,
        "column": 23,
        "nodeType": "JSXAttribute",
        "endLine": 168,
        "endColumn": 32
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 169,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 169,
        "endColumn": 38
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 174,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 174,
        "endColumn": 35
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 179,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 179,
        "endColumn": 38
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 194,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 194,
        "endColumn": 40
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 206,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 209,
        "endColumn": 22
      },
      {
        "ruleId": "jsx-a11y/no-static-element-interactions",
        "severity": 2,
        "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
        "line": 206,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 209,
        "endColumn": 22
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 242,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 242,
        "endColumn": 27
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 243,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 243,
        "endColumn": 28
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 247,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 247,
        "endColumn": 30
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 252,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 252,
        "endColumn": 27
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 253,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 253,
        "endColumn": 28
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 257,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 257,
        "endColumn": 30
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 263,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 263,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 17,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file VariableEditor.jsx\n * @description Componente para editar variables de un mensaje en el editor de flujos.\n * @author PLUBOT Team\n * @version 3.0.0\n */\n\nimport { Plus, X, Save, CornerDownRight } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, { useState, useCallback, memo } from 'react';\n\n/**\n * Componente para editar variables de un mensaje\n */\nconst VariableEditor = memo(\n  ({\n    nodeId,\n    variables = [],\n    onAddVariable,\n    onUpdateVariable,\n    onDeleteVariable,\n    isUltraPerformanceMode = false,\n  }) => {\n    // Estados locales\n    const [newVariableName, setNewVariableName] = useState('');\n    const [newVariableValue, setNewVariableValue] = useState('');\n    const [editingIndex, setEditingIndex] = useState(-1);\n    const [editingName, setEditingName] = useState('');\n    const [editingValue, setEditingValue] = useState('');\n\n    /**\n     * Maneja la adición de una nueva variable\n     */\n    const handleAddNewVariable = useCallback(() => {\n      if (!newVariableName.trim()) return;\n\n      onAddVariable({\n        name: newVariableName.trim(),\n        value: newVariableValue.trim(),\n      });\n\n      // Reiniciar campos\n      setNewVariableName('');\n      setNewVariableValue('');\n    }, [newVariableName, newVariableValue, onAddVariable]);\n\n    /**\n     * Inicia la edición de una variable existente\n     */\n    const startEditing = useCallback((index, variable) => {\n      setEditingIndex(index);\n      setEditingName(variable.name);\n      setEditingValue(variable.value || '');\n    }, []);\n\n    /**\n     * Guarda los cambios a una variable existente\n     */\n    const saveEditing = useCallback(() => {\n      if (editingIndex === -1) return;\n\n      if (editingName.trim()) {\n        // Actualizamos la variable\n        onUpdateVariable(editingIndex, {\n          name: editingName.trim(),\n          value: editingValue.trim(),\n        });\n      } else {\n        // Si el nombre está vacío, eliminamos la variable\n        onDeleteVariable(editingIndex);\n      }\n\n      // Reiniciar estado de edición\n      setEditingIndex(-1);\n      setEditingName('');\n      setEditingValue('');\n    }, [\n      editingIndex,\n      editingName,\n      editingValue,\n      onUpdateVariable,\n      onDeleteVariable,\n    ]);\n\n    /**\n     * Cancela la edición actual\n     */\n    const cancelEditing = useCallback(() => {\n      setEditingIndex(-1);\n      setEditingName('');\n      setEditingValue('');\n    }, []);\n\n    /**\n     * Maneja la eliminación de una variable\n     */\n    const handleDeleteVariable = useCallback(\n      (index) => {\n        onDeleteVariable(index);\n      },\n      [onDeleteVariable],\n    );\n\n    /**\n     * Maneja atajos de teclado en la edición de variables\n     */\n    const handleKeyDown = useCallback(\n      (e, isNew = false) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n          e.preventDefault();\n          if (isNew) {\n            handleAddNewVariable();\n          } else {\n            saveEditing();\n          }\n        } else if (e.key === 'Escape') {\n          e.preventDefault();\n          if (isNew) {\n            setNewVariableName('');\n            setNewVariableValue('');\n          } else {\n            cancelEditing();\n          }\n        }\n      },\n      [handleAddNewVariable, saveEditing, cancelEditing],\n    );\n\n    // En modo ultra rendimiento, mostramos una interfaz simplificada\n    if (isUltraPerformanceMode) {\n      return (\n        <div className='message-node__variables-ultra'>\n          <div className='message-node__variables-count'>\n            {variables.length} variable(s)\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className='message-node__variables-editor'\n        role='region'\n        aria-label='Editor de variables'\n      >\n        <h4 className='message-node__section-title'>Variables</h4>\n\n        {/* Lista de variables existentes */}\n        {variables.length > 0 && (\n          <div className='message-node__variables-list' role='list'>\n            {variables.map((variable, index) => (\n              <div\n                key={`var-${index}`}\n                className='message-node__variable-item'\n                role='listitem'\n              >\n                {editingIndex === index ? (\n                  // Modo edición\n                  <div className='message-node__variable-edit'>\n                    <input\n                      type='text'\n                      value={editingName}\n                      onChange={(e) => setEditingName(e.target.value)}\n                      onKeyDown={handleKeyDown}\n                      placeholder='Nombre'\n                      className='message-node__variable-input nodrag'\n                      aria-label='Nombre de variable'\n                      autoFocus\n                      onMouseDown={(e) => e.stopPropagation()}\n                    />\n                    <input\n                      type='text'\n                      value={editingValue}\n                      onChange={(e) => setEditingValue(e.target.value)}\n                      onKeyDown={handleKeyDown}\n                      placeholder='Valor'\n                      className='message-node__variable-input nodrag'\n                      aria-label='Valor de variable'\n                      onMouseDown={(e) => e.stopPropagation()}\n                    />\n                    <div className='message-node__variable-actions'>\n                      <button\n                        type='button'\n                        onClick={cancelEditing}\n                        className='message-node__variable-btn message-node__variable-btn--cancel'\n                        aria-label='Cancelar edición'\n                        title='Cancelar'\n                      >\n                        <X size={14} aria-hidden='true' />\n                      </button>\n                      <button\n                        type='button'\n                        onClick={saveEditing}\n                        onMouseDown={(e) => e.stopPropagation()}\n                        className='message-node__variable-btn message-node__variable-btn--save'\n                        aria-label='Guardar cambios'\n                        title='Guardar'\n                      >\n                        <Save size={14} aria-hidden='true' />\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  // Modo visualización\n                  <div className='message-node__variable-view'>\n                    <div\n                      className='message-node__variable-info'\n                      onClick={() => startEditing(index, variable)}\n                    >\n                      <span className='message-node__variable-name'>\n                        {variable.name}\n                      </span>\n                      <span className='message-node__variable-arrow'>\n                        <CornerDownRight size={12} aria-hidden='true' />\n                      </span>\n                      <span className='message-node__variable-value'>\n                        {variable.value || '(vacío)'}\n                      </span>\n                    </div>\n                    <button\n                      type='button'\n                      onClick={() => handleDeleteVariable(index)}\n                      className='message-node__variable-btn message-node__variable-btn--delete'\n                      aria-label={`Eliminar variable ${variable.name}`}\n                      title='Eliminar'\n                    >\n                      <X size={14} aria-hidden='true' />\n                    </button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Formulario para agregar nueva variable */}\n        <div className='message-node__add-variable'>\n          <div className='message-node__variable-inputs'>\n            <input\n              type='text'\n              value={newVariableName}\n              onChange={(e) => setNewVariableName(e.target.value)}\n              onKeyDown={(e) => handleKeyDown(e, true)}\n              placeholder='Nombre'\n              className='message-node__variable-input nodrag'\n              aria-label='Nuevo nombre de variable'\n              onMouseDown={(e) => e.stopPropagation()}\n            />\n            <input\n              type='text'\n              value={newVariableValue}\n              onChange={(e) => setNewVariableValue(e.target.value)}\n              onKeyDown={(e) => handleKeyDown(e, true)}\n              placeholder='Valor'\n              className='message-node__variable-input nodrag'\n              aria-label='Nuevo valor de variable'\n              onMouseDown={(e) => e.stopPropagation()}\n            />\n          </div>\n          <button\n            type='button'\n            onClick={handleAddNewVariable}\n            onMouseDown={(e) => e.stopPropagation()}\n            disabled={!newVariableName.trim()}\n            className='message-node__add-btn'\n            aria-label='Agregar variable'\n            title='Agregar variable'\n          >\n            <Plus size={14} aria-hidden='true' />\n            <span>Agregar</span>\n          </button>\n        </div>\n      </div>\n    );\n  },\n);\n\nVariableEditor.displayName = 'VariableEditor';\n\nVariableEditor.propTypes = {\n  nodeId: PropTypes.string.isRequired,\n  variables: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.string,\n    }),\n  ),\n  onAddVariable: PropTypes.func.isRequired,\n  onUpdateVariable: PropTypes.func.isRequired,\n  onDeleteVariable: PropTypes.func.isRequired,\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\nexport default VariableEditor;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/messagenode/ultraPerformanceLabels.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/optionnode/OptionNode.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (307). Maximum allowed is 80.",
        "line": 179,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 526,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 18. Maximum allowed is 10.",
        "line": 179,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 526,
        "endColumn": 2
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'_lodLevel' is missing in props validation",
        "line": 183,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 183,
        "endColumn": 12
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 364,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 380,
        "endColumn": 6
      },
      {
        "ruleId": "react/no-unused-prop-types",
        "severity": 2,
        "message": "'lodLevel' PropType is defined but prop is never used",
        "line": 532,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedPropType",
        "endLine": 532,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file OptionNode.jsx\n * @description Componente elite para representar opciones lógicas generadas por un DecisionNode.\n * Implementa diseño profesional, accesibilidad y optimización para modo normal y ultra rendimiento.\n * @version 2.0.0 - Refactorizado para integración directa con Zustand\n */\n\nimport { debounce } from 'lodash';\nimport { Check, X, HelpCircle, Circle, CornerDownRight } from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useUpdateNodeInternals, Position, Handle } from 'reactflow';\nimport { shallow } from 'zustand/shallow';\n\nimport { useNodeData } from '@/stores/selectors';\nimport useFlowStore from '@/stores/use-flow-store';\nimport { formatDateRelative } from '@/utils/date.js';\n\nimport Tooltip from '../../ui/ToolTip';\n\nimport './OptionNode.css';\n\n// Constantes y configuración\nconst NODE_CONFIG = {\n  DEFAULT_INSTRUCTION: 'Instrucciones para esta opción...',\n  MAX_TEXTAREA_HEIGHT: 200,\n};\n\nconst getPosition = (position) => {\n  if (position instanceof Object) {\n    return position;\n  }\n  switch (position) {\n    case 'top': {\n      return Position.Top;\n    }\n    case 'right': {\n      return Position.Right;\n    }\n    case 'left': {\n      return Position.Left;\n    }\n    default: {\n      return Position.Bottom;\n    }\n  }\n};\n\n/**\n * Componente para el ícono del nodo de opción\n */\nconst OptionNodeIcon = React.memo(\n  ({ label, isUltraPerformanceMode = false }) => {\n    const iconProperties = useMemo(\n      () => ({\n        size: isUltraPerformanceMode ? 14 : 16,\n        strokeWidth: isUltraPerformanceMode ? 2 : 1.75,\n        className: isUltraPerformanceMode ? '' : 'option-node__icon-svg',\n      }),\n      [isUltraPerformanceMode],\n    );\n\n    const renderIcon = useCallback(() => {\n      const currentLabelText = label?.toLowerCase() || '';\n\n      // Comparaciones más robustas para los labels\n      if (\n        ['sí', 'si', 'yes', 'true'].some((term) =>\n          currentLabelText.includes(term),\n        )\n      ) {\n        return <Check {...iconProperties} aria-hidden='true' />;\n      } else if (\n        ['no', 'false'].some((term) => currentLabelText.includes(term))\n      ) {\n        return <X {...iconProperties} aria-hidden='true' />;\n      } else if (\n        ['tal vez', 'quizás', 'quizas', 'maybe'].some((term) =>\n          currentLabelText.includes(term),\n        )\n      ) {\n        return <HelpCircle {...iconProperties} aria-hidden='true' />;\n      } else {\n        return <Circle {...iconProperties} aria-hidden='true' />;\n      }\n    }, [label, iconProperties]);\n\n    return (\n      <div\n        className={`option-node__icon ${isUltraPerformanceMode ? 'option-node__icon--ultra' : ''}`}\n        role='img'\n        aria-label={`Opción: ${label}`}\n      >\n        {renderIcon()}\n      </div>\n    );\n  },\n);\n\nOptionNodeIcon.displayName = 'OptionNodeIcon';\n\nOptionNodeIcon.propTypes = {\n  label: PropTypes.string,\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\n/**\n * Componente OptionNodeHandle - Maneja los handles de conexión\n */\nconst OptionNodeHandle = React.memo(\n  ({\n    type,\n    position,\n    id: handleId,\n    isConnectable,\n    isEditing,\n    isUltraPerformanceMode,\n    style,\n    handleColor,\n    ...rest\n  }) => {\n    // Garantizar que position siempre sea un objeto Position\n    const positionObject = getPosition(position);\n\n    const baseStyle = {\n      zIndex: 50,\n      '--option-node-handle-bg-color': handleColor || '#3b82f6',\n      ...style,\n    };\n\n    // Los efectos visuales de hover ahora se manejan puramente con CSS.\n\n    return (\n      <Handle\n        type={type}\n        position={positionObject}\n        id={handleId}\n        isConnectable={isConnectable}\n        className={`option-node__handle option-node__handle--${type} ${isUltraPerformanceMode ? 'option-node__handle--ultra' : ''} ${isEditing ? 'option-node__handle--editing' : ''}`}\n        style={baseStyle}\n        tabIndex={0}\n        aria-label={\n          type === 'source'\n            ? 'Salida del nodo de opción'\n            : 'Entrada del nodo de opción'\n        }\n        {...rest}\n      />\n    );\n  },\n);\n\nOptionNodeHandle.displayName = 'OptionNodeHandle';\n\nOptionNodeHandle.propTypes = {\n  type: PropTypes.string.isRequired,\n  position: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string, // Permitimos string para posiciones como 'top', 'right', etc.\n  ]).isRequired,\n  id: PropTypes.string.isRequired,\n  isConnectable: PropTypes.bool,\n  isEditing: PropTypes.bool,\n  isUltraPerformanceMode: PropTypes.bool,\n  style: PropTypes.object,\n  handleColor: PropTypes.string,\n};\n\n/**\n * Componente principal OptionNode - Refactorizado para integración directa y granular con Zustand\n */\nconst OptionNodeComponent = ({\n  id,\n  selected = false,\n  isConnectable = true,\n  _lodLevel, // <-- Prop recibida del HOC para que React.memo la detecte\n}) => {\n  // --- REFS ---\n  const textareaReference = useRef(null);\n  const nodeReference = useRef(null);\n  const updateNodeInternals = useUpdateNodeInternals();\n\n  // --- ZUSTAND STORE (SELECTORS & ACTIONS) ---\n  // Selectors are granular to prevent unnecessary re-renders.\n\n  // 1. Get node-specific data and editing state from a dedicated selector\n  const nodeData = useNodeData(id);\n  const {\n    instruction: initialInstruction,\n    sourceNode,\n    sourceHandle,\n    lastUpdated,\n    isEditing,\n    isUltra,\n    color,\n  } = nodeData || {};\n\n  // 2. Get global state and actions\n  const {\n    updateNodeData,\n    setNodeEditing,\n    isUltraPerformanceModeGlobal,\n    panToNode,\n  } = useFlowStore(\n    (state) => ({\n      updateNodeData: state.updateNodeData,\n      setNodeEditing: state.setNodeEditing,\n      isUltraPerformanceModeGlobal: state.isUltraPerformanceModeGlobal,\n      panToNode: state.panToNode,\n    }),\n    shallow,\n  );\n\n  // 3. Get the label reactively from the parent DecisionNode's condition\n  const label = useFlowStore((state) => {\n    if (!sourceNode || !sourceHandle) {\n      return nodeData?.label || 'Opción';\n    }\n    const parentNode = state.nodes.find((n) => n.id === sourceNode);\n    const condition = parentNode?.data?.conditions?.find(\n      (c) => c.id === sourceHandle,\n    );\n    return condition?.text || 'Opción';\n  }, shallow);\n\n  // --- LOCAL UI STATE ---\n  const [currentInstruction, setCurrentInstruction] = useState(\n    initialInstruction || '',\n  );\n\n  // --- MEMOIZED VALUES ---\n  const instruction = useMemo(\n    () => initialInstruction || NODE_CONFIG.DEFAULT_INSTRUCTION,\n    [initialInstruction],\n  );\n  const isUltraPerformanceMode = useMemo(\n    () => isUltra || isUltraPerformanceModeGlobal,\n    [isUltra, isUltraPerformanceModeGlobal],\n  );\n\n  const borderColor = useMemo(() => {\n    const currentLabelText = label?.toLowerCase() || '';\n    if (\n      ['sí', 'si', 'yes', 'true'].some((term) =>\n        currentLabelText.includes(term),\n      )\n    )\n      return 'var(--option-node-border-yes)';\n    if (['no', 'false'].some((term) => currentLabelText.includes(term)))\n      return 'var(--option-node-border-no)';\n    if (\n      ['tal vez', 'quizás', 'quizas', 'maybe'].some((term) =>\n        currentLabelText.includes(term),\n      )\n    )\n      return 'var(--option-node-border-maybe)';\n    return 'var(--option-node-border-default)';\n  }, [label]);\n\n  const nodeClasses = useMemo(\n    () =>\n      [\n        'option-node',\n        `option-node--${isUltraPerformanceMode ? 'ultra' : 'normal'}-mode`,\n        selected ? 'option-node--selected' : '',\n        isEditing ? 'option-node--editing' : '',\n        `option-node--border-color--${borderColor.replace('#', '')}`,\n      ]\n        .filter(Boolean)\n        .join(' '),\n    [selected, isEditing, isUltraPerformanceMode, borderColor],\n  );\n\n  const nodeStyle = useMemo(\n    () => ({\n      borderLeftColor: borderColor,\n      backgroundColor: isUltraPerformanceMode ? '#2d2d2d' : undefined,\n    }),\n    [isUltraPerformanceMode, borderColor],\n  );\n\n  // --- EFFECTS ---\n  // Sync local editing buffer when not editing\n  useEffect(() => {\n    if (!isEditing) {\n      setCurrentInstruction(instruction || '');\n    }\n  }, [instruction, isEditing]);\n\n  // Handle textarea focus and resize when editing starts\n  useEffect(() => {\n    if (isEditing && textareaReference.current) {\n      const ta = textareaReference.current;\n      ta.style.height = 'auto';\n      ta.style.height = `${Math.min(ta.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT)}px`;\n      ta.focus();\n      ta.select();\n    }\n  }, [isEditing]);\n\n  // Update React Flow internals on resize to keep edges connected correctly\n  useEffect(() => {\n    const debouncedUpdate = debounce(() => updateNodeInternals(id), 50);\n    const observer = new ResizeObserver(() => {\n      debouncedUpdate();\n    });\n    const currentReference = nodeReference.current;\n    if (currentReference) {\n      observer.observe(currentReference);\n    }\n    return () => {\n      debouncedUpdate.cancel();\n      if (currentReference) {\n        observer.unobserve(currentReference);\n      }\n    };\n  }, [id, updateNodeInternals]);\n\n  // --- CALLBACKS ---\n  const handleInstructionChange = useCallback((event_) => {\n    setCurrentInstruction(event_.target.value);\n    const ta = textareaReference.current;\n    if (ta) {\n      ta.style.height = 'auto';\n      ta.style.height = `${Math.min(ta.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT)}px`;\n    }\n  }, []);\n\n  const startEditing = useCallback(() => {\n    if (!isUltraPerformanceMode) {\n      setNodeEditing(id, true);\n    }\n  }, [id, isUltraPerformanceMode, setNodeEditing]);\n\n  const finishEditing = useCallback(() => {\n    if (currentInstruction !== instruction) {\n      updateNodeData(id, {\n        instruction: currentInstruction,\n        lastUpdated: new Date().toISOString(),\n      });\n    }\n    setNodeEditing(id, false);\n  }, [id, currentInstruction, instruction, updateNodeData, setNodeEditing]);\n\n  const cancelEditing = useCallback(() => {\n    setCurrentInstruction(instruction || '');\n    setNodeEditing(id, false);\n  }, [instruction, id, setNodeEditing]);\n\n  const navigateToParent = useCallback(() => {\n    if (sourceNode) {\n      panToNode(sourceNode, { select: true });\n    }\n  }, [sourceNode, panToNode]);\n\n  const handleKeyDown = useCallback(\n    (event_) => {\n      if (isEditing) {\n        if (event_.key === 'Enter' && (event_.ctrlKey || event_.metaKey)) {\n          event_.preventDefault();\n          finishEditing();\n        } else if (event_.key === 'Escape') {\n          event_.preventDefault();\n          cancelEditing();\n        }\n      } else if (event_.key === 'Enter' && !event_.ctrlKey && !event_.metaKey) {\n        event_.preventDefault();\n        startEditing();\n      } else if (event_.key === 'p' && event_.ctrlKey && sourceNode) {\n        event_.preventDefault();\n        navigateToParent();\n      }\n    },\n    [\n      isEditing,\n      finishEditing,\n      cancelEditing,\n      startEditing,\n      navigateToParent,\n      sourceNode,\n    ],\n  );\n\n  // --- RENDER ---\n  return (\n    <div\n      ref={nodeReference}\n      className={nodeClasses}\n      style={nodeStyle}\n      onDoubleClick={startEditing}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role='treeitem'\n      aria-selected={selected}\n      aria-label={`Nodo de opción: ${label || 'Opción sin etiqueta'}`}\n      aria-expanded={isEditing}\n      aria-describedby={`option-node-description-${id}`}\n    >\n      <OptionNodeHandle\n        type='target'\n        position={Position.Top}\n        id='target'\n        isConnectable={isConnectable}\n        isEditing={isEditing}\n        isUltraPerformanceMode={isUltraPerformanceMode}\n        handleColor={color}\n      />\n\n      <div className='option-node__content'>\n        <div className='option-node__header'>\n          <div className='option-node__title'>\n            <OptionNodeIcon\n              label={label}\n              isUltraPerformanceMode={isUltraPerformanceMode}\n            />\n            <span className='option-node__label-text'>{label || 'Opción'}</span>\n          </div>\n\n          {!isUltraPerformanceMode && sourceNode && (\n            <Tooltip\n              content={`Ir a nodo padre: ${sourceNode.slice(0, 8)}...`}\n              position='top'\n            >\n              <button\n                onClick={navigateToParent}\n                className='option-node__parent-link'\n                aria-label='Ver nodo padre'\n              >\n                <CornerDownRight size={14} />\n              </button>\n            </Tooltip>\n          )}\n        </div>\n\n        <div className='option-node__instruction-wrapper'>\n          {isEditing ? (\n            <textarea\n              ref={textareaReference}\n              className='option-node__instruction-textarea'\n              value={currentInstruction}\n              onChange={handleInstructionChange}\n              onBlur={finishEditing}\n              onKeyDown={handleKeyDown}\n              placeholder='Escribe las instrucciones para esta opción...'\n              aria-label='Instrucciones para esta opción'\n            />\n          ) : (\n            <div\n              className='option-node__instruction-text'\n              onClick={startEditing}\n              onKeyDown={(event_) => {\n                // Allow starting edit with Enter or Space, as expected for a button role\n                if (event_.key === 'Enter' || event_.key === ' ') {\n                  event_.preventDefault();\n                  startEditing();\n                }\n              }}\n              role='button'\n              tabIndex={0}\n            >\n              {instruction}\n            </div>\n          )}\n        </div>\n\n        {isEditing && (\n          <div className='option-node__actions'>\n            <Tooltip content='Cancelar (Esc)' position='top'>\n              <button\n                onClick={cancelEditing}\n                className='option-node__button option-node__button--cancel'\n                aria-label='Cancelar edición'\n              >\n                <X size={14} />\n                <span>Cancelar</span>\n              </button>\n            </Tooltip>\n            <Tooltip content='Guardar (Ctrl+Enter)' position='top'>\n              <button\n                onClick={finishEditing}\n                className='option-node__button option-node__button--save'\n                aria-label='Guardar cambios'\n              >\n                <Check size={14} />\n                <span>Guardar</span>\n              </button>\n            </Tooltip>\n          </div>\n        )}\n\n        {!isUltraPerformanceMode && !isEditing && lastUpdated && (\n          <div className='option-node__footer'>\n            <span className='option-node__timestamp'>\n              Actualizado: {formatDateRelative(lastUpdated)}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <OptionNodeHandle\n        type='source'\n        position={Position.Bottom}\n        id='source'\n        isConnectable={isConnectable}\n        isEditing={isEditing}\n        isUltraPerformanceMode={isUltraPerformanceMode}\n        handleColor={color}\n      />\n\n      <span className='sr-only' id={`option-node-description-${id}`}>\n        Nodo de opción: {label || 'Opción sin etiqueta'}. Instrucción:{' '}\n        {instruction || NODE_CONFIG.DEFAULT_INSTRUCTION}. Deriva del nodo de\n        decisión: {sourceNode ? `${sourceNode.slice(0, 8)}...` : 'Desconocido'}.\n        {lastUpdated &&\n          ` Última actualización: ${formatDateRelative(lastUpdated)}.`}\n      </span>\n    </div>\n  );\n};\n\nOptionNodeComponent.propTypes = {\n  id: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  isConnectable: PropTypes.bool,\n  lodLevel: PropTypes.string,\n};\n\nconst OptionNode = memo(OptionNodeComponent);\n\nOptionNode.displayName = 'OptionNode';\n\nexport default OptionNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/optionnode/OptionNode.temp.jsx",
    "messages": [
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "The filename `OptionNode.temp.jsx` should be named `OptionNode.temporary.jsx`. A more descriptive name will do too.",
        "line": 8,
        "column": 1,
        "nodeType": "Program",
        "messageId": "replace",
        "endLine": 539,
        "endColumn": 1
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'debounce'.",
        "line": 8,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 8,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [301, 337], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'Edit2'.",
        "line": 14,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 14,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [383, 392], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "The 'iconProperties' object makes the dependencies of useCallback Hook (at line 75) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'iconProperties' in its own useMemo() Hook.",
        "line": 46,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "endLine": 50,
        "endColumn": 6
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 128,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 128,
        "endColumn": 9
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 138,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 138,
        "endColumn": 44
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (300). Maximum allowed is 80.",
        "line": 185,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 530,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 17. Maximum allowed is 10.",
        "line": 185,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 530,
        "endColumn": 2
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 203,
        "column": 21,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 203,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [5816, 5820], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 204,
        "column": 28,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 204,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [5849, 5853], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 205,
        "column": 22,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 205,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [5876, 5880], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "no-promise-executor-return",
        "severity": 2,
        "message": "Return values from promise executor functions cannot be read.",
        "line": 322,
        "column": 38,
        "nodeType": "CallExpression",
        "messageId": "returnsValue",
        "endLine": 322,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "wrapBraces",
            "fix": { "range": [9307, 9330], "text": "{setTimeout(resolve, 50)}" },
            "desc": "Wrap the expression in `{}`."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 324,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 324,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [9386, 9450], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 341,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 341,
        "endColumn": 49
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 377,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 393,
        "endColumn": 6
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 377,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 377,
        "endColumn": 7
      },
      {
        "ruleId": "jsx-a11y/no-noninteractive-element-interactions",
        "severity": 2,
        "message": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
        "line": 405,
        "column": 5,
        "nodeType": "JSXOpeningElement",
        "endLine": 419,
        "endColumn": 6
      },
      {
        "ruleId": "jsx-a11y/role-supports-aria-props",
        "severity": 2,
        "message": "The attribute aria-expanded is not supported by the role group.",
        "line": 405,
        "column": 5,
        "nodeType": "JSXOpeningElement",
        "endLine": 419,
        "endColumn": 6
      },
      {
        "ruleId": "jsx-a11y/no-noninteractive-tabindex",
        "severity": 2,
        "message": "`tabIndex` should only be declared on interactive elements.",
        "line": 413,
        "column": 7,
        "nodeType": "JSXAttribute",
        "endLine": 413,
        "endColumn": 19
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 459,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 462,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file OptionNode.jsx\n * @description Componente elite para representar opciones lógicas generadas por un DecisionNode.\n * Implementa diseño profesional, accesibilidad y optimización para modo normal y ultra rendimiento.\n * @version 2.0.0 - Refactorizado para integración directa con Zustand\n */\n\nimport { debounce } from 'lodash';\nimport {\n  Check,\n  X,\n  HelpCircle,\n  Circle,\n  Edit2,\n  CornerDownRight,\n} from 'lucide-react';\nimport PropTypes from 'prop-types';\nimport React, {\n  useState,\n  useCallback,\n  useMemo,\n  useRef,\n  useEffect,\n} from 'react';\nimport { Position, Handle } from 'reactflow';\n\nimport { formatDateRelative } from '@/utils/date';\n\nimport Tooltip from '../../ui/ToolTip';\n\nimport useFlowStore from '@/stores/useFlowStore';\n\nimport './OptionNode.css';\n\n// Constantes y configuración\nconst NODE_CONFIG = {\n  DEFAULT_INSTRUCTION: 'Instrucciones para esta opción...',\n  MAX_TEXTAREA_HEIGHT: 200,\n};\n\n/**\n * Componente para el ícono del nodo de opción\n */\nconst OptionNodeIcon = React.memo(\n  ({ label, isUltraPerformanceMode = false }) => {\n    const iconProperties = {\n      size: isUltraPerformanceMode ? 14 : 16,\n      strokeWidth: isUltraPerformanceMode ? 2 : 1.75,\n      className: isUltraPerformanceMode ? '' : 'option-node__icon-svg',\n    };\n\n    const renderIcon = useCallback(() => {\n      const currentLabelText = label?.toLowerCase() || '';\n\n      // Comparaciones más robustas para los labels\n      if (\n        ['sí', 'si', 'yes', 'true'].some((term) =>\n          currentLabelText.includes(term),\n        )\n      ) {\n        return <Check {...iconProperties} aria-hidden='true' />;\n      } else if (\n        ['no', 'false'].some((term) => currentLabelText.includes(term))\n      ) {\n        return <X {...iconProperties} aria-hidden='true' />;\n      } else if (\n        ['tal vez', 'quizás', 'quizas', 'maybe'].some((term) =>\n          currentLabelText.includes(term),\n        )\n      ) {\n        return <HelpCircle {...iconProperties} aria-hidden='true' />;\n      } else {\n        return <Circle {...iconProperties} aria-hidden='true' />;\n      }\n    }, [label, iconProperties]);\n\n    return (\n      <div\n        className={`option-node__icon ${isUltraPerformanceMode ? 'option-node__icon--ultra' : ''}`}\n        role='img'\n        aria-label={`Opción: ${label}`}\n      >\n        {renderIcon()}\n      </div>\n    );\n  },\n);\n\nOptionNodeIcon.displayName = 'OptionNodeIcon';\n\nOptionNodeIcon.propTypes = {\n  label: PropTypes.string,\n  isUltraPerformanceMode: PropTypes.bool,\n};\n\n/**\n * Componente OptionNodeHandle - Maneja los handles de conexión\n */\nconst OptionNodeHandle = React.memo(\n  ({\n    type,\n    position,\n    id: handleId,\n    isConnectable,\n    isEditing,\n    isUltraPerformanceMode,\n    style,\n    handleColor,\n    ...rest\n  }) => {\n    const baseStyle = {\n      zIndex: 50,\n      width: isUltraPerformanceMode ? '10px' : '16px',\n      height: isUltraPerformanceMode ? '10px' : '16px',\n      border: isUltraPerformanceMode ? '1px solid white' : '2px solid white',\n      boxShadow: isUltraPerformanceMode\n        ? '0 1px 2px rgba(0, 0, 0, 0.1)'\n        : '0 0 0 2px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.1)',\n      background: handleColor || '#3b82f6',\n      transition: isUltraPerformanceMode\n        ? 'none'\n        : 'all 0.2s cubic-bezier(0.25, 1, 0.5, 1)',\n      ...style,\n    };\n\n    // Manejadores de eventos para efectos visuales\n    const handleMouseEnter = useCallback(\n      (e) => {\n        if (e.target && !isUltraPerformanceMode) {\n          e.target.style.transform = 'scale(1.15) translateZ(0)';\n          e.target.style.boxShadow = `0 0 8px ${handleColor || '#3b82f6'}`;\n          e.target.style.filter = 'brightness(1.2)';\n        }\n      },\n      [isUltraPerformanceMode, handleColor],\n    );\n\n    const handleMouseLeave = useCallback((e) => {\n      if (e.target) {\n        e.target.style.transform = '';\n        e.target.style.filter = '';\n        e.target.style.boxShadow =\n          '0 0 0 2px rgba(0, 0, 0, 0.15), 0 4px 6px rgba(0, 0, 0, 0.1)';\n      }\n    }, []);\n\n    return (\n      <Handle\n        type={type}\n        position={position}\n        id={handleId}\n        isConnectable={isConnectable && !isEditing}\n        className={`option-node__handle option-node__handle--${type} ${isUltraPerformanceMode ? 'ultra-performance' : ''}`}\n        style={baseStyle}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        tabIndex={0}\n        aria-label={\n          type === 'source'\n            ? 'Salida del nodo de opción'\n            : 'Entrada del nodo de opción'\n        }\n        {...rest}\n      />\n    );\n  },\n);\n\nOptionNodeHandle.displayName = 'OptionNodeHandle';\n\nOptionNodeHandle.propTypes = {\n  type: PropTypes.string.isRequired,\n  position: PropTypes.object.isRequired,\n  id: PropTypes.string.isRequired,\n  isConnectable: PropTypes.bool,\n  isEditing: PropTypes.bool,\n  isUltraPerformanceMode: PropTypes.bool,\n  style: PropTypes.object,\n  handleColor: PropTypes.string,\n};\n\n/**\n * Componente principal OptionNode - Refactorizado para integración directa con Zustand\n */\nconst OptionNode = ({ id, selected = false, isConnectable = true }) => {\n  // Estado local para UI\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [currentInstruction, setCurrentInstruction] = useState('');\n\n  // Referencias\n  const textareaReference = useRef(null);\n  const nodeReference = useRef(null);\n\n  // Selectores de Zustand - solo obtenemos los datos que necesitamos\n  const nodeData = useFlowStore((state) => {\n    const node = state.nodes.find((n) => n.id === id);\n    return (\n      node?.data || {\n        label: '',\n        instruction: NODE_CONFIG.DEFAULT_INSTRUCTION,\n        sourceNode: null,\n        sourceConditionId: null,\n        lastUpdated: null,\n        isUltraPerformanceMode: false,\n      }\n    );\n  });\n\n  // Acciones del store\n  const { updateOptionNodeInstruction, setNodes, getNode, fitView } =\n    useFlowStore((state) => ({\n      updateOptionNodeInstruction: state.updateOptionNodeInstruction,\n      setNodes: state.setNodes,\n      getNode: state.getNode,\n      fitView: state.fitView,\n    }));\n\n  // Extraer datos relevantes del nodo\n  const {\n    label,\n    instruction,\n    sourceNode,\n    lastUpdated,\n    isUltraPerformanceMode,\n  } = nodeData;\n\n  // Sincronizar el estado local con los datos del store\n  useEffect(() => {\n    if (!isEditing) {\n      setCurrentInstruction(instruction);\n    }\n  }, [instruction, isEditing]);\n\n  // Efecto para ajustar el textarea cuando se está editando\n  useEffect(() => {\n    if (isEditing && textareaReference.current) {\n      requestAnimationFrame(() => {\n        textareaReference.current.style.height = 'auto';\n        textareaReference.current.style.height = `${Math.min(textareaReference.current.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT)}px`;\n        textareaReference.current.focus();\n        textareaReference.current.select();\n      });\n    }\n  }, [isEditing]);\n\n  // Construir clases para el nodo\n  const nodeClasses = useMemo(() => {\n    const classes = ['option-node'];\n\n    if (selected) classes.push('option-node--selected');\n    if (isEditing) classes.push('option-node--editing');\n    if (isUltraPerformanceMode) classes.push('option-node--ultra');\n    if (isHovered && !isUltraPerformanceMode)\n      classes.push('option-node--hovered');\n\n    return classes.join(' ');\n  }, [selected, isEditing, isUltraPerformanceMode, isHovered]);\n\n  // Determinar el color del borde basado en el label\n  const borderColor = useMemo(() => {\n    const currentLabelText = label?.toLowerCase() || '';\n    if (\n      ['sí', 'si', 'yes', 'true'].some((term) =>\n        currentLabelText.includes(term),\n      )\n    ) {\n      return 'var(--option-node-border-yes)';\n    } else if (\n      ['no', 'false'].some((term) => currentLabelText.includes(term))\n    ) {\n      return 'var(--option-node-border-no)';\n    } else if (\n      ['tal vez', 'quizás', 'quizas', 'maybe'].some((term) =>\n        currentLabelText.includes(term),\n      )\n    ) {\n      return 'var(--option-node-border-maybe)';\n    } else {\n      return 'var(--option-node-border-default)';\n    }\n  }, [label]);\n\n  // Estilo del nodo\n  const nodeStyle = useMemo(\n    () => ({\n      borderLeftColor: borderColor,\n      backgroundColor: isUltraPerformanceMode ? '#2d2d2d' : undefined,\n      boxShadow: isUltraPerformanceMode ? 'none' : undefined,\n      padding: isUltraPerformanceMode ? '0.5rem' : undefined,\n    }),\n    [isUltraPerformanceMode, borderColor],\n  );\n\n  // Iniciar edición\n  const handleDoubleClick = useCallback(() => {\n    if (!isUltraPerformanceMode) {\n      setIsEditing(true);\n    }\n  }, [isUltraPerformanceMode]);\n\n  // Cancelar edición\n  const cancelEditing = useCallback(() => {\n    setCurrentInstruction(instruction);\n    setIsEditing(false);\n  }, [instruction]);\n\n  // Finalizar edición y guardar cambios\n  const finishEditing = useCallback(async () => {\n    if (isSaving) return;\n\n    const hasChanges = currentInstruction !== instruction;\n    if (!hasChanges) {\n      setIsEditing(false);\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      updateOptionNodeInstruction(id, currentInstruction);\n      await new Promise((resolve) => setTimeout(resolve, 50)); // Pequeño delay para UX\n    } catch (error) {\n      console.error('Error al guardar cambios en OptionNode:', error);\n    } finally {\n      setIsSaving(false);\n      setIsEditing(false);\n      if (textareaReference.current) {\n        textareaReference.current.blur();\n      }\n    }\n  }, [\n    id,\n    currentInstruction,\n    instruction,\n    isSaving,\n    updateOptionNodeInstruction,\n  ]);\n\n  // Manejar cambios en el textarea\n  const handleInstructionChange = useCallback((e) => {\n    setCurrentInstruction(e.target.value);\n\n    // Ajustar altura del textarea dinámicamente\n    if (textareaReference.current) {\n      textareaReference.current.style.height = 'auto';\n      textareaReference.current.style.height = `${Math.min(textareaReference.current.scrollHeight, NODE_CONFIG.MAX_TEXTAREA_HEIGHT)}px`;\n    }\n  }, []);\n\n  // Navegar al nodo padre\n  const navigateToParent = useCallback(() => {\n    if (sourceNode) {\n      const parentNodeInstance = getNode(sourceNode);\n      if (parentNodeInstance) {\n        setNodes((nds) =>\n          nds.map((n) => ({\n            ...n,\n            selected: n.id === sourceNode,\n          })),\n        );\n\n        // Centrar la vista en el nodo padre\n        if (fitView) {\n          fitView({\n            nodes: [{ id: sourceNode }],\n            duration: 800,\n            padding: 0.2,\n          });\n        }\n      }\n    }\n  }, [sourceNode, getNode, setNodes, fitView]);\n\n  // Manejar teclas para accesibilidad\n  const handleKeyDown = useCallback(\n    (e) => {\n      if (isEditing) {\n        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n          e.preventDefault();\n          finishEditing();\n        } else if (e.key === 'Escape') {\n          e.preventDefault();\n          cancelEditing();\n        }\n      } else if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey) {\n        e.preventDefault();\n        handleDoubleClick();\n      } else if (e.key === 'p' && e.ctrlKey && sourceNode) {\n        e.preventDefault();\n        navigateToParent();\n      }\n    },\n    [\n      isEditing,\n      finishEditing,\n      cancelEditing,\n      handleDoubleClick,\n      navigateToParent,\n      sourceNode,\n    ],\n  );\n\n  return (\n    <div\n      ref={nodeReference}\n      className={nodeClasses}\n      style={nodeStyle}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role='group'\n      aria-label={`Nodo de opción: ${label || 'Opción sin etiqueta'}`}\n      aria-expanded={isEditing}\n      aria-busy={isSaving}\n      aria-describedby={`option-node-description-${id}`}\n    >\n      <div className='option-node__content'>\n        <div className='option-node__header'>\n          <div className='option-node__title'>\n            <OptionNodeIcon\n              label={label}\n              isUltraPerformanceMode={isUltraPerformanceMode}\n            />\n            <span className='option-node__label-text'>{label || 'Opción'}</span>\n          </div>\n\n          {!isUltraPerformanceMode && sourceNode && (\n            <Tooltip\n              content={`Ir a nodo padre: ${sourceNode.slice(0, 8)}...`}\n              position='top'\n            >\n              <button\n                onClick={navigateToParent}\n                className='option-node__parent-link'\n                aria-label='Ver nodo padre'\n              >\n                <CornerDownRight size={14} />\n              </button>\n            </Tooltip>\n          )}\n        </div>\n\n        <div className='option-node__instruction-wrapper'>\n          {isEditing ? (\n            <textarea\n              ref={textareaReference}\n              className='option-node__instruction-textarea'\n              value={currentInstruction}\n              onChange={handleInstructionChange}\n              onBlur={finishEditing}\n              onKeyDown={handleKeyDown}\n              placeholder='Escribe las instrucciones para esta opción...'\n              aria-label='Instrucciones para esta opción'\n            />\n          ) : (\n            <p\n              className='option-node__instruction-text'\n              onClick={isUltraPerformanceMode ? undefined : handleDoubleClick}\n            >\n              {instruction}\n            </p>\n          )}\n        </div>\n\n        {/* Botones de acción en modo edición */}\n        {isEditing && (\n          <div className='option-node__actions'>\n            <Tooltip content='Cancelar (Esc)' position='top'>\n              <button\n                onClick={cancelEditing}\n                className='option-node__button option-node__button--cancel'\n                aria-label='Cancelar edición'\n              >\n                <X size={14} />\n                <span>Cancelar</span>\n              </button>\n            </Tooltip>\n            <Tooltip content='Guardar (Ctrl+Enter)' position='top'>\n              <button\n                onClick={finishEditing}\n                className='option-node__button option-node__button--save'\n                aria-label='Guardar cambios'\n              >\n                <Check size={14} />\n                <span>Guardar</span>\n              </button>\n            </Tooltip>\n          </div>\n        )}\n\n        {/* Metadatos */}\n        {!isUltraPerformanceMode && !isEditing && lastUpdated && (\n          <div className='option-node__footer'>\n            <span className='option-node__timestamp'>\n              Actualizado: {formatDateRelative(lastUpdated)}\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Conector de salida en la parte inferior */}\n      <OptionNodeHandle\n        type='source'\n        position={Position.Bottom}\n        id='source'\n        isConnectable={isConnectable}\n        isEditing={isEditing}\n        isUltraPerformanceMode={isUltraPerformanceMode}\n        handleColor={borderColor}\n        style={{\n          bottom: '-12px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n        }}\n      />\n\n      {/* Texto para lectores de pantalla - Accesibilidad mejorada */}\n      <span className='sr-only' id={`option-node-description-${id}`}>\n        Nodo de opción: {label || 'Opción sin etiqueta'}. Instrucción:{' '}\n        {instruction || NODE_CONFIG.DEFAULT_INSTRUCTION}. Deriva del nodo de\n        decisión: {sourceNode ? `${sourceNode.slice(0, 8)}...` : 'Desconocido'}.\n        {lastUpdated &&\n          ` Última actualización: ${formatDateRelative(lastUpdated)}.`}\n      </span>\n    </div>\n  );\n};\n\nOptionNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  isConnectable: PropTypes.bool,\n};\n\nexport default OptionNode;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/optionnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/powernode/PowerNode.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/powernode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/startnode/StartNode.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 189,
        "column": 22,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 189,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [4940, 4942], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/no-autofocus",
        "severity": 2,
        "message": "The autoFocus prop should not be used, as it can reduce usability and accessibility for users.",
        "line": 260,
        "column": 15,
        "nodeType": "JSXAttribute",
        "endLine": 260,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 321,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 321,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 321,
        "column": 50,
        "nodeType": "MemberExpression",
        "messageId": "unsafeReturn",
        "endLine": 321,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateNode on an `any` value.",
        "line": 321,
        "column": 56,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 321,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 322,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 322,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 322,
        "column": 51,
        "nodeType": "MemberExpression",
        "messageId": "unsafeReturn",
        "endLine": 322,
        "endColumn": 72
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .showContextMenu on an `any` value.",
        "line": 322,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 322,
        "endColumn": 72
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 327,
        "column": 16,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 327,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [9012, 9014], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 330,
        "column": 25,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 330,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [9149, 9151], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 335,
        "column": 32,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 335,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [9313, 9315], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 340,
        "column": 27,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 340,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [9441, 9443], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 348,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 349,
        "endColumn": 78
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 349,
        "column": 29,
        "nodeType": "MemberExpression",
        "messageId": "unsafeReturn",
        "endLine": 349,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .isUltraMode on an `any` value.",
        "line": 349,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 349,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
        "severity": 2,
        "message": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "line": 349,
        "column": 48,
        "nodeType": "Punctuator",
        "messageId": "preferNullishOverOr",
        "endLine": 349,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestNullish",
            "data": { "equals": "" },
            "fix": { "range": [9786, 9788], "text": "??" },
            "desc": "Fix to nullish coalescing operator (`??`)."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 354,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 354,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/prefer-optional-chain",
        "severity": 2,
        "message": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
        "line": 462,
        "column": 9,
        "nodeType": null,
        "messageId": "preferOptionalChain",
        "endLine": 463,
        "endColumn": 62,
        "suggestions": [
          {
            "fix": {
              "range": [13283, 13369],
              "text": "nodeReference.current?.contains(activeElement as Node)"
            },
            "messageId": "optionalChainSuggest",
            "desc": "Change to an optional chain."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 513,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 513,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 521,
        "column": 27,
        "nodeType": "CallExpression",
        "messageId": "unsafeReturn",
        "endLine": 521,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `any` typed value.",
        "line": 521,
        "column": 27,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 521,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .deleteNode on an `any` value.",
        "line": 521,
        "column": 51,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 521,
        "endColumn": 61
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has unnecessary dependencies: 'xPos' and 'yPos'. Either exclude them or remove the dependency array.",
        "line": 526,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 526,
        "endColumn": 47,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [id, getNode, showContextMenu]",
            "fix": { "range": [15194, 15236], "text": "[id, getNode, showContextMenu]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 543,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "anyAssignment",
        "endLine": 543,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 556,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "anyAssignment",
        "endLine": 556,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 25,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * @file StartNode.tsx\n * @description Componente optimizado para el nodo de inicio en el editor de flujos Plubot\n * Con integración directa con Zustand y estructura modular de alto rendimiento\n */\n\nimport {\n  PlayArrow as PlayArrowIcon,\n  Edit as EditIcon,\n  History as ClockIcon,\n} from '@mui/icons-material';\nimport debounce from 'lodash/debounce';\nimport type { ChangeEvent, KeyboardEvent, FocusEvent } from 'react';\nimport React, {\n  useState,\n  useCallback,\n  useMemo,\n  memo,\n  useRef,\n  useEffect,\n  Suspense,\n  lazy,\n} from 'react';\nimport type { NodeProps } from 'reactflow';\nimport { Handle, Position, useReactFlow } from 'reactflow';\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport './StartNode.css';\n\n// Componentes cargados de forma diferida para optimizar rendimiento\nconst ContextMenu = lazy(async () => import('../../ui/context-menu'));\nconst Tooltip = lazy(async () => import('../../ui/ToolTip'));\n\n// Tipos para la configuración\ninterface NodeColors {\n  PRIMARY: string;\n  SECONDARY: string;\n  TEXT: string;\n  BORDER: string;\n  HANDLE: string;\n  HANDLE_HOVER: string;\n  ERROR: string;\n  SUCCESS: string;\n  WARNING: string;\n  SELECTED: string;\n  SHADOW: string;\n  BACKGROUND: string;\n  BACKGROUND_HOVER: string;\n  BACKGROUND_SELECTED: string;\n}\n\ninterface NodeAnimations {\n  HOVER: { SCALE: number; SHADOW: string; TRANSITION: string };\n  SELECTED: { SCALE: number; SHADOW: string; TRANSITION: string };\n  ULTRA_PERFORMANCE: { ENABLED: boolean };\n}\n\ninterface NodeConfigType {\n  TYPE: string;\n  DEFAULT_LABEL: string;\n  DEFAULT_DYNAMIC_CONTENT: string;\n  MIN_WIDTH: number;\n  MIN_HEIGHT: number;\n  DEBOUNCE_DELAY: number;\n  MAX_LABEL_LENGTH: number;\n  MAX_DYNAMIC_CONTENT_LENGTH: number;\n  TRANSITION_DURATION: number;\n  ANIMATION_DURATION: number;\n  COLORS: NodeColors;\n  ACCESSIBILITY: { ARIA_LABEL: string; ROLE: string; TABINDEX: number };\n  ANIMATIONS: NodeAnimations;\n}\n\n// Configuración centralizada para el nodo\nconst NODE_CONFIG: NodeConfigType = {\n  TYPE: 'start',\n  DEFAULT_LABEL: 'Inicio',\n  DEFAULT_DYNAMIC_CONTENT: 'Bienvenido al flujo de inicio.',\n  MIN_WIDTH: 180,\n  MIN_HEIGHT: 100,\n  DEBOUNCE_DELAY: 300,\n  MAX_LABEL_LENGTH: 50,\n  MAX_DYNAMIC_CONTENT_LENGTH: 200,\n  TRANSITION_DURATION: 200,\n  ANIMATION_DURATION: 300,\n  COLORS: {\n    PRIMARY: '#0080ff',\n    SECONDARY: '#00e0ff',\n    TEXT: '#ffffff',\n    BORDER: '#0060c0',\n    HANDLE: '#00a0ff',\n    HANDLE_HOVER: '#00c0ff',\n    ERROR: '#ff3333',\n    SUCCESS: '#33cc33',\n    WARNING: '#ffcc00',\n    SELECTED: '#00c0ff',\n    SHADOW: 'rgba(0, 128, 255, 0.5)',\n    BACKGROUND: 'linear-gradient(135deg, #0080ff 0%, #0060c0 100%)',\n    BACKGROUND_HOVER: 'linear-gradient(135deg, #0090ff 0%, #0070d0 100%)',\n    BACKGROUND_SELECTED: 'linear-gradient(135deg, #00a0ff 0%, #0080e0 100%)',\n  },\n  ACCESSIBILITY: {\n    ARIA_LABEL: 'Nodo de inicio del flujo',\n    ROLE: 'button',\n    TABINDEX: 0,\n  },\n  ANIMATIONS: {\n    HOVER: {\n      SCALE: 1.02,\n      SHADOW: '0 8px 20px rgba(0, 128, 255, 0.3)',\n      TRANSITION: 'all 0.3s ease',\n    },\n    SELECTED: {\n      SCALE: 1.05,\n      SHADOW: '0 10px 25px rgba(0, 128, 255, 0.4)',\n      TRANSITION: 'all 0.3s ease',\n    },\n    ULTRA_PERFORMANCE: {\n      ENABLED: false,\n    },\n  },\n};\n\ninterface StartNodeHeaderProperties {\n  label?: string;\n  isEditing: boolean;\n  isUltraMode?: boolean;\n  lastModified?: string;\n}\n\nconst StartNodeHeader: React.FC<StartNodeHeaderProperties> = memo(\n  ({ label, isEditing, isUltraMode, lastModified }) => {\n    const formattedDate = useMemo(() => {\n      if (!lastModified) return '';\n      try {\n        const date = new Date(lastModified);\n        return date.toLocaleDateString(undefined, {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit',\n        });\n      } catch {\n        return '';\n      }\n    }, [lastModified]);\n\n    return (\n      <div\n        className='start-node__header'\n        style={{\n          opacity: isUltraMode ? 0.7 : 1,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: '100%',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            flexGrow: 1,\n            minWidth: 0,\n            marginRight: '8px',\n          }}\n        >\n          {isEditing ? (\n            <EditIcon\n              className='start-node-play-icon'\n              style={{ marginRight: '4px' }}\n            />\n          ) : (\n            <Tooltip\n              content='Doble clic para editar'\n              position='top'\n              delay={300}\n            >\n              <PlayArrowIcon\n                className='start-node-play-icon'\n                style={{ marginRight: '4px' }}\n              />\n            </Tooltip>\n          )}\n          {isEditing ? null : (\n            <span className='start-node__label'>\n              {label || NODE_CONFIG.DEFAULT_LABEL}\n            </span>\n          )}\n        </div>\n\n        {formattedDate && !isUltraMode && (\n          <Tooltip content={formattedDate} position='top' delay={300}>\n            <ClockIcon\n              style={{\n                fontSize: '1rem',\n                opacity: 0.6,\n                cursor: 'default',\n                display: 'inline-block',\n              }}\n            />\n          </Tooltip>\n        )}\n      </div>\n    );\n  },\n);\nStartNodeHeader.displayName = 'StartNodeHeader';\n\ninterface StartNodeContentProperties {\n  isEditing: boolean;\n  label: string;\n  dynamicContent: string;\n  inputRef: React.Ref<HTMLInputElement>;\n  textareaRef: React.Ref<HTMLTextAreaElement>;\n  handleLabelChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  handleDynamicContentChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n  handleKeyDown: (\n    event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n  handleBlur: (\n    event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => void;\n  isUltraMode?: boolean;\n  errorMessage?: string;\n}\n\nconst StartNodeContent: React.FC<StartNodeContentProperties> = memo(\n  ({\n    isEditing,\n    label,\n    dynamicContent,\n    inputRef,\n    textareaRef,\n    handleLabelChange,\n    handleDynamicContentChange,\n    handleKeyDown,\n    handleBlur,\n    isUltraMode,\n    errorMessage,\n  }) => {\n    return (\n      <div\n        className={`start-node__content ${isEditing ? 'start-node__content--editing' : ''}`}\n      >\n        {isEditing ? (\n          <>\n            <input\n              ref={inputRef}\n              className='start-node__input start-node__input--label'\n              value={label}\n              onChange={handleLabelChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyDown}\n              placeholder='Título del inicio...'\n              maxLength={NODE_CONFIG.MAX_LABEL_LENGTH}\n              aria-label='Título del nodo de inicio'\n              autoFocus\n            />\n            <textarea\n              ref={textareaRef}\n              className='start-node__input start-node__input--dynamic-content'\n              value={dynamicContent}\n              onChange={handleDynamicContentChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyDown}\n              placeholder='Mensaje de inicio...'\n              maxLength={NODE_CONFIG.MAX_DYNAMIC_CONTENT_LENGTH}\n              aria-label='Contenido dinámico del nodo de inicio'\n              rows={3}\n            />\n          </>\n        ) : (\n          <div className='start-node__display-content'>\n            <p className='start-node__display-dynamic-content'>\n              {dynamicContent || NODE_CONFIG.DEFAULT_DYNAMIC_CONTENT}\n            </p>\n          </div>\n        )}\n\n        {errorMessage && (\n          <div className='start-node__error' role='alert'>\n            {errorMessage}\n          </div>\n        )}\n\n        {isUltraMode && !isEditing && (\n          <div className='start-node__ultra-indicator' aria-hidden='true'>\n            ULTRA\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nStartNodeContent.displayName = 'StartNodeContent';\n\n// Props para el componente principal StartNode, usando NodeProps de reactflow\ninterface StartNodeComponentProperties extends NodeProps {\n  lodLevel?: string; // lodLevel ahora es una prop de primer nivel\n  data: {\n    label?: string;\n    dynamicContent?: string;\n    isUltraPerformanceMode?: boolean;\n    lastModified?: string;\n    // Cualquier otro dato específico que StartNode espere\n  };\n}\n\nconst StartNodeComponent: React.FC<StartNodeComponentProperties> = ({\n  id,\n  data,\n  selected,\n\n  xPos,\n  yPos,\n}) => {\n  const { getNode } = useReactFlow();\n  const updateNodeData = useFlowStore((state) => state.updateNode);\n  const showContextMenu = useFlowStore((state) => state.showContextMenu);\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | undefined>();\n  const [currentLabel, setCurrentLabel] = useState<string>(\n    data.label || NODE_CONFIG.DEFAULT_LABEL,\n  );\n  const [currentDynamicContent, setCurrentDynamicContent] = useState<string>(\n    data.dynamicContent || NODE_CONFIG.DEFAULT_DYNAMIC_CONTENT,\n  );\n\n  // Sincronizar el estado local si las props cambian externamente\n  useEffect(() => {\n    setCurrentLabel(data.label || NODE_CONFIG.DEFAULT_LABEL);\n  }, [data.label]);\n\n  useEffect(() => {\n    setCurrentDynamicContent(\n      data.dynamicContent || NODE_CONFIG.DEFAULT_DYNAMIC_CONTENT,\n    );\n  }, [data.dynamicContent]);\n\n  const inputReference = useRef<HTMLInputElement>(null);\n  const textareaReference = useRef<HTMLTextAreaElement>(null); // Ref para el textarea\n  const nodeReference = useRef<HTMLDivElement>(null);\n\n  const isUltraMode =\n    useFlowStore((state) => state.isUltraMode) || data.isUltraPerformanceMode;\n\n  const debouncedUpdateNodeData = useMemo(\n    () =>\n      debounce((newLabel: string, newDynamicContent: string) => {\n        updateNodeData(id, {\n          label: newLabel,\n          dynamicContent: newDynamicContent,\n          lastModified: new Date().toISOString(),\n        });\n        setErrorMessage(undefined); // Limpiar errores en actualización exitosa\n      }, NODE_CONFIG.DEBOUNCE_DELAY),\n    [id, updateNodeData],\n  );\n\n  const handleSave = useCallback(() => {\n    if (currentLabel.trim() === '') {\n      setErrorMessage('El título no puede estar vacío.');\n      return;\n    }\n    if (currentDynamicContent.trim() === '') {\n      setErrorMessage('El contenido no puede estar vacío.');\n      return;\n    }\n    setErrorMessage(undefined);\n    debouncedUpdateNodeData(currentLabel, currentDynamicContent);\n    setIsEditing(false);\n  }, [\n    currentLabel,\n    currentDynamicContent,\n    debouncedUpdateNodeData,\n    setIsEditing,\n    setErrorMessage,\n  ]);\n\n  const handleLabelChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const newLabel = event.target.value;\n      setCurrentLabel(newLabel);\n      if (newLabel.length > NODE_CONFIG.MAX_LABEL_LENGTH) {\n        setErrorMessage(\n          `El nombre no puede exceder los ${NODE_CONFIG.MAX_LABEL_LENGTH} caracteres.`,\n        );\n        // No llamamos a debouncedUpdateNodeData si hay error de longitud\n        return;\n      }\n      setErrorMessage(undefined);\n      debouncedUpdateNodeData(newLabel, currentDynamicContent);\n    },\n    [\n      currentDynamicContent,\n      debouncedUpdateNodeData,\n      setCurrentLabel,\n      setErrorMessage,\n    ],\n  );\n\n  const handleDynamicContentChange = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      const newContent = event.target.value;\n      setCurrentDynamicContent(newContent);\n      if (newContent.length > NODE_CONFIG.MAX_DYNAMIC_CONTENT_LENGTH) {\n        setErrorMessage(\n          `El contenido dinámico no puede exceder los ${NODE_CONFIG.MAX_DYNAMIC_CONTENT_LENGTH} caracteres.`,\n        );\n        // No llamamos a debouncedUpdateNodeData si hay error de longitud\n        return;\n      }\n      setErrorMessage(undefined);\n      debouncedUpdateNodeData(currentLabel, newContent);\n    },\n    [\n      currentLabel,\n      debouncedUpdateNodeData,\n      setCurrentDynamicContent,\n      setErrorMessage,\n    ],\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      if (\n        event.key === 'Enter' &&\n        !(event.target as HTMLTextAreaElement).tagName\n          .toLowerCase()\n          .includes('textarea')\n      ) {\n        // Enter en input de título guarda\n        event.preventDefault();\n        handleSave();\n      } else if (event.key === 'Escape') {\n        setIsEditing(false);\n        setErrorMessage(undefined);\n      }\n    },\n    [handleSave, setIsEditing, setErrorMessage],\n  );\n\n  const handleNodeBlur = useCallback(() => {\n    // Usamos setTimeout para permitir que el nuevo foco se establezca antes de decidir si guardar.\n    setTimeout(() => {\n      const activeElement = document.activeElement;\n\n      // Si el foco sigue en el input o textarea, no hacemos nada.\n      if (\n        activeElement === inputReference.current ||\n        activeElement === textareaReference.current\n      ) {\n        return;\n      }\n\n      // Si el foco se movió a otro elemento dentro del nodo, tampoco hacemos nada.\n      if (\n        nodeReference.current &&\n        nodeReference.current.contains(activeElement as Node)\n      ) {\n        return;\n      }\n\n      // Si el foco está fuera del nodo y no en los campos de edición, guardamos.\n      if (isEditing) {\n        handleSave();\n      }\n    }, 0);\n  }, [handleSave, inputReference, textareaReference, nodeReference, isEditing]);\n\n  const handleDoubleClick = useCallback(() => {\n    setIsEditing(true);\n  }, []);\n\n  useEffect(() => {\n    if (isEditing && inputReference.current) {\n      inputReference.current.focus();\n      inputReference.current.select();\n    } else if (isEditing && textareaReference.current) {\n      // Si el input de título no está (raro), o si queremos focusear el textarea por defecto\n      // textareaRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const nodeStyle = useMemo(\n    () => ({\n      border: selected\n        ? `2px solid ${NODE_CONFIG.COLORS.SELECTED}`\n        : `1px solid ${NODE_CONFIG.COLORS.BORDER}`,\n      background: selected\n        ? NODE_CONFIG.COLORS.BACKGROUND_SELECTED\n        : NODE_CONFIG.COLORS.BACKGROUND,\n      boxShadow: selected\n        ? `0 0 15px ${NODE_CONFIG.COLORS.SHADOW}`\n        : `0 4px 8px ${NODE_CONFIG.COLORS.SHADOW}`,\n      minWidth: `${NODE_CONFIG.MIN_WIDTH}px`,\n      minHeight: `${NODE_CONFIG.MIN_HEIGHT}px`,\n      transition: `all ${NODE_CONFIG.TRANSITION_DURATION}ms ease-in-out`,\n    }),\n    [selected],\n  );\n\n  const handleContextMenu = useCallback(\n    (event: React.MouseEvent) => {\n      event.preventDefault();\n      const node = getNode(id);\n      if (!node) return;\n\n      showContextMenu({\n        x: event.clientX,\n        y: event.clientY,\n        nodeId: id,\n        items: [\n          { label: 'Editar Nodo', action: () => setIsEditing(true) },\n          {\n            label: 'Eliminar Nodo',\n            action: () => useFlowStore.getState().deleteNode(id),\n          },\n        ],\n      });\n    },\n    [id, getNode, showContextMenu, xPos, yPos],\n  );\n\n  return (\n    <Suspense fallback={<div>Cargando StartNode...</div>}>\n      <div\n        className={`start-node ${selected ? 'start-node--selected' : ''} ${isUltraMode ? 'start-node--ultra' : ''}`}\n        style={nodeStyle}\n        onDoubleClick={handleDoubleClick}\n        onContextMenu={handleContextMenu}\n        role={NODE_CONFIG.ACCESSIBILITY.ROLE}\n        aria-label={NODE_CONFIG.ACCESSIBILITY.ARIA_LABEL}\n        tabIndex={NODE_CONFIG.ACCESSIBILITY.TABINDEX}\n      >\n        <StartNodeHeader\n          label={currentLabel}\n          isEditing={isEditing}\n          isUltraMode={isUltraMode}\n          lastModified={data.lastModified}\n        />\n        <StartNodeContent\n          isEditing={isEditing}\n          label={currentLabel}\n          dynamicContent={currentDynamicContent}\n          inputRef={inputReference}\n          textareaRef={textareaReference}\n          handleLabelChange={handleLabelChange}\n          handleDynamicContentChange={handleDynamicContentChange}\n          handleKeyDown={handleKeyDown}\n          handleBlur={handleNodeBlur}\n          isUltraMode={isUltraMode}\n          errorMessage={errorMessage}\n        />\n        <Handle\n          type='source'\n          position={Position.Right}\n          id='output'\n          className='start-node__handle start-node__handle--source'\n          isConnectable\n          aria-label='Punto de conexión de salida'\n        />\n      </div>\n      <ContextMenu />\n    </Suspense>\n  );\n};\n\n// Custom comparison function for memoization to prevent unnecessary re-renders\nconst areStartNodePropertiesEqual = (\n  previousProperties: Readonly<StartNodeComponentProperties>,\n  nextProperties: Readonly<StartNodeComponentProperties>,\n) => {\n  // Comparamos las props que realmente afectan al renderizado.\n  const dataChanged =\n    previousProperties.data.label !== nextProperties.data.label ||\n    previousProperties.data.dynamicContent !==\n      nextProperties.data.dynamicContent ||\n    previousProperties.data.lastModified !== nextProperties.data.lastModified;\n\n  const lodChanged = previousProperties.lodLevel !== nextProperties.lodLevel;\n\n  // El nodo solo debe re-renderizarse si su estado de selección, sus datos internos o el nivel de detalle (LOD) cambian.\n  // xPos y yPos son manejados por la transformación CSS de React Flow, no necesitan causar un re-render del componente interno.\n  return (\n    previousProperties.selected === nextProperties.selected &&\n    !dataChanged &&\n    !lodChanged\n  );\n};\n\nconst MemoizedStartNode = memo(StartNodeComponent, areStartNodePropertiesEqual);\nMemoizedStartNode.displayName = 'StartNode';\n\nexport default MemoizedStartNode;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/nodes/startnode/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/screens/FactoryScreen.jsx",
    "messages": [
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'AnimatePresence'.",
        "line": 2,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 2,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [59, 76], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'useMemo'.",
        "line": 3,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 3,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [129, 138], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (205). Maximum allowed is 80.",
        "line": 19,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 241,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 34,
        "column": 33,
        "nodeType": "MemberExpression",
        "endLine": 34,
        "endColumn": 55
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 37,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 37,
        "endColumn": 33
      },
      {
        "ruleId": "unicorn/consistent-function-scoping",
        "severity": 2,
        "message": "Move async arrow function 'particlesInit' to the outer scope.",
        "line": 63,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "consistent-function-scoping",
        "endLine": 63,
        "endColumn": 42
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 118,
        "column": 18,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 118,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Particles from '@tsparticles/react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport plubotImage from '@/assets/img/plubot.svg';\n\nimport usePlubotCreation from '../../../hooks/usePlubotCreation';\n\nimport './FactoryScreen.css';\n\n// Se mueve el array de mensajes fuera del componente para evitar que se recree en cada render.\nconst MESSAGES = [\n  '¡Hola, Creador!',\n  'Bienvenido a la Fábrica de Bots',\n  'Es hora de crear tu asistente personal',\n];\n\nconst FactoryScreen = () => {\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [messageIndex, setMessageIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(true);\n  const navigate = useNavigate();\n  const { nextStep } = usePlubotCreation();\n\n  // Efecto de typewriter para mensajes de Plubot\n  useEffect(() => {\n    // Si no está escribiendo, no se hace nada y se retorna para cumplir consistent-return.\n    if (!isTyping) {\n      return;\n    }\n\n    // Lógica para avanzar el texto del typewriter\n    if (currentMessage.length < MESSAGES[messageIndex].length) {\n      const timeout = setTimeout(() => {\n        setCurrentMessage(\n          MESSAGES[messageIndex].slice(\n            0,\n            Math.max(0, currentMessage.length + 1),\n          ),\n        );\n      }, 50);\n      return () => clearTimeout(timeout);\n    }\n\n    // Lógica para pasar al siguiente mensaje\n    setIsTyping(false);\n    const timeout = setTimeout(() => {\n      if (messageIndex < MESSAGES.length - 1) {\n        setMessageIndex(messageIndex + 1);\n        setCurrentMessage('');\n        setIsTyping(true);\n      }\n    }, 2000);\n    return () => clearTimeout(timeout);\n  }, [currentMessage, messageIndex, isTyping]);\n\n  const handleNext = () => {\n    nextStep();\n    navigate('/personalization');\n  };\n\n  const particlesInit = async (engine) => {\n    const { loadSlim } = await import('@tsparticles/slim');\n    await loadSlim(engine);\n  };\n\n  return (\n    <div className='factory-screen'>\n      <Particles\n        id='tsparticles'\n        init={particlesInit}\n        options={{\n          fullScreen: { enable: true },\n          background: {\n            color: {\n              value: '#000',\n            },\n          },\n          particles: {\n            number: { value: 80 },\n            color: { value: ['#00e0ff', '#ff00ff'] },\n            shape: { type: 'circle' },\n            opacity: { value: 0.4, random: true },\n            size: { value: { min: 1, max: 5 }, random: true },\n            move: {\n              enable: true,\n              speed: 1,\n              direction: 'none',\n              outModes: 'out',\n            },\n            links: {\n              enable: true,\n              distance: { min: 100, max: 200 },\n              color: '#00e0ff',\n              opacity: 0.2,\n              width: 1,\n            },\n          },\n          responsive: [\n            {\n              breakpoint: 768,\n              options: {\n                particles: {\n                  number: { value: 40 },\n                  size: { value: { min: 0.5, max: 3 } },\n                  links: { distance: { min: 50, max: 100 } },\n                },\n              },\n            },\n          ],\n        }}\n      />\n\n      <div className='cosmic-grid'>\n        {Array.from({ length: 20 }).map((_, index) => (\n          <div\n            key={`grid-line-${index}`}\n            className='grid-line'\n            style={{ top: `${5 * (index + 1)}%` }}\n          />\n        ))}\n      </div>\n\n      <motion.div\n        className='factory-container'\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 1.5 }}\n      >\n        <motion.div\n          className='plubot-section'\n          initial={{ opacity: 0, x: -50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 1, delay: 0.5 }}\n        >\n          <motion.div\n            className='plubot-hologram'\n            animate={{\n              y: [0, -10, 0],\n              rotateY: [0, 5, 0, -5, 0],\n            }}\n            transition={{\n              repeat: Infinity,\n              duration: 4,\n              ease: 'easeInOut',\n            }}\n          >\n            <div className='hologram-circles'>\n              <div className='hologram-circle circle1' />\n              <div className='hologram-circle circle2' />\n              <div className='hologram-circle circle3' />\n            </div>\n            <motion.img\n              src={plubotImage}\n              alt='Plubot'\n              className='plubot-image'\n              style={{ width: '100%', height: '100%' }}\n            />\n          </motion.div>\n\n          <motion.div className='message-box'>\n            <div className='message-header'>\n              <div className='message-dots'>\n                <div className='message-dot' />\n                <div className='message-dot' />\n                <div className='message-dot' />\n              </div>\n              <div className='message-title'>PLUBOT v1.0</div>\n            </div>\n            <div className='message-content'>\n              <span className='cursor'>&gt;</span> {currentMessage}\n              <span className='blink'>_</span>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        <motion.div\n          className='creation-panel'\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 0.8 }}\n        >\n          <h1 className='panel-title'>Fábrica de Bots</h1>\n          <div className='panel-description'>\n            Diseña y crea tu asistente digital personalizado que trabajará\n            contigo y para ti.\n          </div>\n\n          <div className='feature-cards'>\n            <motion.div\n              className='feature-card'\n              whileHover={{\n                scale: 1.05,\n                boxShadow: '0 0 15px rgba(0, 224, 255, 0.8)',\n              }}\n            >\n              <div className='feature-icon personality' />\n              <div className='feature-name'>Personalidad</div>\n            </motion.div>\n\n            <motion.div\n              className='feature-card'\n              whileHover={{\n                scale: 1.05,\n                boxShadow: '0 0 15px rgba(0, 224, 255, 0.8)',\n              }}\n            >\n              <div className='feature-icon skills' />\n              <div className='feature-name'>Habilidades</div>\n            </motion.div>\n\n            <motion.div\n              className='feature-card'\n              whileHover={{\n                scale: 1.05,\n                boxShadow: '0 0 15px rgba(0, 224, 255, 0.8)',\n              }}\n            >\n              <div className='feature-icon appearance' />\n              <div className='feature-name'>Apariencia</div>\n            </motion.div>\n          </div>\n\n          <motion.button\n            className='create-button'\n            onClick={handleNext}\n            whileHover={{\n              scale: 1.05,\n              boxShadow: '0 0 20px #00e0ff, 0 0 40px rgba(255, 0, 255, 0.5)',\n            }}\n            whileTap={{ scale: 0.95 }}\n          >\n            Iniciar Creación\n            <div className='button-glow' />\n          </motion.button>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default FactoryScreen;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/screens/PersonalizationForm.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (933). Maximum allowed is 80.",
        "line": 16,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 1044,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 16. Maximum allowed is 10.",
        "line": 16,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1044,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'errorMessage' variable.",
        "line": 27,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 27,
        "endColumn": 22
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"errorMessage\".",
        "line": 27,
        "column": 10,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 27,
        "endColumn": 22
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'user' variable.",
        "line": 42,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 42,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"user\".",
        "line": 42,
        "column": 11,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 42,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'updateProfile' variable.",
        "line": 42,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 42,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"updateProfile\".",
        "line": 42,
        "column": 17,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 42,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'source' variable.",
        "line": 46,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 46,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"source\".",
        "line": 46,
        "column": 9,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 46,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "The 'personalityMessages' object makes the dependencies of useMemo Hook (at line 362) change on every render. To fix this, wrap the initialization of 'personalityMessages' in its own useMemo() Hook.",
        "line": 90,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 133,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 22. Maximum allowed is 10.",
        "line": 168,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 228,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
        "line": 168,
        "column": 16,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 168,
        "endColumn": 18
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'powers' is already declared in the upper scope on line 9 column 10.",
        "line": 178,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 178,
        "endColumn": 44
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 183,
        "column": 36,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 187,
        "endColumn": 19
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 185,
        "column": 15,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 187,
        "endColumn": 19
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 259,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 259,
        "endColumn": 47
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Function Call Object Injection Sink",
        "line": 264,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 264,
        "endColumn": 43
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.",
        "line": 267,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 267,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeSection, messages]",
            "fix": { "range": [8794, 8809], "text": "[activeSection, messages]" }
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 277,
        "column": 28,
        "nodeType": "MemberExpression",
        "endLine": 277,
        "endColumn": 51
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.",
        "line": 287,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 287,
        "endColumn": 44,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isTyping, currentChar, activeSection, messages]",
            "fix": {
              "range": [9490, 9528],
              "text": "[isTyping, currentChar, activeSection, messages]"
            }
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 289,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 289,
        "endColumn": 31
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 365,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 395,
        "endColumn": 6
      },
      {
        "ruleId": "unicorn/prefer-structured-clone",
        "severity": 2,
        "message": "Prefer `structuredClone(…)` over `JSON.parse(JSON.stringify(…))` to create a deep clone.",
        "line": 380,
        "column": 34,
        "nodeType": "CallExpression",
        "messageId": "prefer-structured-clone/error",
        "endLine": 381,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "prefer-structured-clone/suggestion",
            "fix": {
              "range": [12568, 12628],
              "text": "structuredClone(\n            profileResponse.user"
            },
            "data": { "description": "JSON.parse(JSON.stringify(…))" },
            "desc": "Switch to `structuredClone(…)`."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 388,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 388,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [12742, 12797], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 400,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 446,
        "endColumn": 6
      },
      {
        "ruleId": "no-unreachable",
        "severity": 2,
        "message": "Unreachable code.",
        "line": 413,
        "column": 9,
        "nodeType": "ExpressionStatement",
        "messageId": "unreachableCode",
        "endLine": 424,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'isOfflineMode' is not defined.",
        "line": 414,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 414,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'newPlubotId' is not defined.",
        "line": 422,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 422,
        "endColumn": 68
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has an unnecessary dependency: 'updatePlubotData'. Either exclude it or remove the dependency array.",
        "line": 447,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 454,
        "endColumn": 6,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [createBot, nextStep, navigate, personalityMessages, setMessageText]",
            "fix": {
              "range": [14607, 14736],
              "text": "[createBot, nextStep, navigate, personalityMessages, setMessageText]"
            }
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'handleRecoverableError' variable.",
        "line": 458,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 458,
        "endColumn": 31
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"handleRecoverableError\".",
        "line": 458,
        "column": 9,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 458,
        "endColumn": 31
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 16. Maximum allowed is 10.",
        "line": 499,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 570,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.",
        "line": 499,
        "column": 36,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 499,
        "endColumn": 38
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 546,
        "column": 15,
        "nodeType": "IfStatement",
        "messageId": "tooDeeply",
        "endLine": 551,
        "endColumn": 16
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (212). Maximum allowed is 80.",
        "line": 593,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 805,
        "endColumn": 4
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 16. Maximum allowed is 10.",
        "line": 593,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 805,
        "endColumn": 4
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 802,
        "column": 16,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 802,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [26174, 26178], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [26174, 26178], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/consistent-function-scoping",
        "severity": 2,
        "message": "Move async arrow function 'particlesInit' to the outer scope.",
        "line": 807,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "consistent-function-scoping",
        "endLine": 807,
        "endColumn": 42
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 854,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 854,
        "endColumn": 27
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 857,
        "column": 33,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 857,
        "endColumn": 46
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 858,
        "column": 36,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 858,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 859,
        "column": 32,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 859,
        "endColumn": 45
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 869,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 869,
        "endColumn": 26
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 914,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 914,
        "endColumn": 31
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 952,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 952,
        "endColumn": 29
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 961,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 961,
        "endColumn": 29
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 1026,
        "column": 16,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 1037,
        "endColumn": 16
      },
      {
        "ruleId": "no-nested-ternary",
        "severity": 2,
        "message": "Do not nest ternary expressions.",
        "line": 1031,
        "column": 19,
        "nodeType": "ConditionalExpression",
        "messageId": "noNestedTernary",
        "endLine": 1037,
        "endColumn": 16
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 1031,
        "column": 19,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 1037,
        "endColumn": 16
      },
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 1033,
        "column": 19,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 1037,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 46,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Particles from '@tsparticles/react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { useNavigate, Link, useParams, useLocation } from 'react-router-dom';\n\nimport byteImage from '@/assets/img/byte.png';\nimport plubotImage from '@/assets/img/plubot.svg';\nimport proLogo from '@/assets/img/plubotpro.svg';\nimport { powers } from '@/data/powers.js';\nimport './PersonalizationForm.css';\nimport useAPI from '@/hooks/useAPI';\nimport useAuthStore from '@/stores/use-auth-store';\n\nimport usePlubotCreation from '../../../hooks/usePlubotCreation';\n\nconst PersonalizationForm = () => {\n  // Estados de UI y animación\n  const [progress, setProgress] = useState(25);\n  const [showParticleEffect, setShowParticleEffect] = useState(false);\n  const [energyLevel, setEnergyLevel] = useState(0);\n  const [hologramRotation, setHologramRotation] = useState(0);\n  const [messageText, setMessageText] = useState('');\n  const [isTyping, setIsTyping] = useState(true);\n  const [currentChar, setCurrentChar] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nameInput, setNameInput] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Referencias y hooks\n  const containerReference = useRef(null);\n  const previousPlubotIdReference = useRef(null);\n  const {\n    plubotData,\n    updatePlubotData,\n    nextStep,\n    activeSection,\n    updateActiveSection,\n    resetPlubotCreation,\n  } = usePlubotCreation();\n  const navigate = useNavigate();\n  const { request, createBot } = useAPI();\n  const { user, updateProfile, setUser } = useAuthStore();\n\n  // Obtener el ID del plubot y la fuente de navegación\n  const { plubotId } = useParams();\n  const source = useLocation().search || '';\n  const isEditMode = Boolean(plubotId);\n\n  // Nuevas personalidades (todas elegibles)\n  const personalities = [\n    {\n      type: 'Audaz',\n      description: 'Divertido, irreverente y dinámico',\n      icon: '⚡',\n      color: '#FF6B00',\n    },\n    {\n      type: 'Sabio',\n      description: 'Formal, calmado y profesional',\n      icon: '📘',\n      color: '#1E3A8A',\n    },\n    {\n      type: 'Servicial',\n      description: 'Amable, directo y cordial',\n      icon: '🤝',\n      color: '#22C55E',\n    },\n    {\n      type: 'Creativo',\n      description: 'Expresivo, entusiasta y espontáneo',\n      icon: '🎨',\n      color: '#A855F7',\n    },\n    {\n      type: 'Neutral',\n      description: 'Sobrio, objetivo y neutro',\n      icon: '⚖️',\n      color: '#D1D5DB',\n    },\n    {\n      type: 'Misterioso',\n      description: 'Enigmático, elegante y curioso',\n      icon: '🕵️',\n      color: '#1F2937',\n    },\n  ];\n\n  // Mensajes contextuales para cada personalidad\n  const personalityMessages = {\n    audaz: {\n      welcome: '¡Hey crack! ¿Listo para la acción?',\n      bye: '¡Nos vemos, leyenda! No tardes en volver.',\n      error: 'Oops… algo explotó, pero tranquilo, ya lo arreglo.',\n      confirmation: '¡Hecho! Rapidísimo como siempre.',\n      farewell: '¡Chau chau, campeón!',\n    },\n    sabio: {\n      welcome: 'Saludos. Es un honor atenderte.',\n      bye: 'Gracias por tu tiempo. Hasta pronto.',\n      error: 'Lamento el inconveniente. Procedo a corregirlo.',\n      confirmation: 'Confirmado. Todo está en orden.',\n      farewell: 'Que tengas un excelente día.',\n    },\n    servicial: {\n      welcome: '¡Hola! ¿En qué puedo ayudarte hoy?',\n      bye: 'Me despido, pero recuerda que siempre estoy cerca.',\n      error: '¡Oh no! Déjame arreglar eso para ti.',\n      confirmation: 'Perfecto, ya está todo listo.',\n      farewell: '¡Un gusto haberte asistido!',\n    },\n    creativo: {\n      welcome: '¡Wiii! Llegaste. Vamos a crear magia.',\n      bye: '¡Chau chau, nos vemos en la próxima locura!',\n      error: 'Uy… algo salió raro. ¡Pero lo convertimos en arte!',\n      confirmation: '¡Listo! Esto va a quedar épico.',\n      farewell: '¡Nos vemos! Que las ideas no te falten.',\n    },\n    neutral: {\n      welcome: 'Hola, ¿cómo puedo asistirte?',\n      bye: 'Sesión finalizada. Hasta luego.',\n      error: 'Hubo un error. Procedo a solucionarlo.',\n      confirmation: 'Acción completada correctamente.',\n      farewell: 'Gracias por usar Plubot.',\n    },\n    misterioso: {\n      welcome: 'Te esperaba… dime, ¿qué buscas?',\n      bye: 'Nos volveremos a cruzar. Lo sé.',\n      error: 'Un contratiempo… déjame encargarme.',\n      confirmation: 'Todo está en marcha. Como debía ser.',\n      farewell: 'Desaparezco… por ahora.',\n    },\n  };\n\n  const freePowers = new Set([\n    'notion',\n    'slack',\n    'trello',\n    'google-sheets',\n    'github',\n    'typeform',\n    'discord',\n    'asana',\n    'monday',\n    'zoom',\n    'instagram',\n    'google-analytics',\n    'hubspot',\n  ]);\n\n  const messages = {\n    name: plubotId\n      ? 'Edita el nombre de tu Plubot para reflejar su nueva identidad.'\n      : 'Dale un nombre único a tu Plubot Despierto. ¡Este será su identidad en el Pluniverse!',\n    personality: plubotId\n      ? 'Ajusta la personalidad de tu Plubot para cambiar cómo interactúa.'\n      : 'Elige una personalidad para tu Plubot. Define cómo interactuará con el mundo.',\n    powers: plubotId\n      ? 'Modifica los poderes de tu Plubot para adaptarlo a nuevas tareas.'\n      : 'Selecciona poderes gratuitos para tu Plubot. Los poderes Pro desbloquean integraciones avanzadas.',\n    preview: plubotId\n      ? '¡Tu Plubot está actualizado! Revisa los cambios antes de guardar.'\n      : '¡Tu Plubot Despierto está listo! Actívalo para configurar sus respuestas.',\n  };\n\n  // Función para cargar datos del Plubot\n  const fetchPlubotData = useCallback(\n    async (id) => {\n      if (!id) return false;\n\n      setIsLoading(true);\n      setErrorMessage('');\n\n      try {\n        const response = await request('GET', `/plubots/${id}`);\n\n        if (response?.status === 'success' && response?.plubot) {\n          const { name, tone, color, powers, purpose, initial_message } =\n            response.plubot;\n\n          // Normalizar datos para evitar valores nulos o indefinidos\n          const normalizedTone = tone ? tone.toLowerCase() : 'neutral';\n          const normalizedPowers = Array.isArray(powers)\n            ? powers\n            : typeof powers === 'string'\n              ? powers.split(',').filter(Boolean)\n              : [];\n\n          // Actualizar el contexto con datos completos\n          updatePlubotData({\n            id,\n            name: name || '',\n            tone: normalizedTone,\n            color: color || '#D1D5DB',\n            powers: normalizedPowers,\n            purpose: purpose || 'asistir a los clientes en chat web',\n            initial_message: initial_message || '',\n          });\n\n          // Actualizar estados locales\n          setNameInput(name || '');\n          setEnergyLevel(name ? Math.min(name.length * 10, 100) : 0);\n\n          return true;\n        } else {\n          const errorMessage_ =\n            response?.message || 'Error desconocido al cargar datos';\n\n          setMessageText(`Error al cargar el Plubot: ${errorMessage_}`);\n          return false;\n        }\n      } catch (error) {\n        // Manejar errores específicos\n        if (error.message?.includes('404')) {\n          setErrorMessage('Plubot no encontrado');\n          setMessageText('Plubot no encontrado. Verifica el ID del Plubot.');\n        } else {\n          setErrorMessage(error.message || 'Error de conexión');\n          setMessageText(\n            `Error al cargar el Plubot: ${error.message || 'Error de conexión'}`,\n          );\n        }\n\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [request, updatePlubotData, setMessageText],\n  );\n\n  // Efecto para cargar datos del Plubot en modo edición o reiniciar en modo creación\n  useEffect(() => {\n    // Evitar recargas innecesarias si el ID no ha cambiado\n    if (previousPlubotIdReference.current === plubotId) return;\n    previousPlubotIdReference.current = plubotId;\n\n    if (plubotId) {\n      // Modo edición: cargar datos del Plubot existente\n      updateActiveSection('name');\n      setProgress(25);\n      fetchPlubotData(plubotId);\n    } else {\n      // Modo creación: reiniciar el contexto\n      resetPlubotCreation();\n      setNameInput('');\n      setProgress(25);\n    }\n  }, [plubotId, fetchPlubotData, updateActiveSection, resetPlubotCreation]);\n\n  // Sincronizar progress con activeSection\n  useEffect(() => {\n    const sectionProgress = {\n      name: 25,\n      personality: 50,\n      powers: 75,\n      preview: 100,\n    };\n    setProgress(sectionProgress[activeSection] || 25);\n  }, [activeSection]);\n\n  // Actualizar mensaje basado en activeSection\n  useEffect(() => {\n    setMessageText(messages[activeSection]);\n    setIsTyping(true);\n    setCurrentChar(0);\n  }, [activeSection]);\n\n  useEffect(() => {\n    const rotationInterval = setInterval(() => {\n      setHologramRotation((previous) => (previous + 0.5) % 360);\n    }, 100);\n    return () => clearInterval(rotationInterval);\n  }, []);\n\n  useEffect(() => {\n    const currentMessage = messages[activeSection] || '';\n    if (isTyping && currentChar < currentMessage.length) {\n      const typingTimeout = setTimeout(() => {\n        setMessageText(currentMessage.slice(0, Math.max(0, currentChar + 1)));\n        setCurrentChar((previous) => previous + 1);\n      }, 30);\n      return () => clearTimeout(typingTimeout);\n    } else if (currentChar >= currentMessage.length) {\n      setIsTyping(false);\n    }\n  }, [isTyping, currentChar, activeSection]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === 'name') {\n      setNameInput(value);\n      setEnergyLevel(Math.min(value.length * 10, 100));\n    } else {\n      updatePlubotData({ [name]: value });\n    }\n  };\n\n  const handlePersonalitySelect = (personality) => {\n    updatePlubotData({\n      tone: personality.type.toLowerCase(),\n      color: personality.color,\n    });\n    setShowParticleEffect(true);\n    setTimeout(() => setShowParticleEffect(false), 1500);\n  };\n\n  const handlePowerToggle = (powerId) => {\n    if (freePowers.has(powerId)) {\n      const currentPowers = plubotData.powers || [];\n      const newPowers = currentPowers.includes(powerId)\n        ? currentPowers.filter((id) => id !== powerId)\n        : [...currentPowers, powerId];\n      updatePlubotData({ powers: newPowers });\n    }\n  };\n\n  // Validar datos del formulario según la sección actual\n  const validateCurrentSection = useCallback(() => {\n    switch (activeSection) {\n      case 'name': {\n        if (!nameInput.trim()) {\n          setErrorMessage('Nombre requerido');\n          setMessageText('Por favor, dale un nombre a tu Plubot.');\n          return false;\n        }\n        return true;\n      }\n      case 'personality': {\n        if (!plubotData.tone) {\n          setErrorMessage('Personalidad requerida');\n          setMessageText('Por favor, selecciona una personalidad.');\n          return false;\n        }\n        return true;\n      }\n      case 'powers':\n      case 'preview': {\n        return true;\n      }\n      default: {\n        return false;\n      }\n    }\n  }, [activeSection, nameInput, plubotData.tone, setMessageText]);\n\n  // Preparar payload para guardar o actualizar Plubot\n  const preparePlubotPayload = useMemo(() => {\n    return {\n      name: plubotData.name || nameInput,\n      tone: plubotData.tone || 'neutral',\n      color: plubotData.color || '#D1D5DB',\n      purpose: plubotData.purpose || 'asistir a los clientes en chat web',\n      initial_message:\n        personalityMessages[plubotData.tone?.toLowerCase()]?.welcome ||\n        '¡Hola! Soy tu Plubot Despierto, aquí para ayudarte.',\n      powers: plubotData.powers || [],\n      plan: 'free',\n      limits: { responsesPerMonth: 100, channels: ['webchat'] },\n    };\n  }, [plubotData, nameInput, personalityMessages]);\n\n  const updateExistingPlubot = useCallback(\n    async (id, payload) => {\n      try {\n        const response = await request('PUT', `/plubots/update/${id}`, payload);\n\n        if (response?.status !== 'success') {\n          throw new Error(response?.message || 'Error al actualizar el Plubot');\n        }\n\n        // Forzar recarga de datos del perfil para asegurar consistencia (con cache-busting)\n        const profileResponse = await request(\n          'GET',\n          `/auth/profile?t=${Date.now()}`,\n        );\n        if (profileResponse?.status === 'success' && profileResponse?.user) {\n          // Crear una copia profunda para garantizar la reactividad de Zustand/React\n          const deepClonedUser = JSON.parse(\n            JSON.stringify(profileResponse.user),\n          );\n          setUser(deepClonedUser);\n        }\n\n        return true;\n      } catch (error) {\n        console.error('Error al actualizar el Plubot:', error);\n        setErrorMessage(error.message || 'Error al actualizar');\n        setMessageText(\n          `Error al actualizar: ${error.message || 'Error desconocido'}`,\n        );\n        return false;\n      }\n    },\n    [request, setUser, setErrorMessage, setMessageText],\n  );\n\n  const createNewPlubot = useCallback(\n    async (payload) => {\n      try {\n        const response = await createBot(payload);\n\n        if (!response || !response.success) {\n          throw new Error(\n            response?.message || 'Error desconocido del servidor',\n          );\n        }\n\n        return response.plubot; // Devuelve el objeto plubot completo\n\n        // Mostrar mensaje apropiado\n        setMessageText(\n          isOfflineMode\n            ? '¡Plubot creado localmente! Se sincronizará cuando haya conexión.'\n            : personalityMessages[payload.tone]?.confirmation ||\n                '¡Plubot creado con éxito!',\n        );\n\n        // Avanzar al siguiente paso y navegar a TrainingScreen\n        nextStep();\n        setTimeout(() => navigate(`/training?plubotId=${newPlubotId}`), 500);\n\n        return true;\n      } catch (error) {\n        setErrorMessage(error.message || 'Error al crear');\n        setMessageText(\n          `Error al crear el Plubot: ${error.message || 'Error desconocido'}`,\n        );\n\n        // Guardar datos para recuperación futura\n        try {\n          const failedPlubots = JSON.parse(\n            localStorage.getItem('failed_plubots') || '[]',\n          );\n          failedPlubots.push({\n            data: payload,\n            timestamp: new Date().toISOString(),\n            error: error.message || 'Error desconocido',\n          });\n          localStorage.setItem('failed_plubots', JSON.stringify(failedPlubots));\n        } catch {}\n\n        return false;\n      }\n    },\n    [\n      createBot,\n      updatePlubotData,\n      nextStep,\n      navigate,\n      personalityMessages,\n      setMessageText,\n    ],\n  );\n\n  // Manejar errores recuperables durante la creación\n  const handleRecoverableError = useCallback(\n    (payload, response) => {\n      // Crear ID temporal y objeto recuperado\n      const temporaryId = `local_${Date.now()}`;\n      const recoveredPlubot = {\n        id: temporaryId,\n        name: payload.name,\n        tone: payload.tone,\n        color: payload.color,\n        purpose: payload.purpose,\n        initial_message: payload.initial_message,\n        powers: Array.isArray(payload.powers)\n          ? payload.powers.join(',')\n          : payload.powers,\n        _recoveryPending: true,\n      };\n\n      // Actualizar contexto con datos recuperados\n      updatePlubotData({\n        ...recoveredPlubot,\n        powers: payload.powers,\n        flowData: { nodes: [], edges: [] },\n        flowVersions: [],\n      });\n\n      setMessageText(\n        'Se ha producido un error, pero tus datos están seguros. Continuando en modo de recuperación.',\n      );\n      nextStep();\n\n      // Navegar a TrainingScreen con modo de recuperación\n      setTimeout(\n        () => navigate(`/training?plubotId=${temporaryId}&recovery=true`),\n        500,\n      );\n      return true;\n    },\n    [updatePlubotData, nextStep, navigate, setMessageText],\n  );\n\n  // Función principal para avanzar a la siguiente sección\n  const goToNextSection = async () => {\n    // Validar la sección actual antes de avanzar\n    if (!validateCurrentSection()) {\n      return;\n    }\n\n    // Manejar la navegación entre secciones\n    switch (activeSection) {\n      case 'name': {\n        // Actualizar datos y avanzar a personalidad\n        updatePlubotData({ name: nameInput });\n        updateActiveSection('personality');\n\n        break;\n      }\n      case 'personality': {\n        // Avanzar a poderes\n        updateActiveSection('powers');\n\n        break;\n      }\n      case 'powers': {\n        // Avanzar a vista previa\n        updateActiveSection('preview');\n\n        break;\n      }\n      case 'preview': {\n        // Guardar o actualizar el Plubot\n        setIsLoading(true);\n        setErrorMessage('');\n\n        const finalPayload = preparePlubotPayload;\n\n        try {\n          if (isEditMode) {\n            const success = await updateExistingPlubot(plubotId, finalPayload);\n            if (success) {\n              setMessageText('¡Plubot actualizado con éxito!');\n              setTimeout(() => navigate('/profile'), 1500);\n            } else {\n              throw new Error('La actualización en el servidor falló.');\n            }\n          } else {\n            const newPlubot = await createNewPlubot(finalPayload);\n            if (newPlubot) {\n              const profileResponse = await request('GET', '/auth/profile');\n              if (\n                profileResponse?.status === 'success' &&\n                profileResponse?.user\n              ) {\n                setUser(profileResponse.user);\n              }\n              navigate(`/plubot/edit/flow/${newPlubot.id}?source=onboarding`);\n            } else {\n              throw new Error('La creación del Plubot falló.');\n            }\n          }\n        } catch (error) {\n          setErrorMessage(error.message || 'Ocurrió un error inesperado.');\n          setMessageText(\n            `Error: ${error.message || 'Ocurrió un error inesperado.'}`,\n          );\n        } finally {\n          setIsLoading(false);\n        }\n\n        break;\n      }\n      // No default\n    }\n  };\n\n  const goToPreviousSection = () => {\n    switch (activeSection) {\n      case 'personality': {\n        updateActiveSection('name');\n\n        break;\n      }\n      case 'powers': {\n        updateActiveSection('personality');\n\n        break;\n      }\n      case 'preview': {\n        updateActiveSection('powers');\n\n        break;\n      }\n      // No default\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading && activeSection === 'name') {\n      return (\n        <motion.div\n          className='creation-section loading-section'\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className='loading-spinner'>Cargando datos del Plubot...</div>\n        </motion.div>\n      );\n    }\n\n    switch (activeSection) {\n      case 'name': {\n        return (\n          <motion.div\n            className='creation-section name-section'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <h2 className='section-title'>Identidad Digital</h2>\n            <div className='input-container'>\n              <input\n                type='text'\n                name='name'\n                value={nameInput}\n                onChange={handleInputChange}\n                placeholder='Nombre de tu Plubot'\n                className='plubot-input'\n                maxLength={20}\n              />\n              <div className='input-underline' />\n            </div>\n            <div className='plan-info'>\n              <p>\n                Estás {plubotId ? 'editando un' : 'creando un'}{' '}\n                <strong>Plubot Despierto Gratuito</strong>:\n              </p>\n              <ul>\n                <li>Respuestas automáticas en chat web</li>\n                <li>Menú con hasta 3 botones</li>\n                <li>Recolección de nombre, correo y motivo</li>\n                <li>Límite de 100 respuestas/mes</li>\n              </ul>\n              <Link to='/pricing' className='plan-upgrade-link'>\n                ¡Explora el plan Pro para más poderes!\n              </Link>\n            </div>\n          </motion.div>\n        );\n      }\n      case 'personality': {\n        return (\n          <motion.div\n            className='creation-section personality-section'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <h2 className='section-title'>Núcleo de Personalidad</h2>\n            <div className='personality-grid'>\n              {personalities.map((p) => (\n                <motion.div\n                  key={p.type}\n                  className={`personality-card ${\n                    plubotData.tone === p.type.toLowerCase() ? 'selected' : ''\n                  }`}\n                  onClick={() => handlePersonalitySelect(p)}\n                  whileHover={{ scale: 1.03 }}\n                  style={{ borderColor: p.color }}\n                >\n                  <div\n                    className='personality-icon'\n                    style={{ backgroundColor: p.color }}\n                  >\n                    {p.icon}\n                  </div>\n                  <h3>{p.type}</h3>\n                  <p>{p.description}</p>\n                  {plubotData.tone === p.type.toLowerCase() && (\n                    <div className='checkmark-overlay'>✔</div>\n                  )}\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        );\n      }\n      case 'powers': {\n        return (\n          <motion.div\n            className='creation-section powers-section'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <h2 className='section-title'>Poderes del Plubot</h2>\n            <div className='powers-grid'>\n              {powers.map((power) => (\n                <motion.div\n                  key={power.id}\n                  className={`power-card ${freePowers.has(power.id) ? '' : 'disabled'} ${\n                    plubotData.powers?.includes(power.id) ? 'selected' : ''\n                  }`}\n                  onClick={() => handlePowerToggle(power.id)}\n                  whileHover={{ scale: 1.03 }}\n                >\n                  <img\n                    src={power.image}\n                    alt={power.title}\n                    className='power-image'\n                  />\n                  <div className='text-overlay'>\n                    <h3>{power.title}</h3>\n                    <p>{power.description}</p>\n                  </div>\n                  {!freePowers.has(power.id) && (\n                    <div className='pro-overlay'>\n                      <img\n                        src={proLogo}\n                        alt='Pro Feature'\n                        className='pro-logo'\n                      />\n                      <span>Requiere Plan Pro</span>\n                    </div>\n                  )}\n                  {plubotData.powers?.includes(power.id) &&\n                    freePowers.has(power.id) && (\n                      <div className='power-active-indicator'>\n                        <div className='power-pulse' />\n                      </div>\n                    )}\n                </motion.div>\n              ))}\n            </div>\n            <div className='marketplace-preview'>\n              <p>\n                ¿Quieres más poderes?{' '}\n                <Link to='/marketplace'>Explora el Marketplace</Link> (requiere\n                plan Pro para algunos).\n              </p>\n            </div>\n          </motion.div>\n        );\n      }\n      case 'preview': {\n        return (\n          <motion.div\n            className='creation-section preview-section'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <h2 className='section-title'>\n              {plubotId ? 'Revisión de Cambios' : 'Activación Final'}\n            </h2>\n            <div className='preview-info'>\n              <div className='preview-stat'>\n                <span className='stat-label'>Nombre:</span>\n                <span className='stat-value'>\n                  {plubotData.name || nameInput}\n                </span>\n              </div>\n              <div className='preview-stat'>\n                <span className='stat-label'>Personalidad:</span>\n                <span className='stat-value'>\n                  {plubotData.tone || 'Neutral'}\n                </span>\n              </div>\n              <div className='preview-stat'>\n                <span className='stat-label'>Color:</span>\n                <span className='stat-value'>\n                  {plubotData.color || '#D1D5DB'}\n                </span>\n              </div>\n              <div className='preview-stat'>\n                <span className='stat-label'>Poderes:</span>\n                <span className='stat-value'>\n                  {plubotData.powers?.length > 0\n                    ? plubotData.powers\n                        .map((id) => powers.find((p) => p.id === id)?.title)\n                        .join(', ')\n                    : 'Ninguno'}\n                </span>\n              </div>\n              <div className='preview-stat'>\n                <span className='stat-label'>Canal:</span>\n                <span className='stat-value'>Chat Web</span>\n              </div>\n            </div>\n            <div className='completion-message'>\n              <h3>\n                {plubotId\n                  ? '¡Tu Plubot está actualizado!'\n                  : '¡Tu Plubot Despierto está listo!'}\n              </h3>\n              <p>\n                {plubotId\n                  ? 'Revisa los cambios y guarda para aplicarlos.'\n                  : 'Continúa para configurar su comportamiento en el editor de flujos.'}\n              </p>\n            </div>\n          </motion.div>\n        );\n      }\n      default: {\n        return null;\n      }\n    }\n  };\n\n  const particlesInit = async (engine) => {\n    const { loadSlim } = await import('@tsparticles/slim');\n    await loadSlim(engine);\n  };\n\n  return (\n    <div className='creation-lab' ref={containerReference}>\n      <Particles\n        id='tsparticles'\n        init={particlesInit}\n        options={{\n          fullScreen: { enable: true },\n          particles: {\n            number: { value: 50, density: { enable: true, value_area: 800 } },\n            color: { value: '#00e0ff' },\n            shape: { type: 'circle' },\n            opacity: { value: 0.3, random: true },\n            size: { value: 2, random: true },\n            move: {\n              enable: true,\n              speed: 1,\n              direction: 'none',\n              random: true,\n              outModes: 'out',\n              attract: { enable: false },\n            },\n            links: {\n              enable: true,\n              distance: 120,\n              color: '#00e0ff',\n              opacity: 0.1,\n              width: 1,\n            },\n          },\n        }}\n      />\n      <AnimatePresence>\n        {showParticleEffect && (\n          <motion.div\n            className='personality-particles'\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ scale: 1.2, opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 1.5 }}\n          >\n            {Array.from({ length: 10 }).map((_, index) => (\n              <div\n                key={index}\n                className='personality-particle'\n                style={{\n                  '--angle': `${Math.random() * 360}deg`,\n                  '--distance': `${Math.random() * 40 + 40}%`,\n                  '--size': `${Math.random() * 8 + 5}px`,\n                  backgroundColor: '#00e0ff',\n                }}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <div className='cosmic-grid'>\n        {Array.from({ length: 10 }).map((_, index) => (\n          <div key={index} className='grid-line' />\n        ))}\n      </div>\n      <div className='progress-tracker'>\n        <div className='progress-nodes'>\n          {['Identidad', 'Personalidad', 'Poderes', 'Revisión'].map(\n            (step, index) => {\n              const stepProgress = (index + 1) * 25;\n              const isActive = progress >= stepProgress;\n              return (\n                <div className='progress-step' key={step}>\n                  <div\n                    className={`progress-node ${isActive ? 'active' : ''}`}\n                    style={{ borderColor: isActive ? '#00e0ff' : undefined }}\n                  >\n                    {isActive && (\n                      <div\n                        className='node-fill'\n                        style={{ backgroundColor: '#00e0ff' }}\n                      />\n                    )}\n                  </div>\n                  <span className='step-label'>{step}</span>\n                </div>\n              );\n            },\n          )}\n        </div>\n        <div className='progress-bar'>\n          <div\n            className='progress-fill'\n            style={{ width: `${progress}%`, backgroundColor: '#00e0ff' }}\n          />\n        </div>\n      </div>\n      <div className='lab-content'>\n        <div className='hologram-section'>\n          <div className='hologram-container'>\n            <div\n              className='hologram-platform'\n              style={{ boxShadow: `0 0 30px #00e0ff` }}\n            >\n              <div className='platform-rings'>\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <div\n                    key={index}\n                    className='platform-ring'\n                    style={{ borderColor: '#00e0ff' }}\n                  />\n                ))}\n              </div>\n            </div>\n            <div\n              className='plubot-hologram'\n              style={{ transform: `rotateY(${hologramRotation}deg)` }}\n            >\n              <div\n                className='energy-meter'\n                style={{\n                  height: `${energyLevel}%`,\n                  backgroundColor: '#00e0ff',\n                }}\n              />\n              <img\n                src={plubotImage}\n                alt='Plubot'\n                className='plubot-image'\n                style={{ filter: `drop-shadow(0 0 10px #00e0ff)` }}\n              />\n              {(plubotData.name || nameInput) && (\n                <motion.div\n                  className='plubot-name-display'\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  {plubotData.name || nameInput}\n                </motion.div>\n              )}\n            </div>\n            <div className='hologram-circles'>\n              {Array.from({ length: 3 }).map((_, index) => (\n                <div\n                  key={index}\n                  className={`hologram-circle circle${index + 1}`}\n                  style={{ borderColor: '#00e0ff' }}\n                />\n              ))}\n            </div>\n            <div className='energy-beams'>\n              {Array.from({ length: 4 }).map((_, index) => (\n                <div\n                  key={index}\n                  className='energy-beam'\n                  style={{\n                    transform: `rotate(${index * 90}deg)`,\n                    backgroundColor: '#00e0ff',\n                    opacity: energyLevel / 200 + 0.1,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n          <div className='message-console'>\n            <div className='console-header'>\n              <div className='console-dots'>\n                <div className='console-dot' />\n                <div className='console-dot' />\n                <div className='console-dot' />\n              </div>\n              <span>LABORATORIO PLUBOT v2.5</span>\n            </div>\n            <div className='console-content'>\n              <img\n                src={byteImage}\n                alt='Byte Assistant'\n                className='byte-avatar'\n              />\n              <div className='message-text'>\n                <span>{messageText}</span>\n                {isTyping && <span className='blink-cursor'>_</span>}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='creation-interface'>\n          <AnimatePresence mode='wait'>\n            <motion.div\n              key={activeSection}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n              className='creation-content'\n            >\n              {renderContent()}\n            </motion.div>\n          </AnimatePresence>\n          <div className='nav-controls'>\n            {activeSection !== 'name' && (\n              <motion.button\n                className='nav-button back-button'\n                onClick={goToPreviousSection}\n                whileHover={{ scale: 1.03 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                Atrás\n              </motion.button>\n            )}\n            <motion.button\n              className='nav-button next-button'\n              onClick={goToNextSection}\n              whileHover={{ scale: 1.03 }}\n              whileTap={{ scale: 0.95 }}\n              style={{ background: `linear-gradient(45deg, #00e0ff, #ff00ff)` }}\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <span>\n                  <i className='fas fa-spinner fa-spin' />{' '}\n                  {plubotId ? 'Actualizando...' : 'Activando...'}\n                </span>\n              ) : plubotId ? (\n                'Guardar Cambios'\n              ) : activeSection === 'preview' ? (\n                'Activar Plubot'\n              ) : (\n                'Continuar'\n              )}\n            </motion.button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizationForm;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/screens/TrainingScreen.jsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 1,
        "message": "There should be no empty line within import group",
        "line": 11,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 11,
        "endColumn": 35
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'ReactFlow'.",
        "line": 11,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 11,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [177, 212], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'shallow'.",
        "line": 15,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 15,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [290, 333], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'useGamification'.",
        "line": 20,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 20,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [503, 562], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'logger'.",
        "line": 22,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 22,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [617, 664], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'useUndoRedo'.",
        "line": 26,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 26,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [708, 723], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'analyzeFlowRoutes'.",
        "line": 31,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 31,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [877, 898], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'generateNodeSuggestions'.",
        "line": 32,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 32,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [894, 921], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "import/order",
        "severity": 1,
        "message": "There should be no empty line within import group",
        "line": 34,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 34,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'NODE_TYPES'.",
        "line": 34,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 34,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [959, 1012], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "import/no-duplicates",
        "severity": 2,
        "message": "'/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-config.js' imported multiple times.",
        "line": 34,
        "column": 28,
        "nodeType": "Literal",
        "endLine": 34,
        "endColumn": 52
      },
      {
        "ruleId": "import/no-duplicates",
        "severity": 2,
        "message": "'/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-config.js' imported multiple times.",
        "line": 38,
        "column": 29,
        "nodeType": "Literal",
        "endLine": 38,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'EpicHeader'.",
        "line": 42,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 42,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [1260, 1307], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 61,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 61,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [2145, 2150], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "radix",
        "severity": 2,
        "message": "Missing radix parameter.",
        "line": 61,
        "column": 31,
        "nodeType": "CallExpression",
        "messageId": "missingRadix",
        "endLine": 61,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "addRadixParameter10",
            "fix": { "range": [2178, 2178], "text": ", 10" },
            "desc": "Add radix parameter `10` for parsing decimal numbers."
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 67,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 67,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [2283, 2288], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "radix",
        "severity": 2,
        "message": "Missing radix parameter.",
        "line": 67,
        "column": 26,
        "nodeType": "CallExpression",
        "messageId": "missingRadix",
        "endLine": 67,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "addRadixParameter10",
            "fix": { "range": [2313, 2313], "text": ", 10" },
            "desc": "Add radix parameter `10` for parsing decimal numbers."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (990). Maximum allowed is 80.",
        "line": 76,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 1265,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 76,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1265,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'setNodes' variable.",
        "line": 102,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 102,
        "endColumn": 13
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"setNodes\".",
        "line": 102,
        "column": 5,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 102,
        "endColumn": 13
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'setEdges' variable.",
        "line": 103,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 103,
        "endColumn": 13
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"setEdges\".",
        "line": 103,
        "column": 5,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 103,
        "endColumn": 13
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'removeNode' variable.",
        "line": 104,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 104,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"removeNode\".",
        "line": 104,
        "column": 5,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 104,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'duplicateNode' variable.",
        "line": 105,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 105,
        "endColumn": 18
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"duplicateNode\".",
        "line": 105,
        "column": 5,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 105,
        "endColumn": 18
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'updateNodeData' variable.",
        "line": 106,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 106,
        "endColumn": 19
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"updateNodeData\".",
        "line": 106,
        "column": 5,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 106,
        "endColumn": 19
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'suggestions' variable.",
        "line": 111,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 111,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"suggestions\".",
        "line": 111,
        "column": 42,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 111,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 187,
        "column": 24,
        "nodeType": "Identifier",
        "endLine": 187,
        "endColumn": 31
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (132). Maximum allowed is 80.",
        "line": 188,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 319,
        "endColumn": 6
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 324,
        "column": 24,
        "nodeType": "Identifier",
        "endLine": 324,
        "endColumn": 31
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 325,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 418,
        "endColumn": 6
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"usePlubotLoader\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 423,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 423,
        "endColumn": 18
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 433,
        "column": 19,
        "nodeType": "Identifier",
        "endLine": 433,
        "endColumn": 27
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 441,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 441,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 446,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 446,
        "endColumn": 34
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 459,
        "column": 34,
        "nodeType": "Identifier",
        "endLine": 459,
        "endColumn": 45
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 501,
        "column": 34,
        "nodeType": "Identifier",
        "endLine": 501,
        "endColumn": 45
      },
      {
        "ruleId": "unicorn/no-array-reduce",
        "severity": 2,
        "message": "`Array#reduce()` is not allowed. Prefer other types of loop for readability.",
        "line": 511,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "reduce",
        "endLine": 511,
        "endColumn": 45
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 512,
        "column": 46,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 512,
        "endColumn": 48
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 554,
        "column": 15,
        "nodeType": "MemberExpression",
        "endLine": 554,
        "endColumn": 34
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 555,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 555,
        "endColumn": 32
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 556,
        "column": 18,
        "nodeType": "MemberExpression",
        "endLine": 556,
        "endColumn": 37
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 557,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 557,
        "endColumn": 45
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 582,
        "column": 33,
        "nodeType": "Identifier",
        "endLine": 582,
        "endColumn": 44
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 614,
        "column": 29,
        "nodeType": "Identifier",
        "endLine": 614,
        "endColumn": 40
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'nodes' is already declared in the upper scope on line 96 column 5.",
        "line": 615,
        "column": 6,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 615,
        "endColumn": 11
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'edges' is already declared in the upper scope on line 97 column 5.",
        "line": 615,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 615,
        "endColumn": 18
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 637,
        "column": 26,
        "nodeType": "Identifier",
        "endLine": 637,
        "endColumn": 37
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 637,
        "column": 38,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 708,
        "endColumn": 4
      },
      {
        "ruleId": "unicorn/prefer-structured-clone",
        "severity": 2,
        "message": "Prefer `structuredClone(…)` over `JSON.parse(JSON.stringify(…))` to create a deep clone.",
        "line": 654,
        "column": 30,
        "nodeType": "CallExpression",
        "messageId": "prefer-structured-clone/error",
        "endLine": 654,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "prefer-structured-clone/suggestion",
            "fix": { "range": [18485, 18517], "text": "structuredClone(nodes" },
            "data": { "description": "JSON.parse(JSON.stringify(…))" },
            "desc": "Switch to `structuredClone(…)`."
          }
        ]
      },
      {
        "ruleId": "no-shadow",
        "severity": 2,
        "message": "'error' is already declared in the upper scope on line 111 column 22.",
        "line": 700,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "noShadow",
        "endLine": 700,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has unnecessary dependencies: 'backupEdgesToLocalStorage' and 'plubotId'. Either exclude them or remove the dependency array. Outer scope values like 'backupEdgesToLocalStorage' aren't valid dependencies because mutating them doesn't re-render the component.",
        "line": 708,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 723,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [checkSavePrerequisites, resolveDuplicateLabels, validateNodesAndEdges, createLocalBackup, nodes, edges, plubotData, updatePlubotData, setByteMessage, setHasPendingChanges, setIsSaving, flowName]",
            "fix": {
              "range": [19985, 20278],
              "text": "[checkSavePrerequisites, resolveDuplicateLabels, validateNodesAndEdges, createLocalBackup, nodes, edges, plubotData, updatePlubotData, setByteMessage, setHasPendingChanges, setIsSaving, flowName]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useDebounce\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 731,
        "column": 25,
        "nodeType": "Identifier",
        "endLine": 731,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 734,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 734,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has a missing dependency: 'nodes'. Either include it or remove the dependency array.",
        "line": 743,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 743,
        "endColumn": 42,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [nodes.length, edges, debouncedSave, nodes]",
            "fix": {
              "range": [20974, 21010],
              "text": "[nodes.length, edges, debouncedSave, nodes]"
            }
          }
        ]
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'renderModals' variable.",
        "line": 747,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 747,
        "endColumn": 21
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"renderModals\".",
        "line": 747,
        "column": 9,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 747,
        "endColumn": 21
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 747,
        "column": 24,
        "nodeType": "Identifier",
        "endLine": 747,
        "endColumn": 35
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Modal' is not defined.",
        "line": 776,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 776,
        "endColumn": 21
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 830,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 830,
        "endColumn": 12
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 830,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 875,
        "endColumn": 4
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has missing dependencies: 'handleDismissRecovery' and 'openModal'. Either include them or remove the dependency array.",
        "line": 875,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 875,
        "endColumn": 44,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [nodes.length, activeModals, plubotId, openModal, handleDismissRecovery]",
            "fix": {
              "range": [25243, 25281],
              "text": "[nodes.length, activeModals, plubotId, openModal, handleDismissRecovery]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 968,
        "column": 30,
        "nodeType": "Identifier",
        "endLine": 968,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 988,
        "column": 27,
        "nodeType": "Identifier",
        "endLine": 988,
        "endColumn": 38
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 17. Maximum allowed is 10.",
        "line": 988,
        "column": 39,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1030,
        "endColumn": 4
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 1008,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 1008,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [28798, 28803], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 1009,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 1009,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [28829, 28834], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 1022,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 1022,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [29212, 29217], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 1022,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 1022,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [29239, 29244], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 1032,
        "column": 30,
        "nodeType": "Identifier",
        "endLine": 1032,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 1059,
        "column": 26,
        "nodeType": "Identifier",
        "endLine": 1059,
        "endColumn": 37
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 1085,
        "column": 26,
        "nodeType": "Identifier",
        "endLine": 1085,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 448,
        "column": 35,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 448,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [12641, 12645], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 961,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 961,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [27432, 27436], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [27432, 27436], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 1205,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 1205,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [33999, 34003], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [33999, 34003], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 1243,
        "column": 27,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 1243,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [35453, 35457], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 1254,
        "column": 29,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 1254,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [35829, 35833], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 74,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  Suspense,\n  useMemo,\n  useContext,\n} from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ReactFlow from 'reactflow';\n\nimport 'reactflow/dist/style.css';\nimport '@/assets/css/hide-watermark.css';\nimport { shallow } from 'zustand/shallow'; // Importación agregada\n\nimport { ModalContext } from '@/context/modal/ModalContext';\nimport useAPI from '@/hooks/useAPI';\nimport useDebounce from '@/hooks/useDebounce';\nimport { useGamification } from '@/hooks/useGamification';\nimport usePlubotLoader from '@/hooks/usePlubotLoader';\nimport logger from '@/services/loggerService';\nimport {\n  useFlowMeta,\n  useFlowNodesEdges,\n  useUndoRedo,\n} from '@/stores/selectors';\nimport useFlowStore from '@/stores/use-flow-store';\nimport useTrainingStore from '@/stores/use-training-store';\nimport {\n  analyzeFlowRoutes,\n  generateNodeSuggestions,\n} from '@/utils/flow-validation.js';\nimport { NODE_TYPES } from '@/utils/node-config.js'; // Importación añadida para identificar DecisionNodes\n\n// Utilidades\n\nimport { EDGE_COLORS } from '@/utils/node-config.js';\n\nimport usePlubotCreation from '../../../hooks/usePlubotCreation';\nimport ByteAssistant from '../common/ByteAssistant.jsx';\nimport EpicHeader from '../common/EpicHeader';\nimport NodePalette from '../common/NodePalette.jsx';\nimport StatusBubble from '../common/StatusBubble';\nimport EmergencyRecovery from '../flow-editor/components/EmergencyRecovery.jsx';\nimport FlowEditor from '../flow-editor/FlowEditor.jsx';\nimport { backupEdgesToLocalStorage } from '../flow-editor/utils/edgeFixUtility';\n\n// El custom hook useFlowEditor ha sido reemplazado por los stores de Zustand\n\n// Función auxiliar para extraer el ID del plubot de la URL\nconst extractPlubotIdFromUrl = (searchParameters, pathname) => {\n  // Primero intenta obtener el ID de los parámetros de la URL\n  let plubotId = searchParameters.get('plubotId');\n\n  // Si no hay ID en los parámetros, intenta obtenerlo de la ruta\n  if (!plubotId) {\n    const pathParts = pathname.split('/');\n    const lastSegment = pathParts.at(-1);\n\n    if (lastSegment && !isNaN(Number.parseInt(lastSegment))) {\n      plubotId = lastSegment;\n    }\n  }\n\n  // Verificar si tenemos un ID válido\n  if (plubotId && !isNaN(Number.parseInt(plubotId))) {\n    return plubotId;\n  }\n\n  // ID por defecto para desarrollo\n\n  return '130';\n};\n\nconst TrainingScreen = () => {\n  // Hooks y contextos\n  const navigate = useNavigate();\n  const { plubotId } = useParams();\n  const { plubotData, updatePlubotData } = usePlubotCreation();\n  const { activeModals, openModal, closeModal } = useContext(ModalContext);\n\n  useAPI();\n\n  // Referencias y estado local\n\n  const [, setHasPendingChanges] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [, setSelectedConnection] = useState();\n  const [, setConnectionProperties] = useState();\n\n  // --- Hooks de Zustand: Uso exclusivo de selectores seguros ---\n  const { flowName, loadFlow } = useFlowMeta();\n\n  const {\n    nodes,\n    edges,\n    onNodesChange,\n    onEdgesChange,\n    onConnect,\n    setSelectedNode,\n    setNodes,\n    setEdges,\n    removeNode,\n    duplicateNode,\n    updateNodeData,\n  } = useFlowNodesEdges();\n\n  const resetFlow = useFlowStore((state) => state.resetFlow);\n\n  const { isLoading, error, byteMessage, suggestions, setByteMessage } =\n    useTrainingStore();\n\n  // --- Estado local y Refs ---\n  const [emergencyBackupData, setEmergencyBackupData] = useState();\n  const [hadBackup, setHadBackup] = useState(false);\n  const userJustDismissedModal = useRef(false);\n\n  // --- Lógica de Hidratación de Zustand ---\n  const [isHydrated, setIsHydrated] = useState(\n    useFlowStore.persist.hasHydrated(),\n  );\n\n  useEffect(() => {\n    const unsub = useFlowStore.persist.onFinishHydration(() =>\n      setIsHydrated(true),\n    );\n    return unsub;\n  }, []);\n\n  // Efecto para recargar el flujo cuando el ID del plubot en la URL cambia\n  useEffect(() => {\n    // Asegurarse de que el plubotId de la URL es válido\n    if (plubotId) {\n      // Limpiar el estado anterior para evitar mostrar datos incorrectos\n      resetFlow();\n      // Cargar el nuevo flujo correspondiente al ID\n      loadFlow(plubotId);\n    }\n    // Este efecto DEBE depender de plubotId para reaccionar a la navegación\n  }, [plubotId, loadFlow, resetFlow]);\n\n  // --- Stubs para Modales (si es necesario) ---\n\n  // --- Guardia de Renderizado Principal ---\n  if (!isHydrated) {\n    return (\n      <div style={{ color: 'white', padding: '20px' }}>\n        Cargando y esperando hidratación...\n      </div>\n    ); // Mensaje de diagnóstico\n  }\n\n  if (error) {\n    return (\n      <div className='flex flex-col items-center justify-center h-screen bg-black text-white p-4'>\n        <div className='text-center'>\n          <img\n            src='/logo.svg'\n            alt='Logo de Plubot'\n            className='w-24 h-24 mx-auto mb-6 animate-pulse'\n          />\n          <h2\n            className='text-3xl font-bold mb-2'\n            style={{\n              color: '#00D1FF',\n              textShadow: '0 0 5px #00D1FF, 0 0 10px #00D1FF, 0 0 15px #00D1FF',\n            }}\n          >\n            Error al Cargar el Flujo\n          </h2>\n          <p className='text-lg text-gray-300'>\n            No se pudo conectar con el Plubot con ID: {plubotId}.\n          </p>\n          <p className='text-md text-gray-400 mt-1'>\n            Parece que el servidor no está disponible. Por favor, inténtalo de\n            nuevo más tarde.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Nodos iniciales para el editor de flujo\n  // Helper para generar IDs únicos simples para condiciones, en un contexto real se usaría algo más robusto como UUID\n\n  const initialNodes = useMemo(\n    () => [\n      {\n        id: 'start-1',\n        type: 'start',\n        position: { x: 250, y: 5 },\n        data: { label: 'Inicio' },\n      },\n      {\n        id: 'message-1',\n        type: 'message',\n        position: { x: 250, y: 100 },\n        data: { label: 'Mensaje 1', message: '¡Hola! ¿En qué puedo ayudarte?' },\n      },\n      {\n        id: 'decision-1',\n        type: 'decision',\n        position: { x: 250, y: 200 },\n        data: {\n          label: 'Decisión 1',\n          question: '¿Qué quieres hacer?',\n          conditions: [\n            { id: 'd1-cond-0', text: 'Información', optionNodeId: 'option-1' },\n            { id: 'd1-cond-1', text: 'Ayuda', optionNodeId: 'option-2' },\n          ],\n        },\n      },\n      {\n        id: 'option-1',\n        type: 'option',\n        position: { x: 100, y: 300 },\n        data: {\n          label: 'Opción 1',\n          condition: 'Información',\n          sourceDecisionNode: 'decision-1',\n          conditionId: 'd1-cond-0',\n        },\n      },\n      {\n        id: 'option-2',\n        type: 'option',\n        position: { x: 400, y: 300 },\n        data: {\n          label: 'Opción 2',\n          condition: 'Ayuda',\n          sourceDecisionNode: 'decision-1',\n          conditionId: 'd1-cond-1',\n        },\n      },\n      {\n        id: 'action-1',\n        type: 'action',\n        position: { x: 100, y: 400 },\n        data: { label: 'Acción 1', description: 'Mostrar información' },\n      },\n      {\n        id: 'action-2',\n        type: 'action',\n        position: { x: 400, y: 400 },\n        data: { label: 'Acción 2', description: 'Proporcionar ayuda' },\n      },\n      {\n        id: 'message-2',\n        type: 'message',\n        position: { x: 100, y: 500 },\n        data: {\n          label: 'Mensaje 2',\n          message: 'Aquí tienes la información solicitada.',\n        },\n      },\n      {\n        id: 'message-3',\n        type: 'message',\n        position: { x: 400, y: 500 },\n        data: { label: 'Mensaje 3', message: 'Estoy aquí para ayudarte.' },\n      },\n      {\n        id: 'decision-2',\n        type: 'decision',\n        position: { x: 250, y: 600 },\n        data: {\n          label: 'Decisión 2',\n          question: '¿Necesitas algo más?',\n          conditions: [\n            { id: 'd2-cond-0', text: 'Sí', optionNodeId: 'option-3' },\n            { id: 'd2-cond-1', text: 'No', optionNodeId: 'option-4' },\n          ],\n        },\n      },\n      {\n        id: 'option-3',\n        type: 'option',\n        position: { x: 100, y: 700 },\n        data: {\n          label: 'Opción 3',\n          condition: 'Sí',\n          sourceDecisionNode: 'decision-2',\n          conditionId: 'd2-cond-0',\n        },\n      },\n      {\n        id: 'option-4',\n        type: 'option',\n        position: { x: 400, y: 700 },\n        data: {\n          label: 'Opción 4',\n          condition: 'No',\n          sourceDecisionNode: 'decision-2',\n          conditionId: 'd2-cond-1',\n        },\n      },\n      {\n        id: 'message-4',\n        type: 'message',\n        position: { x: 100, y: 800 },\n        data: { label: 'Mensaje 4', message: '¿En qué más puedo ayudarte?' },\n      },\n      {\n        id: 'end-1',\n        type: 'end',\n        position: { x: 100, y: 900 },\n        data: {\n          label: 'Fin 1',\n          endMessage: 'Gracias por usar nuestro servicio.',\n        },\n      },\n      {\n        id: 'end-2',\n        type: 'end',\n        position: { x: 400, y: 800 },\n        data: { label: 'Fin 2', endMessage: '¡Hasta pronto!' },\n      },\n    ],\n    [],\n  );\n\n  // Aristas iniciales para el editor de flujo\n  const initialEdges = useMemo(\n    () => [\n      {\n        id: 'e1',\n        source: 'start-1',\n        target: 'message-1',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e2',\n        source: 'message-1',\n        target: 'decision-1',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      // e3 (decision-1 to option-1) será generado por generateOptionNodes\n      // e4 (decision-1 to option-2) será generado por generateOptionNodes\n      {\n        id: 'e5',\n        source: 'option-1',\n        target: 'action-1',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e6',\n        source: 'option-2',\n        target: 'action-2',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e7',\n        source: 'action-1',\n        target: 'message-2',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e8',\n        source: 'action-2',\n        target: 'message-3',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e9',\n        source: 'message-2',\n        target: 'decision-2',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e10',\n        source: 'message-3',\n        target: 'decision-2',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      // e11 (decision-2 to option-3) será generado por generateOptionNodes\n      // e12 (decision-2 to option-4) será generado por generateOptionNodes\n      {\n        id: 'e13',\n        source: 'option-3',\n        target: 'message-4',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e14',\n        source: 'message-4',\n        target: 'end-1',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n      {\n        id: 'e15',\n        source: 'option-4',\n        target: 'end-2',\n        type: 'elite-edge',\n        animated: true,\n        style: { stroke: EDGE_COLORS.default },\n      },\n    ],\n    [],\n  );\n\n  // Integrate new loader hook (now after constants are defined)\n  usePlubotLoader({\n    plubotId,\n    plubotData,\n    initialNodes,\n    initialEdges,\n  });\n\n  // NOTE: Legacy loader useEffect has been removed. Logic is now handled by usePlubotLoader hook above.\n\n  // Estado local simplificado para mantener compatibilidad con el código existente\n  const [state] = useState({\n    notification: undefined,\n    errorMessage: undefined,\n    flowStyles: {\n      edgeStyles: { strokeWidth: 2, stroke: '#00e0ff', animated: false },\n    },\n  });\n\n  useEffect(() => {\n    document.body.classList.add('training-screen');\n    return () => document.body.classList.remove('training-screen');\n  }, []);\n\n  const handleError = useCallback(\n    // eslint-disable-next-line unicorn/no-null\n    (errorMessage, consoleError = null) => {\n      setByteMessage(`⚠️ Error: ${errorMessage}`);\n      // Los errores de consola se silencian en producción\n    },\n    [setByteMessage],\n  );\n\n  /**\n   * Verifica las precondiciones necesarias para guardar el flujo\n   * @returns {boolean} true si se cumplen todas las precondiciones, false en caso contrario\n   */\n  const checkSavePrerequisites = useCallback(() => {\n    // Verificar si ya hay un guardado en progreso\n    if (isSaving) {\n      return false;\n    }\n\n    // Verificar si los datos del plubot están cargados\n    const isDataLoaded = plubotData && Object.keys(plubotData).length > 0;\n    if (!isDataLoaded) {\n      setByteMessage(\n        '⏳ Datos aún cargando, espera un momento antes de guardar.',\n      );\n      return false;\n    }\n\n    // Verificar si hay nodos para guardar\n    if (nodes.length === 0) {\n      setByteMessage('⚠️ No hay nodos en el editor');\n      return false;\n    }\n\n    // Verificar si tenemos la función para actualizar datos y el ID del plubot\n    if (!updatePlubotData || !plubotId) {\n      setByteMessage('⚠️ Error al guardar: falta el ID del Plubot.');\n      return false;\n    }\n\n    return true;\n  }, [\n    isSaving,\n    nodes.length,\n    plubotData,\n    plubotId,\n    updatePlubotData,\n    setByteMessage,\n  ]);\n\n  /**\n   * Resuelve etiquetas duplicadas en los nodos\n   * @param {Array} processedNodes - Los nodos a procesar\n   * @returns {Array} Los nodos con etiquetas únicas\n   */\n  const resolveDuplicateLabels = useCallback(\n    (processedNodes) => {\n      // Extraer mensajes de usuario de los nodos\n      const userMessages = processedNodes.map((node, index) => ({\n        user_message: node.data?.label || `Nodo ${index + 1}`,\n        position: index,\n        nodeId: node.id,\n      }));\n\n      // Identificar duplicados\n      const duplicates = userMessages.reduce(\n        (accumulator, current, index, array) => {\n          const isDuplicated = array.some(\n            (other, otherIndex) =>\n              otherIndex !== index &&\n              other.user_message.toLowerCase() ===\n                current.user_message.toLowerCase(),\n          );\n          if (isDuplicated) accumulator.push(current.user_message);\n          return accumulator;\n        },\n        [],\n      );\n\n      // Si no hay duplicados, devolver los nodos originales\n      if (duplicates.length === 0) return processedNodes;\n\n      // Resolver duplicados\n      setByteMessage(`⚠️ Hay mensajes duplicados. Resolviendo...`);\n\n      const newNodes = [...processedNodes];\n      const usedLabels = new Set(\n        processedNodes.map((n) =>\n          n.data?.label ? n.data.label.toLowerCase() : `node-${n.id}`,\n        ),\n      );\n\n      // Crear etiquetas únicas para los duplicados\n      for (const duplicate of duplicates) {\n        const nodeIndex = newNodes.findIndex(\n          (n) => n.data?.label === duplicate,\n        );\n        if (nodeIndex !== -1) {\n          let newLabel = duplicate;\n          let counter = 1;\n\n          while (usedLabels.has(newLabel.toLowerCase())) {\n            newLabel = `${duplicate}-${counter}`;\n            counter++;\n          }\n\n          usedLabels.add(newLabel.toLowerCase());\n\n          if (newNodes[nodeIndex]) {\n            newNodes[nodeIndex] = {\n              ...newNodes[nodeIndex],\n              data: { ...newNodes[nodeIndex].data, label: newLabel },\n            };\n          }\n        }\n      }\n\n      // Actualizar nodos con nombres únicos\n      onNodesChange(\n        newNodes.map((node, index) => ({\n          type: 'replace',\n          item: node,\n          index,\n        })),\n      );\n\n      return newNodes;\n    },\n    [onNodesChange, setByteMessage],\n  );\n\n  /**\n   * Elimina nodos con IDs duplicados y asegura que las aristas sean válidas\n   * @param {Array} updatedNodes - Los nodos a procesar\n   * @returns {Object} Objeto con nodos y aristas válidos\n   */\n  const validateNodesAndEdges = useCallback(\n    (updatedNodes) => {\n      // Eliminar nodos con IDs duplicados\n      const uniqueNodes = [];\n      const nodeIds = new Set();\n\n      for (const node of updatedNodes) {\n        if (nodeIds.has(node.id)) {\n          // Nodo duplicado encontrado y eliminado silenciosamente\n        } else {\n          nodeIds.add(node.id);\n          uniqueNodes.push(node);\n        }\n      }\n\n      // Validar que cada arista tenga nodos fuente y destino existentes\n      const validEdges = edges.filter((edge) => {\n        const isValid = nodeIds.has(edge.source) && nodeIds.has(edge.target);\n        return isValid;\n      });\n\n      return { uniqueNodes, validEdges };\n    },\n    [edges],\n  );\n\n  /**\n   * Crea un backup local de los nodos y aristas\n   * @param {Array} nodes - Los nodos a respaldar\n   * @param {Array} edges - Las aristas a respaldar\n   * @returns {string} El ID del backup creado\n   */\n  const createLocalBackup = useCallback(\n    (nodes, edges) => {\n      const backupId = `backup_${plubotId}_${Date.now()}`;\n\n      try {\n        localStorage.setItem(\n          backupId,\n          JSON.stringify({\n            nodes,\n            edges,\n            flowName: flowName || 'Flujo sin título',\n            timestamp: Date.now(),\n          }),\n        );\n        return backupId;\n      } catch {\n        // Error al guardar en localStorage, fallar silenciosamente\n      }\n    },\n    [plubotId, flowName],\n  );\n\n  // Función principal para guardar el flujo\n  const handleSaveFlow = useCallback(async () => {\n    // Verificar precondiciones\n    if (!checkSavePrerequisites()) {\n      return false;\n    }\n\n    // Iniciar proceso de guardado\n    setIsSaving(true);\n    setByteMessage('💾 Guardando flujo...');\n\n    try {\n      // Hacer backup de aristas en localStorage\n      if (edges && edges.length > 0) {\n        backupEdgesToLocalStorage(edges);\n      }\n\n      // Copia profunda de nodos para evitar mutaciones\n      const processedNodes = JSON.parse(JSON.stringify(nodes));\n\n      // Resolver etiquetas duplicadas\n      const nodesWithUniqueLabels = resolveDuplicateLabels(processedNodes);\n\n      // Validar nodos y aristas\n      const { uniqueNodes, validEdges } = validateNodesAndEdges(\n        nodesWithUniqueLabels,\n      );\n\n      // Crear backup local\n      const backupId = createLocalBackup(uniqueNodes, validEdges);\n\n      // Enviar datos al backend\n      const response = await updatePlubotData({\n        ...plubotData,\n        flowData: {\n          nodes: uniqueNodes,\n          edges: validEdges,\n          flowName: flowName || 'Flujo sin título',\n        },\n      });\n\n      // Manejar la respuesta\n      if (response && response.status === 'success') {\n        setByteMessage('✅ Flujo guardado correctamente');\n        setHasPendingChanges(false);\n\n        // Limpiar backup después de 1 minuto si el guardado fue exitoso\n        if (backupId) {\n          setTimeout(() => {\n            try {\n              localStorage.removeItem(backupId);\n            } catch {\n              // Fallar silenciosamente\n            }\n          }, 60_000);\n        }\n\n        return true;\n      } else {\n        setByteMessage(\n          `❌ Error al guardar: ${response?.error || 'Error desconocido'}`,\n        );\n        return false;\n      }\n    } catch (error) {\n      setByteMessage(\n        `❌ Error al guardar: ${error.message || 'Error desconocido'}`,\n      );\n      return false;\n    } finally {\n      setIsSaving(false);\n    }\n  }, [\n    checkSavePrerequisites,\n    resolveDuplicateLabels,\n    validateNodesAndEdges,\n    createLocalBackup,\n    nodes,\n    edges,\n    plubotData,\n    plubotId,\n    updatePlubotData,\n    setByteMessage,\n    setHasPendingChanges,\n    setIsSaving,\n    flowName,\n    backupEdgesToLocalStorage,\n  ]);\n\n  // Mantener compatibilidad con el código existente\n  async function saveFlowData() {\n    return handleSaveFlow();\n  }\n\n  // Custom debounce hook\n  const debouncedSave = useDebounce(handleSaveFlow, 10_000); // 10 seconds\n\n  // Función para actualizar el estado del componente cuando cambian los nodos o aristas\n  useEffect(() => {\n    // Comprobar que nodes y edges existen y son arrays antes de acceder a length\n    const hasNodes = nodes && Array.isArray(nodes) && nodes.length > 0;\n    const hasEdges = edges && Array.isArray(edges) && edges.length > 0;\n\n    if (hasNodes || hasEdges) {\n      // Guardar automáticamente cuando hay cambios significativos\n      debouncedSave();\n    }\n  }, [nodes.length, edges, debouncedSave]);\n\n  // Componente para gestionar los modales usando el componente Modal\n  // IMPORTANTE: Este renderModals SOLO muestra modales que NO están gestionados por GlobalProvider\n  const renderModals = useCallback(() => {\n    // Definir solo los modales que NO están gestionados por GlobalProvider\n    const modalConfigs = [\n      // Estos modales son específicos de TrainingScreen y se mantienen\n      {\n        title: 'Editor de Conexión',\n        isOpen: activeModals['connection-editor'],\n        onClose: () => closeModal('connection-editor'),\n      },\n      {\n        title: 'Análisis de Rutas',\n        isOpen: activeModals['route-analysis'],\n        onClose: () => closeModal('route-analysis'),\n      },\n      {\n        title: 'Historial de Versiones',\n        isOpen: activeModals['version-history'],\n        onClose: () => closeModal('version-history'),\n      },\n\n      // Los siguientes modales NO deben incluirse aquí porque ya son\n      // gestionados por GlobalProvider - esto evita los modales fantasma\n    ];\n\n    return (\n      <>\n        {modalConfigs.map(\n          (config, index) =>\n            config.isOpen && (\n              <Modal\n                key={config.title}\n                title={config.title}\n                isOpen={config.isOpen}\n                onClose={config.onClose}\n              />\n            ),\n        )}\n      </>\n    );\n  }, [\n    // Solo incluir dependencias para modales que realmente renderizamos\n    activeModals,\n    closeModal,\n  ]);\n\n  const handleRecoverNodes = () => {\n    if (\n      emergencyBackupData &&\n      emergencyBackupData.nodes &&\n      emergencyBackupData.edges\n    ) {\n      useFlowStore.getState().setNodes(emergencyBackupData.nodes);\n      useFlowStore.getState().setEdges(emergencyBackupData.edges);\n    }\n  };\n\n  const handleDismissRecovery = () => {\n    const currentPlubotId = useFlowStore.getState().plubotId;\n\n    const emergencyBackupKey = `plubot-nodes-emergency-backup-${currentPlubotId}`;\n    localStorage.removeItem(emergencyBackupKey);\n    setEmergencyBackupData(undefined);\n    setHadBackup(false); // Importante: actualizar el estado\n\n    // Siempre resetear a un flujo limpio (con nodos por defecto) al descartar,\n    // independientemente de si había un backup o no, porque el usuario eligió no restaurar o no había nada que restaurar.\n\n    loadFlow(currentPlubotId);\n  };\n\n  // Wrappers para las acciones del modal EmergencyRecovery\n  const wrappedHandleRecoverNodes = () => {\n    userJustDismissedModal.current = true;\n    closeModal('recovery');\n    handleRecoverNodes();\n  };\n\n  const wrappedHandleDismissRecovery = () => {\n    userJustDismissedModal.current = true;\n    closeModal('recovery');\n    handleDismissRecovery();\n  };\n\n  useEffect(() => {\n    const currentPlubotId = useFlowStore.getState().plubotId;\n    if (!currentPlubotId) return; // No hacer nada si no hay plubotId\n\n    const allNodes = useFlowStore.getState().nodes;\n    const emergencyBackupKey = `plubot-nodes-emergency-backup-${currentPlubotId}`;\n    const backupJson = localStorage.getItem(emergencyBackupKey);\n\n    let localEmergencyBackupData;\n    let localHadBackup = false;\n\n    if (backupJson) {\n      try {\n        localEmergencyBackupData = JSON.parse(backupJson);\n        if (\n          localEmergencyBackupData &&\n          localEmergencyBackupData.nodes &&\n          localEmergencyBackupData.edges\n        ) {\n          localHadBackup = true;\n        }\n      } catch {\n        localStorage.removeItem(emergencyBackupKey); // Eliminar backup corrupto\n      }\n    }\n\n    setEmergencyBackupData(localEmergencyBackupData);\n    setHadBackup(localHadBackup);\n\n    // Lógica para mostrar el modal o actuar\n    if (\n      (!allNodes || allNodes.length === 0) &&\n      !activeModals['recovery'] &&\n      !userJustDismissedModal.current\n    ) {\n      if (localHadBackup) {\n        openModal('recovery');\n      } else {\n        // Si no hay backup, y se borran todos los nodos, iniciamos un nuevo flujo directamente.\n        // handleDismissRecovery se encarga de resetear el flujo con nodos por defecto.\n        handleDismissRecovery();\n      }\n    } else if (userJustDismissedModal.current) {\n      userJustDismissedModal.current = false; // Resetear la bandera\n    }\n  }, [nodes.length, activeModals, plubotId]); // Depender de 'nodes' del store y 'plubotId' del store\n\n  if (state.errorMessage) {\n    return (\n      <div\n        className='ts-critical-error'\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          background: 'rgba(10, 20, 35, 0.95)',\n          color: '#ff4444',\n          textAlign: 'center',\n          padding: '2rem',\n        }}\n      >\n        <h2\n          style={{\n            fontSize: '1.5rem',\n            marginBottom: '1rem',\n            textShadow: '0 0 5px #ff4444',\n          }}\n        >\n          Error\n        </h2>\n        <p\n          style={{\n            fontSize: '1rem',\n            marginBottom: '1.5rem',\n            color: 'rgba(0, 224, 255, 0.8)',\n          }}\n        >\n          {state.errorMessage}\n        </p>\n        <button\n          className='ts-training-action-btn'\n          onClick={() => navigate('/profile')}\n          style={{\n            background: 'rgba(0, 40, 80, 0.8)',\n            border: '2px solid #00e0ff',\n            padding: '0.8rem 1.5rem',\n            fontSize: '1rem',\n            color: '#e0e0ff',\n          }}\n        >\n          ← Volver al Perfil\n        </button>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div\n        className='ts-loading'\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          background: 'rgba(10, 20, 35, 0.95)',\n        }}\n      >\n        <div\n          className='loading-spinner'\n          style={{\n            width: '50px',\n            height: '50px',\n            border: '5px solid rgba(0, 224, 255, 0.3)',\n            borderTop: '5px solid #00e0ff',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite',\n          }}\n        />\n        <p style={{ marginTop: '20px', color: '#00e0ff' }}>\n          Cargando editor de flujos...\n        </p>\n      </div>\n    );\n  }\n\n  if (!isHydrated) {\n    // eslint-disable-next-line unicorn/no-null\n    return null; // O un spinner de carga\n  }\n\n  /**\n   * Maneja el evento de soltar un nodo en el editor\n   * @param {DragEvent} event - El evento de drag and drop\n   */\n  const extractDraggedData = useCallback(\n    (event) => {\n      try {\n        const formats = [\n          'application/reactflow',\n          'text/plain',\n          'application/json',\n        ];\n        for (const format of formats) {\n          const data = event.dataTransfer.getData(format);\n          if (data) return data;\n        }\n        setByteMessage('❌ No se recibieron datos del nodo arrastrado');\n      } catch {\n        setByteMessage('❌ Error al procesar el nodo arrastrado');\n      }\n    },\n    [setByteMessage],\n  );\n\n  const getDropPosition = useCallback((event, reactFlowBounds) => {\n    const defaultPosition = { x: 250, y: 200 };\n    try {\n      const { reactFlowInstance } = useFlowStore.getState();\n      if (\n        reactFlowInstance &&\n        typeof reactFlowInstance.project === 'function'\n      ) {\n        if (!event.clientX || !event.clientY) {\n          return defaultPosition;\n        }\n        const position = reactFlowInstance.project({\n          x: event.clientX,\n          y: event.clientY,\n        });\n        if (\n          !position ||\n          typeof position !== 'object' ||\n          position.x === undefined ||\n          position.y === undefined ||\n          isNaN(position.x) ||\n          isNaN(position.y)\n        ) {\n          return defaultPosition;\n        }\n        return position;\n      } else {\n        if (!reactFlowBounds || !event.clientX || !event.clientY) {\n          return defaultPosition;\n        }\n        const manualPosition = {\n          x: event.clientX - reactFlowBounds.left,\n          y: event.clientY - reactFlowBounds.top,\n        };\n        if (isNaN(manualPosition.x) || isNaN(manualPosition.y)) {\n          return defaultPosition;\n        }\n        return manualPosition;\n      }\n    } catch {\n      return defaultPosition;\n    }\n  }, []);\n\n  const createNodeFromData = useCallback(\n    (jsonData, position) => {\n      try {\n        const parsedData = JSON.parse(jsonData);\n        if (!parsedData.nodeInfo?.nodeType) {\n          setByteMessage('⚠️ Formato de nodo incorrecto');\n          return;\n        }\n        const { nodeType, label, powerItemData, category } =\n          parsedData.nodeInfo;\n        const { addNode } = useFlowStore.getState();\n        const newNodeId = `${nodeType}-${Date.now()}`;\n        addNode(nodeType, position, {\n          id: newNodeId,\n          label: label || 'Nuevo nodo',\n          category: category || 'default',\n          ...powerItemData,\n        });\n        setByteMessage(`✅ Nodo \"${label}\" añadido al editor`);\n        setTimeout(handleSaveFlow, 1000);\n      } catch {\n        setByteMessage('❌ Error al añadir nodo');\n      }\n    },\n    [setByteMessage, handleSaveFlow],\n  );\n\n  const handleNodeDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      const reactFlowElement = document.querySelector('.react-flow');\n      const reactFlowBounds = reactFlowElement?.getBoundingClientRect();\n\n      if (!reactFlowBounds) {\n        setByteMessage('❌ Error: No se pudo encontrar el área del editor');\n        return;\n      }\n\n      const jsonData = extractDraggedData(event);\n      if (!jsonData) return;\n\n      const dropPosition = getDropPosition(event, reactFlowBounds);\n\n      createNodeFromData(jsonData, dropPosition);\n    },\n    [extractDraggedData, getDropPosition, createNodeFromData, setByteMessage],\n  );\n\n  /**\n   * Previene el comportamiento por defecto en el dragover\n   */\n  const handleDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  // Renderizar componente de error si hay un mensaje de error\n  if (state.errorMessage) {\n    return (\n      <div\n        className='ts-critical-error'\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          background: 'rgba(10, 20, 35, 0.95)',\n          color: '#ff4444',\n          textAlign: 'center',\n          padding: '2rem',\n        }}\n      >\n        <h2\n          style={{\n            fontSize: '1.5rem',\n            marginBottom: '1rem',\n            textShadow: '0 0 5px #ff4444',\n          }}\n        >\n          Error\n        </h2>\n        <p\n          style={{\n            fontSize: '1rem',\n            marginBottom: '1.5rem',\n            color: 'rgba(0, 224, 255, 0.8)',\n          }}\n        >\n          {state.errorMessage}\n        </p>\n        <button\n          className='ts-training-action-btn'\n          onClick={() => navigate('/profile')}\n          style={{\n            background: 'rgba(0, 40, 80, 0.8)',\n            border: '2px solid #00e0ff',\n            padding: '0.8rem 1.5rem',\n            fontSize: '1rem',\n            color: '#e0e0ff',\n          }}\n        >\n          ← Volver al Perfil\n        </button>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div\n        className='ts-loading'\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          background: 'rgba(10, 20, 35, 0.95)',\n        }}\n      >\n        <div\n          className='loading-spinner'\n          style={{\n            width: '50px',\n            height: '50px',\n            border: '5px solid rgba(0, 224, 255, 0.3)',\n            borderTop: '5px solid #00e0ff',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite',\n          }}\n        />\n        <p style={{ marginTop: '20px', color: '#00e0ff' }}>\n          Cargando editor de flujos...\n        </p>\n      </div>\n    );\n  }\n\n  // Estilos comunes extraidos para mejorar legibilidad\n  const screenStyles = {\n    backgroundColor: 'transparent !important',\n    position: 'relative',\n    height: '100vh',\n    width: '100%',\n    overflow: 'auto',\n    zIndex: 'auto',\n  };\n\n  const mainContentStyles = {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100%',\n    width: '100%',\n    position: 'relative',\n    overflow: 'visible',\n    backgroundColor: 'transparent',\n  };\n\n  const editorContainerStyles = {\n    flex: 1,\n    height: '100%',\n    position: 'relative',\n    overflow: 'auto',\n    backgroundColor: 'transparent',\n    zIndex: 10,\n  };\n\n  // Renderizado principal del componente\n  if (!isHydrated) {\n    // eslint-disable-next-line unicorn/no-null\n    return null; // O un spinner de carga, evita el renderizado hasta que el store esté listo.\n  }\n\n  return (\n    <div className='ts-training-screen' style={screenStyles}>\n      <div className='ts-main-content' style={mainContentStyles}>\n        <NodePalette />\n\n        <div className='ts-flow-editor-container' style={editorContainerStyles}>\n          <FlowEditor\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onNodeClick={(event, node) => setSelectedNode(node)}\n            onEdgeClick={(event, edge) => {\n              setSelectedConnection(edge);\n              openModal('connectionEditor');\n            }}\n            simulationMode={activeModals.has('simulation')}\n            handleError={handleError}\n            plubotId={plubotId}\n            name={plubotData?.name || 'Nuevo Plubot'}\n            notifyByte={byteMessage}\n            setByteMessage={setByteMessage}\n            saveFlowData={handleSaveFlow}\n            onDrop={handleNodeDrop}\n            onDragOver={handleDragOver}\n            setSelectedNode={setSelectedNode}\n            setSelectedConnection={setSelectedConnection}\n            setConnectionProperties={setConnectionProperties}\n          />\n        </div>\n      </div>\n\n      {/* ByteAssistant siempre visible */}\n      {/* eslint-disable-next-line unicorn/no-null */}\n      <Suspense fallback={null}>\n        <ByteAssistant simulationMode={activeModals.has('simulation')} />\n      </Suspense>\n\n      {/* StatusBubble condicional */}\n      {byteMessage && !activeModals.has('simulation') && (\n        <StatusBubble message={byteMessage} />\n      )}\n\n      {activeModals.has('recovery') && (\n        // eslint-disable-next-line unicorn/no-null\n        <Suspense fallback={null}>\n          <EmergencyRecovery\n            isOpen={activeModals.has('recovery')}\n            onRecover={wrappedHandleRecoverNodes}\n            onDismiss={wrappedHandleDismissRecovery} // El botón 'X' del modal llamará a esto\n            hasBackup={hadBackup} // Pasar el estado que indica si hay un backup válido\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default TrainingScreen;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/screens/WelcomeSequence.jsx",
    "messages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 25,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 25,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 26,
        "column": 17,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 26,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 27,
        "column": 18,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 27,
        "endColumn": 31
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 28,
        "column": 28,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 28,
        "endColumn": 41
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 29,
        "column": 35,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 29,
        "endColumn": 48
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (257). Maximum allowed is 80.",
        "line": 52,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 365,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-await-in-loop",
        "severity": 1,
        "message": "Unexpected `await` inside a loop.",
        "line": 177,
        "column": 11,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 179,
        "endColumn": 13,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-await-in-loop",
        "severity": 1,
        "message": "Unexpected `await` inside a loop.",
        "line": 184,
        "column": 9,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 186,
        "endColumn": 11,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, useAnimation, AnimatePresence } from 'framer-motion';\nimport { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport plubotIcon from '@/assets/img/plubot.svg';\n\nimport usePlubotCreation from '../../../hooks/usePlubotCreation';\n\nimport './WelcomeSequence.css';\n\n// Textos para la secuencia (movidos fuera para estabilidad)\nconst INTRO_TEXTS = [\n  'En un universo interconectado donde los datos son el nuevo oro...',\n  'Donde las ideas son infinitas pero el tiempo es el recurso más valioso...',\n  'Nace una inteligencia nunca antes vista...',\n  'PLUBOT - Tu asistente digital.',\n];\n\n// Versión optimizada - Componente más ligero sin tsParticles\nconst OptimizedParticles = () => {\n  // Generar partículas una sola vez con IDs estables para las keys\n  const particles = useMemo(\n    () =>\n      Array.from({ length: 30 }).map(() => ({\n        id: Math.random(),\n        top: `${Math.random() * 100}%`,\n        left: `${Math.random() * 100}%`,\n        animationDelay: `${Math.random() * 5}s`,\n        animationDuration: `${3 + Math.random() * 7}s`,\n      })),\n    [],\n  );\n\n  return (\n    <div className='optimized-particles'>\n      {particles.map((p) => (\n        <div\n          key={p.id}\n          className='optimized-particle'\n          style={{\n            top: p.top,\n            left: p.left,\n            animationDelay: p.animationDelay,\n            animationDuration: p.animationDuration,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst WelcomeSequence = () => {\n  // Estado para las diferentes fases de la animación\n  const [displayText, setDisplayText] = useState('');\n  const [isButtonEnabled, setIsButtonEnabled] = useState(false);\n  const [isAnimationComplete, setIsAnimationComplete] = useState(false);\n  const [showSkipHint, setShowSkipHint] = useState(true);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const speedMs = 40; // Velocidad de escritura\n  const phasePause = 1200; // Pausa entre frases\n\n  const navigate = useNavigate();\n  const { nextStep } = usePlubotCreation();\n  const contentReference = useRef(null);\n  const plubotAnimation = useAnimation();\n  const backgroundAnimation = useAnimation();\n  const glowAnimation = useAnimation();\n\n  // Función para omitir la animación, envuelta en useCallback\n  const skipAnimation = useCallback(() => {\n    setDisplayText(INTRO_TEXTS.at(-1));\n    setIsAnimationComplete(true);\n    setIsButtonEnabled(true);\n    setShowSkipHint(false);\n  }, []);\n\n  // Event listener para detectar la tecla Enter\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.key === 'Enter' && !isAnimationComplete) {\n        skipAnimation();\n      }\n    };\n\n    globalThis.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      globalThis.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isAnimationComplete, skipAnimation]);\n\n  // Event listener para detectar un toque en pantallas táctiles\n  useEffect(() => {\n    const handleTouch = () => {\n      if (!isAnimationComplete) {\n        skipAnimation();\n      }\n    };\n\n    const touchElement = document.querySelector('.welcome-screen');\n    if (touchElement) {\n      touchElement.addEventListener('touchstart', handleTouch);\n\n      return () => {\n        touchElement.removeEventListener('touchstart', handleTouch);\n      };\n    }\n    return () => {\n      /* no-op */\n    }; // Devolver siempre una función de limpieza\n  }, [isAnimationComplete, skipAnimation]);\n\n  // Simplificación de la animación flotante para Plubot\n  useEffect(() => {\n    // Animación flotante simplificada\n    plubotAnimation.start({\n      y: [-5, -10, -5],\n      transition: {\n        duration: 4,\n        ease: 'easeInOut',\n        repeat: Infinity,\n        repeatType: 'reverse',\n      },\n    });\n\n    // Versión reducida y optimizada de la animación de fondo\n    backgroundAnimation.start({\n      background: [\n        'radial-gradient(circle at 50% 50%, rgba(0,10,30,1) 0%, rgba(0,0,10,1) 100%)',\n        'radial-gradient(circle at 40% 60%, rgba(5,15,40,1) 0%, rgba(0,5,20,1) 100%)',\n      ],\n      transition: {\n        duration: 20,\n        ease: 'easeInOut',\n        repeat: Infinity,\n        repeatType: 'reverse',\n      },\n    });\n\n    // Animación del resplandor\n    glowAnimation.start({\n      opacity: [0.3, 0.7, 0.3],\n      scale: [1, 1.2, 1],\n      transition: {\n        duration: 3,\n        ease: 'easeInOut',\n        repeat: Infinity,\n        repeatType: 'reverse',\n      },\n    });\n  }, [plubotAnimation, backgroundAnimation, glowAnimation]);\n\n  // Secuencia de texto optimizada\n  useEffect(() => {\n    let isMounted = true;\n\n    const typeTextSequence = async () => {\n      // Iniciar la secuencia de tipeo con un retraso inicial menor\n      await new Promise((resolve) => {\n        setTimeout(resolve, 800);\n      });\n\n      // Para cada fase de texto\n      for (const text of INTRO_TEXTS) {\n        if (!isMounted) return;\n\n        let currentText = '';\n\n        // Escribir cada caracter con retraso\n        for (let index = 0; index <= text.length; index++) {\n          if (!isMounted) return;\n\n          currentText = text.slice(0, index);\n          setDisplayText(currentText);\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise((resolve) => {\n            setTimeout(resolve, speedMs);\n          });\n        }\n\n        // Pausa entre fases\n        // eslint-disable-next-line no-await-in-loop\n        await new Promise((resolve) => {\n          setTimeout(resolve, phasePause);\n        });\n      }\n\n      // Animación final y revelación del botón\n      if (!isMounted) return;\n\n      setIsAnimationComplete(true);\n      await new Promise((resolve) => {\n        setTimeout(resolve, 600);\n      });\n      setIsButtonEnabled(true);\n\n      // Ocultar el texto de ayuda para omitir\n      setShowSkipHint(false);\n    };\n\n    typeTextSequence();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Interacción al pasar el mouse sobre Plubot (simplificada)\n  const handleHoverStart = () => {\n    setIsHovered(true);\n    plubotAnimation.start({\n      scale: 1.2,\n      rotate: 5,\n      filter: 'drop-shadow(0 0 15px #00e0ff)',\n      transition: { duration: 0.5 },\n    });\n  };\n\n  const handleHoverEnd = () => {\n    setIsHovered(false);\n    plubotAnimation.start({\n      scale: 1,\n      rotate: 0,\n      filter: 'drop-shadow(0 0 8px #00e0ff)',\n      transition: { duration: 0.5 },\n    });\n  };\n\n  // Navegación a la siguiente pantalla (simplificada)\n  const handleNext = () => {\n    // Animación de salida simple\n    if (contentReference.current) {\n      contentReference.current.style.transition =\n        'transform 0.5s ease, opacity 0.5s ease';\n      contentReference.current.style.transform = 'scale(0)';\n      contentReference.current.style.opacity = '0';\n\n      setTimeout(() => {\n        nextStep();\n        navigate('/factory');\n      }, 500);\n    }\n  };\n\n  return (\n    <motion.div className='welcome-screen' animate={backgroundAnimation}>\n      <OptimizedParticles />\n\n      {/* Luces cósmicas reducidas */}\n      <div className='cosmic-lights'>\n        <div className='light-beam light-beam-1' />\n        <div className='light-beam light-beam-3' />\n      </div>\n\n      {/* Texto para omitir la animación */}\n      <AnimatePresence>\n        {showSkipHint && (\n          <motion.div\n            className='skip-hint'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 0.7 }}\n            exit={{ opacity: 0 }}\n            transition={{ delay: 1, duration: 1 }}\n          >\n            Presiona Enter para omitir\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <motion.div\n        className='welcome-content'\n        ref={contentReference}\n        initial={{ opacity: 0, y: 50, scale: 0.8 }}\n        animate={{ opacity: 1, y: 0, scale: 1 }}\n        transition={{ duration: 1.2, ease: 'easeOut' }}\n      >\n        <motion.div\n          className='plubot-icon-container'\n          onHoverStart={handleHoverStart}\n          onHoverEnd={handleHoverEnd}\n          animate={plubotAnimation}\n          initial={{ y: -50, opacity: 0 }}\n          transition={{ delay: 0.5, duration: 1, type: 'spring' }}\n        >\n          <motion.div className='plubot-glow' animate={glowAnimation} />\n          <motion.div className='plubot-icon'>\n            <img src={plubotIcon} alt='Plubot Icon' />\n            <AnimatePresence>\n              {isHovered && (\n                <motion.div\n                  className='plubot-greeting'\n                  initial={{ scale: 0, opacity: 0, y: 10 }}\n                  animate={{ scale: 1, opacity: 1, y: 0 }}\n                  exit={{ scale: 0, opacity: 0, y: 5 }}\n                  transition={{ duration: 0.4 }}\n                >\n                  ¡Hola! Soy Plubot, tu asistente creativo\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n\n          {/* Halo de energía alrededor de Plubot */}\n          <div className='energy-ring' />\n        </motion.div>\n\n        <motion.div\n          className='intro-text-container'\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.8, duration: 1 }}\n        >\n          <h1 className='intro-text'>\n            <div className='typewriter-container'>\n              <div className='typewriter-line' />\n              <div className='typewriter-text'>\n                {displayText}\n                <span className='cursor' />\n              </div>\n            </div>\n          </h1>\n        </motion.div>\n\n        <AnimatePresence>\n          {isAnimationComplete && (\n            <motion.div\n              className='epic-reveal'\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: [0, 1.3, 1], opacity: [0, 0.8, 1] }}\n              transition={{\n                duration: 1,\n                times: [0, 0.6, 1],\n                ease: 'easeOut',\n              }}\n            >\n              <div className='reveal-glow' />\n              <div className='reveal-text'>PLUBOT</div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <AnimatePresence>\n          {isButtonEnabled && (\n            <motion.button\n              className='intro-button'\n              onClick={handleNext}\n              initial={{ opacity: 0, y: 20, scale: 0.8 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              whileHover={{\n                scale: 1.05,\n                boxShadow: '0 0 20px rgba(0, 224, 255, 0.8)',\n              }}\n              whileTap={{ scale: 0.95 }}\n              transition={{ duration: 0.4 }}\n            >\n              <span className='button-text'>Descubre tu poder</span>\n              <span className='button-glow' />\n            </motion.button>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default WelcomeSequence;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/simulation/ConnectionEditor.jsx",
    "messages": [
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties' is missing in props validation",
        "line": 5,
        "column": 41,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 5,
        "endColumn": 51
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties.style.stroke' is missing in props validation",
        "line": 6,
        "column": 11,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 6,
        "endColumn": 17
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties.style.strokeWidth' is missing in props validation",
        "line": 6,
        "column": 19,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 6,
        "endColumn": 30
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties.style.strokeDasharray' is missing in props validation",
        "line": 6,
        "column": 32,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 6,
        "endColumn": 47
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties.style' is missing in props validation",
        "line": 6,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 6,
        "endColumn": 68
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'properties.animated' is missing in props validation",
        "line": 36,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 36,
        "endColumn": 27
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'text' is missing in props validation",
        "line": 47,
        "column": 31,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 47,
        "endColumn": 35
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'preset' is missing in props validation",
        "line": 58,
        "column": 35,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 58,
        "endColumn": 41
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'onClick' is missing in props validation",
        "line": 58,
        "column": 43,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 58,
        "endColumn": 50
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'isActive' is missing in props validation",
        "line": 58,
        "column": 52,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 58,
        "endColumn": 60
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'preset.stroke' is missing in props validation",
        "line": 63,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 63,
        "endColumn": 39
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'preset.strokeDasharray' is missing in props validation",
        "line": 64,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 64,
        "endColumn": 44
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'preset.name' is missing in props validation",
        "line": 69,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 69,
        "endColumn": 25
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'preset.name' is missing in props validation",
        "line": 70,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 70,
        "endColumn": 40
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (150). Maximum allowed is 80.",
        "line": 77,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 233,
        "endColumn": 2
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties' is missing in props validation",
        "line": 78,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 78,
        "endColumn": 23
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'setConnectionProperties' is missing in props validation",
        "line": 79,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 79,
        "endColumn": 26
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionType' is missing in props validation",
        "line": 80,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 80,
        "endColumn": 17
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'suggestLabel' is missing in props validation",
        "line": 81,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 81,
        "endColumn": 15
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.label' is missing in props validation",
        "line": 117,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 117,
        "endColumn": 46
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 118,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 118,
        "endColumn": 25
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.label' is missing in props validation",
        "line": 121,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 121,
        "endColumn": 39
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 141,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 141,
        "endColumn": 44
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.stroke' is missing in props validation",
        "line": 141,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 141,
        "endColumn": 51
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 142,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 142,
        "endColumn": 23
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 158,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 158,
        "endColumn": 46
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeWidth' is missing in props validation",
        "line": 158,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 158,
        "endColumn": 58
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 159,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 159,
        "endColumn": 25
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 167,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 167,
        "endColumn": 54
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeWidth' is missing in props validation",
        "line": 167,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 167,
        "endColumn": 66
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 170,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 170,
        "endColumn": 40
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeWidth' is missing in props validation",
        "line": 170,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 170,
        "endColumn": 52
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 182,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 182,
        "endColumn": 44
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeDasharray' is missing in props validation",
        "line": 182,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 182,
        "endColumn": 60
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 183,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 183,
        "endColumn": 23
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.animated' is missing in props validation",
        "line": 198,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 198,
        "endColumn": 51
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 199,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 199,
        "endColumn": 25
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.animated' is missing in props validation",
        "line": 200,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 200,
        "endColumn": 56
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.priority' is missing in props validation",
        "line": 220,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 220,
        "endColumn": 49
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 221,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 221,
        "endColumn": 25
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (240). Maximum allowed is 80.",
        "line": 236,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 516,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 236,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 516,
        "endColumn": 2
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'nodes' is missing in props validation",
        "line": 237,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 237,
        "endColumn": 8
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'selectedConnection' is missing in props validation",
        "line": 238,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 238,
        "endColumn": 21
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties' is missing in props validation",
        "line": 239,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 239,
        "endColumn": 23
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'setConnectionProperties' is missing in props validation",
        "line": 240,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 240,
        "endColumn": 26
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'saveConnectionChanges' is missing in props validation",
        "line": 241,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 241,
        "endColumn": 24
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'deleteConnection' is missing in props validation",
        "line": 242,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 242,
        "endColumn": 19
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'setShowConnectionEditor' is missing in props validation",
        "line": 243,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 243,
        "endColumn": 26
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 290,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 290,
        "endColumn": 53
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.stroke' is missing in props validation",
        "line": 290,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 290,
        "endColumn": 60
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 291,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 291,
        "endColumn": 58
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeWidth' is missing in props validation",
        "line": 291,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 291,
        "endColumn": 70
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 292,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 292,
        "endColumn": 62
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style.strokeDasharray' is missing in props validation",
        "line": 292,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 292,
        "endColumn": 78
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'connectionProperties.style' is missing in props validation",
        "line": 294,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 294,
        "endColumn": 33
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'nodes.find' is missing in props validation",
        "line": 298,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 298,
        "endColumn": 21
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'selectedConnection.source' is missing in props validation",
        "line": 298,
        "column": 64,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 298,
        "endColumn": 70
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'nodes.find' is missing in props validation",
        "line": 303,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 303,
        "endColumn": 21
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'selectedConnection.target' is missing in props validation",
        "line": 303,
        "column": 64,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 303,
        "endColumn": 70
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 323,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 323,
        "endColumn": 29
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'selectedConnection.source' is missing in props validation",
        "line": 431,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 431,
        "endColumn": 69
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'selectedConnection.target' is missing in props validation",
        "line": 438,
        "column": 63,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 438,
        "endColumn": 69
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 368,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 368,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 383,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 383,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 63,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport './ConnectionEditor.css';\n\n// Componente de previsualización de conexión extraído y optimizado\nconst ConnectionPreview = React.memo(({ properties }) => {\n  const { stroke, strokeWidth, strokeDasharray } = properties.style;\n\n  return (\n    <div className='ts-connection-preview'>\n      <div className='ts-preview-label'>Vista previa:</div>\n      <div className='ts-preview-container'>\n        <div className='ts-preview-node ts-source' />\n        <svg width='120' height='30'>\n          <defs>\n            <marker\n              id='arrowhead'\n              markerWidth='10'\n              markerHeight='7'\n              refX='9'\n              refY='3.5'\n              orient='auto'\n            >\n              <polygon points='0 0, 10 3.5, 0 7' fill={stroke} />\n            </marker>\n          </defs>\n          <path\n            d='M10,15 L110,15'\n            stroke={stroke}\n            strokeWidth={strokeWidth}\n            strokeDasharray={strokeDasharray}\n            markerEnd='url(#arrowhead)'\n          />\n        </svg>\n        <div className='ts-preview-node ts-target' />\n      </div>\n      {properties.animated && (\n        <div className='ts-preview-animation-indicator'>\n          <span className='ts-animation-dot' /> Animación activa\n        </div>\n      )}\n    </div>\n  );\n});\nConnectionPreview.displayName = 'ConnectionPreview';\n\n// Componente de tooltip reutilizable\nconst Tooltip = React.memo(({ text }) => {\n  return (\n    <div className='ts-tooltip-container'>\n      <span className='ts-tooltip-icon'>ⓘ</span>\n      <span className='ts-tooltip-text'>{text}</span>\n    </div>\n  );\n});\nTooltip.displayName = 'Tooltip';\n\n// Componente de preset de estilo optimizado con memo\nconst StylePreset = React.memo(({ preset, onClick, isActive }) => {\n  return (\n    <button\n      className={`ts-style-preset-button ${isActive ? 'ts-active-preset' : ''}`}\n      style={{\n        backgroundColor: preset.stroke,\n        borderStyle: preset.strokeDasharray ? 'dashed' : 'solid',\n        borderColor: isActive ? '#ffffff' : 'transparent',\n        transform: isActive ? 'scale(1.2)' : 'scale(1)',\n      }}\n      onClick={() => onClick(preset)}\n      title={preset.name}\n      aria-label={`Estilo ${preset.name}`}\n    />\n  );\n});\nStylePreset.displayName = 'StylePreset';\n\n// Componente de formulario para propiedades de la conexión\nconst ConnectionForm = ({\n  connectionProperties,\n  setConnectionProperties,\n  connectionType,\n  suggestLabel,\n}) => {\n  const handleStyleChange = useCallback(\n    (property, value) => {\n      setConnectionProperties((previous) => ({\n        ...previous,\n        style: {\n          ...previous.style,\n          [property]: value,\n        },\n      }));\n    },\n    [setConnectionProperties],\n  );\n\n  const handlePropertyChange = useCallback(\n    (property, value) => {\n      setConnectionProperties((previous) => ({\n        ...previous,\n        [property]: value,\n      }));\n    },\n    [setConnectionProperties],\n  );\n\n  return (\n    <div className='ts-editor-section'>\n      <div className='ts-form-group'>\n        <label htmlFor='connection-label'>\n          Etiqueta de conexión:\n          <Tooltip text='Texto que aparecerá sobre la línea de conexión' />\n        </label>\n        <div className='ts-input-with-suggestion'>\n          <input\n            id='connection-label'\n            type='text'\n            value={connectionProperties.label}\n            onChange={(e) => handlePropertyChange('label', e.target.value)}\n            placeholder={suggestLabel()}\n          />\n          {!connectionProperties.label && suggestLabel() && (\n            <button\n              className='ts-suggestion-button'\n              onClick={() => handlePropertyChange('label', suggestLabel())}\n              title='Usar sugerencia'\n            >\n              Usar sugerencia\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className='ts-form-group'>\n        <label htmlFor='connection-color'>\n          Color:\n          <Tooltip text='Color de la línea de conexión' />\n        </label>\n        <input\n          id='connection-color'\n          type='color'\n          value={connectionProperties.style.stroke}\n          onChange={(e) => handleStyleChange('stroke', e.target.value)}\n          aria-label='Seleccionar color de línea'\n        />\n      </div>\n\n      <div className='ts-form-group'>\n        <label htmlFor='connection-width'>\n          Grosor de línea:\n          <Tooltip text='Grosor de la línea en píxeles' />\n        </label>\n        <div className='ts-range-with-value'>\n          <input\n            id='connection-width'\n            type='range'\n            min='1'\n            max='6'\n            value={connectionProperties.style.strokeWidth}\n            onChange={(e) =>\n              handleStyleChange(\n                'strokeWidth',\n                Number.parseInt(e.target.value, 10),\n              )\n            }\n            aria-valuemin='1'\n            aria-valuemax='6'\n            aria-valuenow={connectionProperties.style.strokeWidth}\n          />\n          <span className='ts-range-value'>\n            {connectionProperties.style.strokeWidth}px\n          </span>\n        </div>\n      </div>\n\n      <div className='ts-form-group'>\n        <label htmlFor='line-style'>\n          Estilo de línea:\n          <Tooltip text='Apariencia visual de la línea' />\n        </label>\n        <select\n          id='line-style'\n          value={connectionProperties.style.strokeDasharray || ''}\n          onChange={(e) => handleStyleChange('strokeDasharray', e.target.value)}\n          aria-label='Seleccionar estilo de línea'\n        >\n          <option value=''>Sólida</option>\n          <option value='5,5'>Punteada</option>\n          <option value='10,10'>Discontinua</option>\n          <option value='15,5,3,5'>Puntos y rayas</option>\n        </select>\n      </div>\n\n      <div className='ts-form-group ts-checkbox-group'>\n        <div className='ts-checkbox-with-label'>\n          <input\n            id='animated-checkbox'\n            type='checkbox'\n            checked={connectionProperties.animated}\n            onChange={(e) => handlePropertyChange('animated', e.target.checked)}\n            aria-checked={connectionProperties.animated}\n          />\n          <label htmlFor='animated-checkbox'>\n            Animar línea\n            <Tooltip text='La línea tendrá un efecto de animación de flujo' />\n          </label>\n        </div>\n      </div>\n\n      {connectionType === 'decision → option' && (\n        <div className='ts-form-group'>\n          <label htmlFor='priority-input'>\n            Prioridad:\n            <Tooltip text='Orden de preferencia para esta opción (menor número = mayor prioridad)' />\n          </label>\n          <input\n            id='priority-input'\n            type='number'\n            min='1'\n            max='100'\n            value={connectionProperties.priority || 1}\n            onChange={(e) =>\n              handlePropertyChange(\n                'priority',\n                Number.parseInt(e.target.value, 10) || 1,\n              )\n            }\n            aria-label='Definir prioridad de la opción'\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Componente principal del editor de conexiones\nconst ConnectionEditor = ({\n  nodes,\n  selectedConnection,\n  connectionProperties,\n  setConnectionProperties,\n  saveConnectionChanges,\n  deleteConnection,\n  setShowConnectionEditor,\n}) => {\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Usar useMemo para los presets de estilo\n  const stylePresets = useMemo(\n    () => [\n      {\n        name: 'Primario',\n        stroke: '#00e0ff',\n        strokeWidth: 2,\n        strokeDasharray: '',\n      },\n      {\n        name: 'Secundario',\n        stroke: '#ff00ff',\n        strokeWidth: 2,\n        strokeDasharray: '',\n      },\n      {\n        name: 'Advertencia',\n        stroke: '#ffb700',\n        strokeWidth: 2,\n        strokeDasharray: '',\n      },\n      {\n        name: 'Peligro',\n        stroke: '#ff2e5b',\n        strokeWidth: 3,\n        strokeDasharray: '',\n      },\n      { name: 'Éxito', stroke: '#00ff9d', strokeWidth: 2, strokeDasharray: '' },\n      {\n        name: 'Alternativo',\n        stroke: '#7700ff',\n        strokeWidth: 2,\n        strokeDasharray: '5,5',\n      },\n    ],\n    [],\n  );\n\n  // Determinar cuál preset está activo\n  const activePresetIndex = useMemo(() => {\n    return stylePresets.findIndex(\n      (preset) =>\n        preset.stroke === connectionProperties.style.stroke &&\n        preset.strokeWidth === connectionProperties.style.strokeWidth &&\n        preset.strokeDasharray === connectionProperties.style.strokeDasharray,\n    );\n  }, [connectionProperties.style, stylePresets]);\n\n  // Encontrar los nodos de origen y destino\n  const sourceNode = useMemo(\n    () => nodes.find((node) => node.id === selectedConnection?.source),\n    [nodes, selectedConnection],\n  );\n\n  const targetNode = useMemo(\n    () => nodes.find((node) => node.id === selectedConnection?.target),\n    [nodes, selectedConnection],\n  );\n\n  // Determinar el tipo de conexión\n  const connectionType = useMemo(\n    () =>\n      sourceNode && targetNode\n        ? `${sourceNode.type} → ${targetNode.type}`\n        : 'desconocido',\n    [sourceNode, targetNode],\n  );\n\n  // Detección de cambios\n  useEffect(() => {\n    setHasChanges(true);\n  }, [connectionProperties]);\n\n  // Manejar los atajos de teclado con useCallback\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape') {\n        setShowConnectionEditor(false);\n      } else if ((e.key === 's' || e.key === 'S') && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        if (hasChanges) saveConnectionChanges();\n      }\n    };\n\n    globalThis.addEventListener('keydown', handleKeyDown);\n    return () => globalThis.removeEventListener('keydown', handleKeyDown);\n  }, [hasChanges, saveConnectionChanges, setShowConnectionEditor]);\n\n  // Función para aplicar un preset de estilo con useCallback\n  const applyStylePreset = useCallback(\n    (preset) => {\n      setConnectionProperties((previous) => ({\n        ...previous,\n        style: {\n          stroke: preset.stroke,\n          strokeWidth: preset.strokeWidth,\n          strokeDasharray: preset.strokeDasharray,\n        },\n      }));\n    },\n    [setConnectionProperties],\n  );\n\n  // Obtener la descripción del tipo de conexión\n  const getTypeDescription = useCallback((type) => {\n    const descriptions = {\n      'decision → option':\n        'Conexión de decisión - establece opciones de respuesta',\n      'message → message': 'Secuencia de mensajes',\n      'message → decision': 'Mensaje seguido de una decisión de usuario',\n      'option → message': 'Opción que conduce a un mensaje',\n      'option → action': 'Opción que desencadena una acción',\n      'action → message': 'Acción seguida de un mensaje',\n      'action → end': 'Acción que concluye el flujo',\n      'message → end': 'Mensaje que concluye el flujo',\n    };\n\n    // La variable 'type' se deriva de los tipos de nodos internos, no de la entrada del usuario.\n    // Por lo tanto, el riesgo de inyección de objetos es insignificante en este contexto.\n    // eslint-disable-next-line security/detect-object-injection\n    return descriptions[type] || 'Conexión entre nodos del flujo';\n  }, []);\n\n  // Sugerir etiqueta basada en el tipo de conexión\n  const suggestLabel = useCallback(() => {\n    const suggestions = {\n      'decision → option': 'Si el usuario dice...',\n      'option → action': 'Ejecutar acción',\n      'message → decision': 'Preguntar al usuario',\n      'action → message': 'Después de la acción',\n    };\n\n    // 'connectionType' es un valor interno y seguro, no una entrada de usuario.\n    // Se deshabilita la regla de inyección por ser un falso positivo justificado.\n    // eslint-disable-next-line security/detect-object-injection\n    return suggestions[connectionType] || '';\n  }, [connectionType]);\n\n  // Manejar la eliminación con confirmación\n  const handleDelete = useCallback(() => {\n    if (showConfirmDelete) {\n      deleteConnection();\n    } else {\n      setShowConfirmDelete(true);\n    }\n  }, [showConfirmDelete, deleteConnection]);\n\n  // Manejar el guardado con verificación de cambios\n  const handleSave = useCallback(() => {\n    if (hasChanges) {\n      saveConnectionChanges();\n    }\n  }, [hasChanges, saveConnectionChanges]);\n\n  return (\n    <div className='ts-connection-editor-modal' role='dialog' aria-modal='true'>\n      <div\n        className='ts-modal-content'\n        aria-labelledby='connection-editor-title'\n      >\n        <div className='ts-modal-header'>\n          <h3 id='connection-editor-title'>Editor de Conexión</h3>\n          <button\n            onClick={() => setShowConnectionEditor(false)}\n            className='ts-close-button'\n            aria-label='Cerrar editor'\n          >\n            ✕\n          </button>\n        </div>\n\n        <div className='ts-connection-details'>\n          <div\n            className='ts-connection-type-badge'\n            title={getTypeDescription(connectionType)}\n            aria-label={getTypeDescription(connectionType)}\n          >\n            {connectionType}\n          </div>\n\n          <div className='ts-connection-nodes'>\n            <div className='ts-source-node'>\n              <strong>Origen:</strong>{' '}\n              {sourceNode?.data?.label || selectedConnection?.source}\n            </div>\n            <div className='ts-connection-arrow' aria-hidden='true'>\n              ➔\n            </div>\n            <div className='ts-target-node'>\n              <strong>Destino:</strong>{' '}\n              {targetNode?.data?.label || selectedConnection?.target}\n            </div>\n          </div>\n\n          <ConnectionPreview properties={connectionProperties} />\n\n          <div className='ts-style-presets'>\n            <div className='ts-presets-label'>Estilos predefinidos:</div>\n            <div className='ts-presets-container'>\n              {stylePresets.map((preset, index) => (\n                <StylePreset\n                  key={preset.name}\n                  preset={preset}\n                  onClick={applyStylePreset}\n                  isActive={index === activePresetIndex}\n                />\n              ))}\n            </div>\n          </div>\n\n          <ConnectionForm\n            connectionProperties={connectionProperties}\n            setConnectionProperties={setConnectionProperties}\n            connectionType={connectionType}\n            suggestLabel={suggestLabel}\n          />\n\n          <div className='ts-editor-actions'>\n            <button\n              onClick={handleSave}\n              className={`ts-primary-button ${hasChanges ? 'has-changes' : ''}`}\n              disabled={!hasChanges}\n              aria-label='Guardar cambios en la conexión'\n            >\n              Guardar Cambios\n            </button>\n\n            {showConfirmDelete ? (\n              <div className='ts-delete-confirmation'>\n                <span>¿Eliminar conexión?</span>\n                <button\n                  onClick={deleteConnection}\n                  className='ts-confirm-delete-button'\n                  aria-label='Confirmar eliminación'\n                >\n                  Sí, eliminar\n                </button>\n                <button\n                  onClick={() => setShowConfirmDelete(false)}\n                  className='ts-cancel-button'\n                  aria-label='Cancelar eliminación'\n                >\n                  Cancelar\n                </button>\n              </div>\n            ) : (\n              <button\n                onClick={handleDelete}\n                className='ts-secondary-button'\n                aria-label='Eliminar conexión'\n              >\n                Eliminar Conexión\n              </button>\n            )}\n          </div>\n\n          <div className='ts-keyboard-shortcuts' aria-label='Atajos de teclado'>\n            <div className='ts-shortcut'>\n              <kbd>Esc</kbd> Cerrar\n            </div>\n            <div className='ts-shortcut'>\n              <kbd>Ctrl</kbd>+<kbd>S</kbd> Guardar\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConnectionEditor;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/simulation/SimulationInterface.jsx",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 14. Maximum allowed is 10.",
        "line": 27,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 88,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 2,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 97,
        "column": 23,
        "nodeType": "NewExpression",
        "endLine": 100,
        "endColumn": 10
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 101,
        "column": 52,
        "nodeType": "MemberExpression",
        "endLine": 101,
        "endColumn": 66
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Async arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 124,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 124,
        "endColumn": 5
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Async arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 185,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 185,
        "endColumn": 5
      },
      {
        "ruleId": "react/display-name",
        "severity": 2,
        "message": "Component definition is missing display name",
        "line": 254,
        "column": 21,
        "nodeType": "CallExpression",
        "messageId": "noDisplayName",
        "endLine": 270,
        "endColumn": 3
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'message' is missing in props validation",
        "line": 254,
        "column": 35,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 254,
        "endColumn": 42
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'message.type' is missing in props validation",
        "line": 255,
        "column": 11,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 255,
        "endColumn": 15
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'message.content' is missing in props validation",
        "line": 255,
        "column": 17,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 255,
        "endColumn": 24
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'message.timestamp' is missing in props validation",
        "line": 255,
        "column": 26,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 255,
        "endColumn": 35
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'message.isActionStatus' is missing in props validation",
        "line": 255,
        "column": 37,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 255,
        "endColumn": 51
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (720). Maximum allowed is 80.",
        "line": 272,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 1062,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 17. Maximum allowed is 10.",
        "line": 272,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 1062,
        "endColumn": 2
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'nodes' is missing in props validation",
        "line": 273,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 273,
        "endColumn": 13
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'edges' is missing in props validation",
        "line": 274,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 274,
        "endColumn": 13
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'onClose' is missing in props validation",
        "line": 275,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 275,
        "endColumn": 21
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 275,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 275,
        "endColumn": 21
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'analyticsTracker' is missing in props validation",
        "line": 276,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 276,
        "endColumn": 26
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 276,
        "column": 22,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 276,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [8000, 8004], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'isUltraMode' is missing in props validation",
        "line": 277,
        "column": 3,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 277,
        "endColumn": 22
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "The 'safeNodes' conditional could make the dependencies of useEffect Hook (at line 376) change on every render. To fix this, wrap the initialization of 'safeNodes' in its own useMemo() Hook.",
        "line": 280,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 280,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "The 'safeNodes' conditional could make the dependencies of useMemo Hook (at line 835) change on every render. To fix this, wrap the initialization of 'safeNodes' in its own useMemo() Hook.",
        "line": 280,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 280,
        "endColumn": 54
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 290,
        "column": 54,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 290,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [8530, 8534], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 293,
        "column": 64,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 293,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [8714, 8718], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 317,
        "column": 22,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 317,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [9753, 9757], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 361,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 361,
        "endColumn": 22,
        "suggestions": [
          {
            "fix": { "range": [11519, 11642], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async arrow function has too many lines (405). Maximum allowed is 80.",
        "line": 381,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 799,
        "endColumn": 6
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 52. Maximum allowed is 10.",
        "line": 381,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 799,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 70 to the 15 allowed.",
        "line": 381,
        "column": 61,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 381,
        "endColumn": 63
      },
      {
        "ruleId": "prefer-destructuring",
        "severity": 2,
        "message": "Use array destructuring.",
        "line": 594,
        "column": 19,
        "nodeType": "VariableDeclarator",
        "messageId": "preferDestructuring",
        "endLine": 594,
        "endColumn": 46
      },
      {
        "ruleId": "no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 607,
        "column": 17,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 610,
        "endColumn": 22
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useCallback has missing dependencies: 'userMessageForNode' and 'userResponses'. Either include them or remove the dependency array.",
        "line": 800,
        "column": 5,
        "nodeType": "ArrayExpression",
        "endLine": 807,
        "endColumn": 6,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [safeNodes, analyticsTracker, addMessageToHistory, t, safeEdges, simulationHistory, userMessageForNode, userResponses]",
            "fix": {
              "range": [26092, 26218],
              "text": "[safeNodes, analyticsTracker, addMessageToHistory, t, safeEdges, simulationHistory, userMessageForNode, userResponses]"
            }
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 827,
        "column": 22,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 827,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [26767, 26771], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 837,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 837,
        "endColumn": 41
      },
      {
        "ruleId": "no-promise-executor-return",
        "severity": 2,
        "message": "Return values from promise executor functions cannot be read.",
        "line": 899,
        "column": 36,
        "nodeType": "CallExpression",
        "messageId": "returnsValue",
        "endLine": 899,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "wrapBraces",
            "fix": { "range": [28876, 28899], "text": "{setTimeout(resolve, 50)}" },
            "desc": "Wrap the expression in `{}`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 900,
        "column": 75,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 900,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [28976, 28980], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 907,
        "column": 14,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 907,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [29134, 29138], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [29134, 29138], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 915,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 915,
        "endColumn": 25
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 926,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 926,
        "endColumn": 37
      },
      {
        "ruleId": "unicorn/prevent-abbreviations",
        "severity": 2,
        "message": "Please rename the variable `e`. Suggested names are: `error`, `event_`. A more descriptive name will do too.",
        "line": 941,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "suggestion",
        "endLine": 941,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 39,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  useMemo,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ReactMarkdown from 'react-markdown';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport { escapeRegex } from '../../../utils/regex-utilities';\nimport './SimulationInterface.css';\n\n// Helper para obtener el token JWT (DEBES IMPLEMENTAR ESTO SEGÚN TU APP)\nconst getAuthToken = () => {\n  // Ejemplo: leer de localStorage, Auth Context, etc.\n  // Asegúrate de que este token sea el JWT válido para tu backend.\n  const token = localStorage.getItem('access_token'); // O el nombre que uses para tu token JWT\n  if (!token) {\n    // El token no fue encontrado, la función devolverá null y el llamador se encargará.\n  }\n  return token;\n};\n\n// Nueva función para llamar a la API de acción de Discord\nconst executeDiscordAction = async (nodeData, t) => {\n  const jwtToken = getAuthToken();\n  if (!jwtToken) {\n    return {\n      success: false,\n      message: 'Error de autenticación: No se encontró el token JWT.',\n    };\n  }\n\n  // Extraer los datos necesarios del nodo. Asegúrate que estos nombres coincidan\n  // con cómo los guardas en node.data en tu DiscordNode.tsx\n  const { discordToken, channelId, messageContent } = nodeData;\n\n  if (!discordToken || !channelId || !messageContent) {\n    const missing = [];\n    if (!discordToken)\n      missing.push(t('simulation.missingBotToken', 'Token del Bot'));\n    if (!channelId) missing.push('ID del Canal');\n    if (!messageContent) missing.push('Mensaje a Enviar');\n    return {\n      success: false,\n      message: `Configuración del nodo Discord incompleta. Faltan: ${missing.join(', ')}`,\n    };\n  }\n\n  try {\n    const baseUrl = import.meta.env.VITE_API_URL || 'http://127.0.0.1:5000/api';\n    const response = await fetch(`${baseUrl}/actions/discord/send_message`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${jwtToken}`,\n      },\n      body: JSON.stringify({\n        token: discordToken, // Token del Bot de Discord\n        channel_id: channelId, // ID del Canal de Discord\n        message: messageContent, // Mensaje a enviar\n      }),\n    });\n\n    const responseData = await response.json();\n\n    return response.ok\n      ? {\n          success: true,\n          message:\n            responseData.message || 'Acción de Discord ejecutada con éxito.',\n        }\n      : {\n          success: false,\n          message:\n            responseData.message ||\n            responseData.error ||\n            `Error del servidor: ${response.status}`,\n        };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error de red o conexión: ${error.message}`,\n    };\n  }\n};\n\n// Helper function for prompt interpolation\nconst interpolatePrompt = (template, variables, lastUserMessage) => {\n  if (!template) return '';\n  let interpolated = template;\n  if (variables && typeof variables === 'object') {\n    for (const key in variables) {\n      if (Object.prototype.hasOwnProperty.call(variables, key)) {\n        const regex = new RegExp(\n          `\\\\{\\\\{\\\\s*${escapeRegex(key)}\\\\s*\\\\}\\\\}`,\n          'g',\n        );\n        interpolated = interpolated.replace(regex, variables[key] || '');\n      }\n    }\n  }\n  // Optional: remove unreplaced placeholders, or leave them\n  // interpolated = interpolated.replace(/\\{\\{.*?\\}\\}/g, '');\n\n  // Interpolate the last user message if provided\n  if (lastUserMessage && typeof lastUserMessage === 'string') {\n    const userMessageRegex = /\\{\\{\\s*mensaje_usuario_anterior\\s*\\}\\}/g;\n    interpolated = interpolated.replaceAll(userMessageRegex, lastUserMessage);\n  }\n\n  return interpolated;\n};\n\n// Function to execute AI Node logic\n// Function to execute Emotion Detection Node logic\nconst executeEmotionDetectionNodeAction = async (\n  nodeData,\n  currentVariables,\n  inputText,\n  t,\n) => {\n  const jwtToken = getAuthToken();\n  if (!jwtToken) {\n    return {\n      success: false,\n      error: t(\n        'simulation.errorAuthGeneric',\n        'Error de autenticación: Token no encontrado.',\n      ),\n    };\n  }\n\n  const interpolatedText = interpolatePrompt(inputText, currentVariables, '');\n\n  if (!interpolatedText) {\n    return {\n      success: false,\n      error: 'Error en Nodo de Emoción: El texto de entrada está vacío.',\n    };\n  }\n\n  const apiUrlFromEnvironment = import.meta.env.VITE_API_URL || '';\n  const endpoint = `${apiUrlFromEnvironment}/api/emotion-detect`; // Endpoint específico\n\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${jwtToken}`,\n      },\n      body: JSON.stringify({ text: interpolatedText }),\n    });\n\n    if (!response.ok) {\n      return {\n        success: false,\n        error:\n          response.statusText || 'Error en la API de detección de emoción.',\n      };\n    }\n\n    const responseData = await response.json();\n\n    // La API debe devolver { emotion: 'happy' }\n    const detectedEmotion = responseData.emotion || 'unknown';\n    return { success: true, data: { detectedEmotion } };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Error de red o servidor al detectar la emoción: ${error.message}`,\n    };\n  }\n};\n\n// Function to execute AI Node logic\nconst executeAiNodeAction = async (\n  nodeData,\n  currentVariables,\n  lastUserMessage,\n  t,\n) => {\n  const jwtToken = getAuthToken();\n  if (!jwtToken) {\n    return {\n      success: false,\n      error: t(\n        'simulation.errorAuthGeneric',\n        'Error de autenticación: Token no encontrado.',\n      ),\n    };\n  }\n\n  // CORRECTED: Handle both aiNode (prompt) and aiNodePro (promptTemplate)\n  const promptTemplate = nodeData.promptTemplate || nodeData.prompt || '';\n  const systemMessage = nodeData.systemMessage || '';\n\n  const interpolatedPrompt = interpolatePrompt(\n    promptTemplate,\n    currentVariables,\n    lastUserMessage,\n  );\n\n  if (!interpolatedPrompt && !systemMessage) {\n    return {\n      success: false,\n      error: t(\n        'simulation.errorAiNodeNoPrompt',\n        'Error del Nodo IA: El prompt (plantilla) y el mensaje de sistema están vacíos, incluso después de intentar interpolar variables.',\n      ),\n    };\n  }\n\n  // CORRECTED: Use the correct API endpoint discovered during the audit.\n  const apiEndpoint = `${import.meta.env.VITE_API_URL}/ai-node`;\n\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${jwtToken}`,\n      },\n      body: JSON.stringify({\n        // The backend expects a 'prompt' field.\n        prompt: interpolatedPrompt,\n        temperature: nodeData.temperature,\n        maxTokens: nodeData.maxTokens,\n        systemMessage,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `Error del servidor: ${response.status}`,\n      };\n    }\n\n    const result = await response.json();\n    return { success: true, data: result.response };\n  } catch (error) {\n    return {\n      success: false,\n      error: `Error de red o de conexión: ${error.message}`,\n    };\n  }\n};\n\nconst MessageItem = React.memo(({ message }) => {\n  const { type, content, timestamp, isActionStatus } = message;\n  const itemClass = `ts-message ts-${type} ${isActionStatus ? 'ts-action-status' : ''}`;\n  return (\n    <div className={itemClass}>\n      {type === 'bot' && !isActionStatus && <div className='ts-bot-avatar' />}\n      <div className='ts-message-content'>\n        <ReactMarkdown>{content}</ReactMarkdown>\n        {timestamp && (\n          <div className='ts-message-timestamp'>\n            {new Date(timestamp).toLocaleTimeString()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nconst SimulationInterface = ({\n  nodes = [],\n  edges = [],\n  onClose = () => {},\n  analyticsTracker = null,\n  isUltraMode = false,\n}) => {\n  const { t } = useTranslation();\n  const safeNodes = Array.isArray(nodes) ? nodes : [];\n  const safeEdges = Array.isArray(edges) ? edges : [];\n\n  const [simulationHistory, setSimulationHistory] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isClosing, setIsClosing] = useState(false);\n  const scrollReference = useRef(null);\n  const textareaReference = useRef(null);\n\n  const [scrollToBottom] = useState(true);\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  const [flowStatus, setFlowStatus] = useState('idle');\n  const [userResponses, setUserResponses] = useState({});\n  const [userMessageForNode, setUserMessageForNode] = useState(null);\n  const [currentDecisionOptions, setCurrentDecisionOptions] = useState([]);\n  const simulationStarted = useRef(false);\n\n  // --- DECLARACIONES EN ORDEN CORRECTO ---\n\n  // 1. Datos derivados y constantes\n  const nodesJson = useMemo(() => JSON.stringify(nodes), [nodes]);\n  const edgesJson = useMemo(() => JSON.stringify(edges), [edges]);\n\n  // 2. Funciones memoizadas (useCallback)\n  const addMessageToHistory = useCallback((message) => {\n    setSimulationHistory((previous) => [...previous, message]);\n  }, []);\n\n  // La función 'processNode' se declara aquí, antes de los useEffect que la usan.\n  // Se usa un truco con useRef para evitar problemas de dependencias circulares con los useEffect.\n  const processNodeReference = useRef();\n\n  // Efecto para reiniciar la simulación si la estructura del flujo cambia\n  useEffect(() => {\n    // Reinicia el historial, el nodo actual y el estado del flujo.\n    // La bandera 'simulationStarted' se resetea para permitir un nuevo inicio.\n    setSimulationHistory([]);\n    setCurrentNodeId(null);\n    setFlowStatus('idle');\n    simulationStarted.current = false;\n  }, [nodesJson, edgesJson]); // Se ejecuta solo si la estructura de nodos o aristas cambia.\n\n  // Efecto para iniciar la simulación de forma controlada\n  useEffect(() => {\n    // Condiciones para iniciar la simulación:\n    // 1. El flujo debe estar en estado 'idle' (inactivo).\n    // 2. La simulación no debe haber sido iniciada previamente (controlado por simulationStarted.current).\n    // 3. Deben existir nodos en el flujo (safeNodes.length > 0).\n    if (\n      flowStatus === 'idle' &&\n      !simulationStarted.current &&\n      safeNodes.length > 0\n    ) {\n      const startNode = safeNodes.find(\n        (node) => node.type === 'start' || node.type === 'startNode',\n      );\n\n      if (startNode) {\n        // Marcar la simulación como iniciada para prevenir múltiples ejecuciones.\n        simulationStarted.current = true;\n\n        // Añadir un mensaje de sistema para indicar el inicio.\n        addMessageToHistory({\n          id: 'system-start',\n          type: 'system',\n          content: t('simulation.starting', 'Iniciando simulación...'),\n          timestamp: new Date().toISOString(),\n        });\n\n        // Usar un pequeño retardo para asegurar que la UI esté completamente renderizada\n        // antes de procesar el primer nodo. Esto mejora la robustez.\n        const startTimeout = setTimeout(() => {\n          if (processNodeReference.current) {\n            processNodeReference.current(startNode.id);\n          }\n        }, 150);\n\n        // Limpiar el timeout si el componente se desmonta.\n        return () => clearTimeout(startTimeout);\n      } else {\n        // Si no se encuentra un nodo de inicio, se notifica al usuario y se marca el flujo como erróneo.\n        console.error(\n          \"Error de Simulación: No se encontró un nodo de 'inicio'. El flujo no puede comenzar.\",\n        );\n        addMessageToHistory({\n          id: 'error-no-start-node',\n          type: 'system',\n          content: t(\n            'simulation.errorNoStartNode',\n            'Error: No se encontró un nodo de inicio. La simulación no puede comenzar.',\n          ),\n          timestamp: new Date().toISOString(),\n        });\n        setFlowStatus('error');\n      }\n    }\n  }, [flowStatus, safeNodes, t, addMessageToHistory]); // Dependencias clave para el inicio del flujo.\n\n  // 4. Asignación de la función principal a la referencia.\n  // Esto completa el patrón para manejar funciones recursivas o interdependientes con useEffect.\n  processNodeReference.current = useCallback(\n    async (nodeId, currentResponses, currentMessageForNode) => {\n      if (!nodeId) {\n        setFlowStatus('ended');\n        addMessageToHistory({\n          id: 'flow-end-no-node',\n          type: 'system',\n          content: t(\n            'simulation.flowEndedNoNode',\n            'Flujo finalizado: no hay más nodos.',\n          ),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const node = safeNodes.find((n) => n.id === nodeId);\n      if (!node) {\n        setFlowStatus('error');\n        addMessageToHistory({\n          id: `error-node-not-found-${nodeId}`,\n          type: 'system',\n          content: t(\n            'simulation.errorNodeNotFound',\n            `Error: Nodo ${nodeId} no encontrado.`,\n          ),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      setCurrentNodeId(node.id);\n      setFlowStatus('processing');\n\n      if (analyticsTracker) {\n        try {\n          analyticsTracker('simulation_node_processing', {\n            nodeId: node.id,\n            nodeType: node.type,\n          });\n        } catch {}\n      }\n\n      switch (node.type) {\n        case 'start':\n        case 'startNode': {\n          const firstEdge = safeEdges.find((edge) => edge.source === node.id);\n          if (firstEdge) {\n            await processNodeReference.current(\n              firstEdge.target,\n              currentResponses,\n              currentMessageForNode,\n            );\n          } else {\n            setFlowStatus('ended');\n            addMessageToHistory({\n              id: 'flow-end-no-edge',\n              type: 'system',\n              content: t(\n                'simulation.flowEndedNoEdge',\n                'Flujo finalizado: nodo de inicio sin salida.',\n              ),\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n        }\n\n        case 'message': {\n          // Combine variable sources: node's own variables array and accumulated responses\n          const combinedVariables = { ...currentResponses };\n          if (Array.isArray(node.data.variables)) {\n            for (const variable of node.data.variables) {\n              if (variable && variable.name) {\n                combinedVariables[variable.name] = variable.value ?? '';\n              }\n            }\n          }\n\n          const interpolatedContent = interpolatePrompt(\n            node.data.message ||\n              t('simulation.undefinedMessage', 'Mensaje no definido'),\n            combinedVariables,\n            '',\n          );\n\n          addMessageToHistory({\n            id: node.id,\n            type: node.data.sender || 'bot',\n            content: interpolatedContent,\n            timestamp: new Date().toISOString(),\n          });\n          setFlowStatus('waiting_input');\n          break;\n        }\n\n        case 'decision': {\n          addMessageToHistory({\n            id: node.id,\n            type: 'bot',\n            content:\n              node.data.question ||\n              t('simulation.undefinedQuestion', '¿Qué opción deseas tomar?'),\n            timestamp: new Date().toISOString(),\n          });\n          const optionEdges = safeEdges.filter(\n            (edge) => edge.source === node.id,\n          );\n          const options = optionEdges.map((edge) => {\n            const optionNode = safeNodes.find(\n              (n) => n.id === edge.target && n.type === 'option',\n            );\n            return {\n              targetNodeId: edge.target,\n              label:\n                optionNode?.data?.text ||\n                edge.label ||\n                `Opción ${optionNode?.id}`,\n            };\n          });\n          setCurrentDecisionOptions(options);\n          setFlowStatus('waiting_input');\n          break;\n        }\n\n        case 'option': {\n          const nextEdgeFromOption = safeEdges.find(\n            (edge) => edge.source === node.id,\n          );\n          if (nextEdgeFromOption) {\n            await processNodeReference.current(\n              nextEdgeFromOption.target,\n              currentResponses,\n              currentMessageForNode,\n            );\n          } else {\n            setFlowStatus('ended');\n            addMessageToHistory({\n              id: 'flow-end-no-option-target',\n              type: 'system',\n              content: t(\n                'simulation.flowEndedAfterOption',\n                'Flujo finalizado después de la opción.',\n              ),\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n        }\n\n        case 'discord': {\n          addMessageToHistory({\n            id: `action-status-${node.id}`,\n            type: 'system',\n            content: t(\n              'simulation.executingDiscord',\n              'Ejecutando acción de Discord...',\n            ),\n            timestamp: new Date().toISOString(),\n            isActionStatus: true,\n          });\n          setFlowStatus('executing_action');\n          const result = await executeDiscordAction(node.data, t);\n          addMessageToHistory({\n            id: `action-result-${node.id}`,\n            type: result.success ? 'system' : 'error',\n            content: result.message,\n            timestamp: new Date().toISOString(),\n            isActionStatus: true,\n          });\n          if (result.success) {\n            setFlowStatus('processing');\n            const nextEdge = safeEdges.find((edge) => edge.source === node.id);\n            if (nextEdge) {\n              await processNodeReference.current(\n                nextEdge.target,\n                currentResponses,\n                currentMessageForNode,\n              );\n            } else {\n              setFlowStatus('ended');\n              addMessageToHistory({\n                id: 'flow-end-after-action',\n                type: 'system',\n                content: t(\n                  'simulation.flowEndedAfterAction',\n                  'Flujo finalizado después de la acción.',\n                ),\n                timestamp: new Date().toISOString(),\n              });\n            }\n          } else {\n            setFlowStatus('error');\n          }\n          break;\n        }\n\n        case 'emotionDetection': {\n          setFlowStatus('executing_action');\n          addMessageToHistory({\n            id: `system-executing-emotion-${node.id}`,\n            type: 'system',\n            content: t(\n              'simulation.executingEmotionDetection',\n              'Ejecutando Nodo de Detección de Emoción...',\n            ),\n            isActionStatus: true,\n            timestamp: new Date().toISOString(),\n          });\n          let inputText = '';\n          const sourceEdges = safeEdges.filter(\n            (edge) => edge.target === node.id,\n          );\n          if (sourceEdges.length > 0) {\n            const sourceEdge = sourceEdges[0];\n            const sourceNode = safeNodes.find(\n              (n) => n.id === sourceEdge.source,\n            );\n            if (sourceNode) {\n              if (sourceNode.type === 'message') {\n                inputText =\n                  currentMessageForNode ||\n                  (simulationHistory.length > 0\n                    ? simulationHistory.at(-1).content\n                    : '');\n              } else {\n                inputText = sourceNode.data.question || 'Decision';\n                sourceNode.data.message ||\n                  sourceNode.data.content ||\n                  currentResponses[sourceNode.id] ||\n                  '';\n              }\n            }\n          } else {\n            inputText =\n              Object.values(currentResponses).find(\n                (value) => typeof value === 'string' && value.trim() !== '',\n              ) || '';\n          }\n          const emotionResult = await executeEmotionDetectionNodeAction(\n            node.data,\n            currentResponses,\n            inputText,\n            t,\n          );\n          if (emotionResult.success) {\n            const { detectedEmotion } = emotionResult.data;\n            const nextEdge = safeEdges.find(\n              (edge) =>\n                edge.source === node.id &&\n                edge.sourceHandle === `emotion-${detectedEmotion}`,\n            );\n            if (nextEdge) {\n              await processNodeReference.current(\n                nextEdge.target,\n                currentResponses,\n                currentMessageForNode,\n              );\n            } else {\n              setFlowStatus('ended');\n              addMessageToHistory({\n                id: 'flow-end-no-emotion-branch',\n                type: 'system',\n                content: t(\n                  'simulation.flowEndedNoEmotionBranch',\n                  'Flujo finalizado: No hay rama para la emoción detectada.',\n                ),\n                timestamp: new Date().toISOString(),\n              });\n            }\n          } else {\n            setFlowStatus('error');\n            addMessageToHistory({\n              id: `error-emotion-${node.id}`,\n              type: 'error',\n              content:\n                t(\n                  'simulation.errorEmotionDetection',\n                  'Error al detectar la emoción: ',\n                ) + emotionResult.error,\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n        }\n        case 'aiNode':\n        case 'aiNodePro': {\n          const hasPrompt =\n            (node.data.prompt && node.data.prompt.trim() !== '') ||\n            (node.data.promptTemplate &&\n              node.data.promptTemplate.trim() !== '');\n          if (!hasPrompt) {\n            addMessageToHistory({\n              id: `error-ai-prompt-${node.id}`,\n              type: 'error',\n              content: t(\n                'simulation.errorAiNodeNoPrompt',\n                'Error de configuración del Nodo IA: El prompt está vacío.',\n              ),\n              timestamp: new Date().toISOString(),\n            });\n            setFlowStatus('error');\n            break;\n          }\n          setFlowStatus('executing_action');\n          addMessageToHistory({\n            id: `system-executing-ai-${node.id}`,\n            type: 'system',\n            content: t('simulation.executingAi', 'Ejecutando Nodo IA...'),\n            isActionStatus: true,\n            timestamp: new Date().toISOString(),\n          });\n          const lastUserMessage =\n            currentMessageForNode ||\n            userMessageForNode ||\n            Object.values(userResponses).pop() ||\n            '';\n          const nodeDataForAction = {\n            ...node.data,\n            responseVariable: node.data.responseVariable || 'ai_response',\n          };\n          const aiResult = await executeAiNodeAction(\n            nodeDataForAction,\n            userResponses,\n            lastUserMessage,\n            t,\n          );\n          if (aiResult.success) {\n            const aiResponse = aiResult.data;\n            const responseVariableName = nodeDataForAction.responseVariable;\n            const newResponsesWithAI = {\n              ...currentResponses,\n              [responseVariableName]: aiResponse,\n            };\n            addMessageToHistory({\n              id: `ai-response-${node.id}`,\n              type: 'bot',\n              content: aiResponse,\n              timestamp: new Date().toISOString(),\n            });\n            const nextEdge = safeEdges.find((edge) => edge.source === node.id);\n            if (nextEdge) {\n              await processNodeReference.current(\n                nextEdge.target,\n                newResponsesWithAI,\n                userMessageForNode,\n              );\n            } else {\n              setFlowStatus('ended');\n              addMessageToHistory({\n                id: 'flow-end-after-ai',\n                type: 'system',\n                content: t(\n                  'simulation.flowEndedAfterAi',\n                  'Flujo finalizado después del Nodo IA.',\n                ),\n                timestamp: new Date().toISOString(),\n              });\n            }\n          } else {\n            addMessageToHistory({\n              id: `ai-error-${node.id}`,\n              type: 'error',\n              content: aiResult.error,\n              timestamp: new Date().toISOString(),\n              isActionStatus: true,\n            });\n            setFlowStatus('error');\n          }\n          break;\n        }\n\n        case 'end': {\n          if (node.data.label) {\n            addMessageToHistory({\n              id: node.id,\n              type: 'system',\n              content: node.data.label,\n              timestamp: new Date().toISOString(),\n            });\n          }\n          setFlowStatus('ended');\n          break;\n        }\n\n        default: {\n          addMessageToHistory({\n            id: `system-non-interactive-${node.id}`,\n            type: 'system',\n            content: t(\n              'simulation.nonInteractiveNode',\n              `Nodo no interactivo: ${node.type}. Buscando siguiente nodo.`,\n            ),\n            timestamp: new Date().toISOString(),\n          });\n          const defaultNextEdge = safeEdges.find(\n            (edge) => edge.source === node.id,\n          );\n          if (defaultNextEdge) {\n            await processNodeReference.current(\n              defaultNextEdge.target,\n              currentResponses,\n              currentMessageForNode,\n            );\n          } else {\n            setFlowStatus('ended');\n            addMessageToHistory({\n              id: 'flow-end-unknown-type',\n              type: 'system',\n              content: t(\n                'simulation.flowEndedUnknownType',\n                'Flujo finalizado: nodo sin salida o tipo no manejado.',\n              ),\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n        }\n      }\n    },\n    [\n      safeNodes,\n      safeEdges,\n      addMessageToHistory,\n      t,\n      analyticsTracker,\n      simulationHistory,\n    ],\n  );\n\n  const { height: viewportHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (scrollReference.current && scrollToBottom) {\n      scrollReference.current.scrollTop = scrollReference.current.scrollHeight;\n    }\n  }, [simulationHistory, scrollToBottom, flowStatus]);\n\n  const handleClose = useCallback(() => {\n    setIsClosing(true);\n    setTimeout(() => {\n      onClose();\n    }, 500); // 500ms para coincidir con la animación de cierre\n  }, [onClose]);\n\n  const handleRestart = () => {\n    setSimulationHistory([]);\n    setCurrentNodeId(null);\n    setFlowStatus('idle');\n    setUserInput('');\n    simulationStarted.current = false;\n  };\n\n  const currentProcessingNode = useMemo(() => {\n    return safeNodes.find((n) => n.id === currentNodeId);\n  }, [safeNodes, currentNodeId]);\n\n  const handleUserInputSubmit = async (e) => {\n    e.preventDefault();\n    if (!userInput.trim() || flowStatus !== 'waiting_input') return;\n\n    const userMessageContent = userInput.trim();\n    setUserInput('');\n\n    addMessageToHistory({\n      id: `user-${currentNodeId}-${Date.now()}`,\n      type: 'user',\n      content: userMessageContent,\n      timestamp: new Date().toISOString(),\n    });\n\n    if (analyticsTracker) {\n      try {\n        analyticsTracker('simulation_user_message_sent', {\n          nodeId: currentNodeId,\n          messageLength: userMessageContent.length,\n        });\n      } catch {}\n    }\n\n    if (currentProcessingNode?.type === 'message') {\n      setUserMessageForNode(userMessageContent);\n      const nextEdge = safeEdges.find((edge) => edge.source === currentNodeId);\n      if (nextEdge) {\n        await processNodeReference.current(\n          nextEdge.target,\n          userResponses,\n          userMessageContent,\n        );\n      } else {\n        setFlowStatus('ended');\n        addMessageToHistory({\n          id: 'flow-end-after-user-message',\n          type: 'system',\n          content: t(\n            'simulation.flowEndedAfterUserMessage',\n            'Flujo finalizado después de tu mensaje.',\n          ),\n          timestamp: new Date().toISOString(),\n        });\n      }\n    }\n  };\n\n  const handleOptionClick = async (option) => {\n    if (flowStatus !== 'waiting_input') return;\n\n    setCurrentDecisionOptions([]); // Limpiar opciones después de la selección\n    setFlowStatus('processing');\n    addMessageToHistory({\n      id: `user-option-${currentNodeId}-${Date.now()}`,\n      type: 'user',\n      content: option.label,\n      timestamp: new Date().toISOString(),\n    });\n\n    const newResponses = { ...userResponses, [currentNodeId]: option.label };\n    setUserResponses(newResponses);\n\n    await new Promise((resolve) => setTimeout(resolve, 50));\n    await processNodeReference.current(option.targetNodeId, newResponses, null);\n  };\n\n  const mainStyle = { height: `${viewportHeight}px` };\n\n  const renderInputArea = () => {\n    if (flowStatus !== 'waiting_input') {\n      return null;\n    }\n\n    if (currentDecisionOptions.length > 0) {\n      return (\n        <div className='ts-options-container'>\n          {currentDecisionOptions.map((option, index) => (\n            <button\n              key={index}\n              onClick={() => handleOptionClick(option)}\n              className='ts-option-btn'\n            >\n              {option.label}\n            </button>\n          ))}\n        </div>\n      );\n    }\n\n    const handleTextareaKeyDown = (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        if (userInput.trim()) {\n          handleUserInputSubmit(e);\n        }\n      }\n    };\n\n    return (\n      <form onSubmit={handleUserInputSubmit} className='ts-user-input-form'>\n        <div className='ts-textarea-wrapper'>\n          <textarea\n            ref={textareaReference}\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            onKeyDown={handleTextareaKeyDown}\n            placeholder={t('simulation.typeHere', 'Escribe aquí...')}\n            disabled={flowStatus !== 'waiting_input'}\n            className='ts-chat-textarea'\n            rows='1'\n          />\n          <button\n            type='submit'\n            disabled={!userInput.trim() || flowStatus !== 'waiting_input'}\n            className='ts-send-btn'\n            aria-label={t('simulation.send', 'Enviar')}\n          >\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              viewBox='0 0 24 24'\n              fill='currentColor'\n            >\n              <path d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z' />\n            </svg>\n          </button>\n        </div>\n      </form>\n    );\n  };\n\n  useEffect(() => {\n    if (textareaReference.current) {\n      textareaReference.current.style.height = 'auto'; // Reset height to recalculate\n      const { scrollHeight } = textareaReference.current;\n      textareaReference.current.style.height = `${scrollHeight}px`;\n    }\n  }, [userInput]);\n\n  return (\n    <div\n      className={`ts-simulation-interface ${isClosing ? 'ts-closing' : ''}`}\n      style={mainStyle}\n    >\n      <div className='ts-header'>\n        <h2>{t('simulation.title', 'Simulación')}</h2>\n        <div className='ts-header-actions'>\n          <button\n            onClick={handleRestart}\n            className='ts-restart-btn'\n            aria-label={t('simulation.restart', 'Reiniciar')}\n          >\n            <i className='fas fa-redo' />\n          </button>\n          <button\n            onClick={handleClose}\n            className='ts-close-btn'\n            aria-label={t('simulation.close', 'Cerrar')}\n          >\n            <i className='fas fa-times' />\n          </button>\n        </div>\n      </div>\n      <div className='ts-chat-container' ref={scrollReference}>\n        {simulationHistory.length > 0\n          ? simulationHistory.map((message) => (\n              <div\n                key={message.id}\n                className={`ts-message ts-${message.type}${message.isActionStatus ? ' ts-action-status' : ''}`}\n              >\n                {message.type === 'bot' && !message.isActionStatus && (\n                  <div className='ts-bot-avatar' />\n                )}\n                <div className='ts-message-content'>\n                  <ReactMarkdown>{message.content}</ReactMarkdown>\n                  {message.timestamp && (\n                    <div className='ts-timestamp'>\n                      {new Date(message.timestamp).toLocaleTimeString()}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))\n          : flowStatus === 'idle' &&\n            !simulationStarted.current && (\n              <div className='ts-message ts-system'>\n                <div className='ts-message-content'>\n                  {t('simulation.startPrompt', 'Comienza la conversación...')}\n                </div>\n              </div>\n            )}\n        {flowStatus === 'waiting_input' && (\n          <div className='ts-message ts-system ts-action-status'>\n            <div className='ts-message-content'>\n              {t('simulation.waitingForInput', 'Esperando tu respuesta...')}\n            </div>\n          </div>\n        )}\n        {flowStatus === 'ended' && (\n          <div className='ts-message ts-system ts-action-status'>\n            <div className='ts-message-content'>\n              {t('simulation.flowEnded', 'El flujo ha finalizado.')}\n            </div>\n          </div>\n        )}\n        {flowStatus === 'error' && (\n          <div className='ts-message ts-error ts-action-status'>\n            <div className='ts-message-content'>\n              <strong>{t('simulation.error', 'Error')}:</strong>{' '}\n              {t('simulation.errorGeneric', 'Ocurrió un error.')}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {renderInputArea()}\n\n      {(flowStatus === 'ended' || flowStatus === 'error') && (\n        <div className='ts-restart-container'>\n          <button onClick={handleRestart} className='ts-restart-btn'>\n            {t('simulation.restart', 'Reiniciar Simulación')}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(SimulationInterface);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/ContextMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/PerformanceMonitor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/StatusIndicator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/ToolTip.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/ValidationPanel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/VariableEditor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/context-menu.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty method 'onClose'.",
        "line": 134,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 134,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty method 'onClose'.",
        "line": 217,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 217,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/context-menu/ContextMenu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/hooks/useContextMenu.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/hooks/useTooltipHandlers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/ui/hooks/useTooltipPosition.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/utils/init-systems.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/utils/modal-manager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/onboarding/utils/notification-manager.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 18,
        "column": 18,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/plubot-edit/PlubotEdit.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 10,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/plubot-edit/hooks/usePlubotData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/pluniverse/ByteGuide.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/pluniverse/MapRegion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/sync/DataBackupPanel.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 147,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 147,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [3884, 3888], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [3884, 3888], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/sync/SyncButton.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 17,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 17,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 27,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 27,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/sync/SyncDetailsPanel.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 37,
        "column": 22,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 37,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/sync/SyncStatusIndicator.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 37,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 37,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 43,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 43,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 67,
        "column": 18,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 67,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/system/AuthInitializer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/system/ErrorBoundary.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/public-static-readonly",
        "severity": 2,
        "message": "Make this public static property readonly.",
        "line": 10,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "message",
        "endLine": 10,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [268, 268], "text": " readonly" },
            "messageId": "fix",
            "desc": "Add \"readonly\" keyword"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/system/LoadingFallback.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/components/system/ScrollToTop.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 12,
        "column": 10,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 12,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [269, 273], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [269, 273], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/GamificationContext.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/GamificationContextObject.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/GlobalProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/PlubotCreationContext.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/PlubotCreationContextObject.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/SimulationContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/byteMessage/ByteMessageContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/byteMessage/ByteMessageProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/flowData/FlowDataContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/flowData/FlowDataProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/modal/ModalContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/context/modal/ModalProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/contexts/FlowEditorContext.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/contexts/FlowEditorContextObject.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/contexts/hooks/useFlowEditorLogic.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/contexts/hooks/useFlowHistory.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has a missing dependency: 'addToHistory'. Either include it or remove the dependency array.",
        "line": 43,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 43,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [addToHistory]",
            "fix": { "range": [1128, 1130], "text": "[addToHistory]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/contexts/hooks/useFlowInteractions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/core/App.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/core/i18n.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Method 'missingKeyHandler' has too many parameters (4). Maximum allowed is 3.",
        "line": 39,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 39,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 42,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 42,
        "endColumn": 21,
        "suggestions": [
          {
            "fix": { "range": [1432, 1500], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/core/main.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/custom.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/data/powers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/flow/nodeConfig.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/flow/nodeDimensions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/flow/nodeRegistry.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/flow/nodeRegistry.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 156,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 156,
        "endColumn": 20,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/legacy-compatibility.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/toast-helpers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/use-expanded-sections.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 11,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 11,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/use-favorite-nodes.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 10,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [354, 420], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 20,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 20,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [630, 698], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/use-filtered-nodes.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/use-node-palette.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 51,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 51,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1746, 1800], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useAOS.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useAPI.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Async arrow function has too many parameters (4). Maximum allowed is 3.",
        "line": 72,
        "column": 70,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 72,
        "endColumn": 72,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-await-in-loop",
        "severity": 1,
        "message": "Unexpected `await` inside a loop.",
        "line": 122,
        "column": 30,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 126,
        "endColumn": 14,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-await-in-loop",
        "severity": 1,
        "message": "Unexpected `await` inside a loop.",
        "line": 140,
        "column": 13,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 142,
        "endColumn": 15,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useAnalytics.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useByteApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useByteAssistant.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useByteMessageContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useCardTiltEffect.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useClickOutside.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useDebounce.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useEdgeChanges.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useEpicHeader.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 13,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 110,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useFlowDataContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useFlowEditor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useFlowInfo.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useFlowValidation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useForgotPasswordForm.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useGamification.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useGoogleSheets.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useHeaderActions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useHeaderData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useHeaderReturn.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useHeaderState.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useHistory.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useIntersection.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useKeyboardShortcuts.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useKeyboardShortcuts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useLogin.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useLoginCardEffect.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useLoginForm.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useLoginMessages.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useMessageScroll.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalContext.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalDerivedState.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalHandlers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalLifecycle.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalManager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalRegistration.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useModalState.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNode.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (112). Maximum allowed is 80.",
        "line": 17,
        "column": 17,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 138,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 17,
        "column": 17,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 138,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeChanges.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeCreator.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 19,
        "column": 18,
        "nodeType": "MemberExpression",
        "endLine": 19,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeDataUpdater.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeEvents.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodePatternCreator.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 17,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 17,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeResize.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeReturn.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (88). Maximum allowed is 80.",
        "line": 4,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 92,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeState.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useNodeStatus.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/usePasswordForm.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/usePermissions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/usePlubotCreation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/usePlubotLoader.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 25,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 55,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/usePlubotManagement.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useReadingXP.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useRegister.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useRegisterCardEffect.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useRegisterFeedback.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useRegisterForm.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useRegisterSubmit.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useResendVerification.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useResetPassword.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useResizeObserver.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useSyncButton.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useTheme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useToast.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useToastContainerManager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useToastLifecycle.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useTrainingModals.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useUndoRedo.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useWebPSupport.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useWindowSize.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/hooks/useWorker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/lib/simplified-markdown.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/lib/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "@typescript-eslint/no-loss-of-precision",
        "replacedBy": ["no-loss-of-precision"],
        "info": {
          "deprecatedSince": "8.0.0",
          "replacedBy": [
            {
              "rule": {
                "name": "no-loss-of-precision",
                "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
        }
      },
      {
        "ruleId": "@typescript-eslint/prefer-ts-expect-error",
        "replacedBy": ["@typescript-eslint/ban-ts-comment"],
        "info": {
          "deprecatedSince": "7.11.0",
          "replacedBy": [
            {
              "rule": {
                "name": "@typescript-eslint/ban-ts-comment",
                "url": "https://typescript-eslint.io/rules/ban-ts-comment"
              }
            }
          ],
          "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/AboutPlubot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/ByteEmbajador.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/AboutHeroImage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/AboutHeroText.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/ByteImage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/ChatHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/ChatInput.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/components/MessageList.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/hooks/useByteChat.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/hooks/useImageLoader.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/hooks/useParallax.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/hooks/useParticleAnimation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/services/byte-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/utils/Particle.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/utils/about-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/utils/byte-helpers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/AboutPlubot/utils/dom-helpers.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/GoogleAuthCallback.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/components/AuthStatusCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/components/AuthStatusIcon.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/hooks/useGoogleAuth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/services/auth-service.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/auth/utils/auth-animations.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/blog/Blog.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 28,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 28,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/blog/BlogPost.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react/no-danger",
        "severity": 2,
        "message": "Dangerous property 'dangerouslySetInnerHTML' found",
        "line": 46,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "dangerousProp",
        "endLine": 46,
        "endColumn": 64,
        "suppressions": [
          { "kind": "directive", "justification": "Justificación: HTML estático y seguro." }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/blog/posts-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/contact/Contact.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (319). Maximum allowed is 80.",
        "line": 184,
        "column": 17,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 543,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, useAnimation, AnimatePresence } from 'framer-motion';\nimport PropTypes from 'prop-types';\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  useCallback,\n  memo,\n} from 'react';\n\nimport axiosInstance from '@/utils/axios-config.js';\n\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport './Contact.css';\n\n// Función de ayuda para generar números aleatorios más seguros\nconst secureRandom = () => {\n  return crypto.getRandomValues(new Uint32Array(1))[0] / (2 ** 32 - 1);\n};\n\n// Variantes para animaciones (definidas fuera del componente para evitar recreaciones)\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.2,\n      delayChildren: 0.3,\n    },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      type: 'spring',\n      stiffness: 80,\n      damping: 10,\n    },\n  },\n};\n\n// Componentes memoizados para evitar re-renderizados innecesarios\nconst Particle = memo(({ index }) => {\n  // Valores pre-calculados para evitar cálculos en cada renderizado\n  const { width, height } = useWindowSize();\n  const initialX = useMemo(() => secureRandom() * (width || 0), [width]);\n  const initialY = useMemo(() => secureRandom() * (height || 0), [height]);\n  const targetX = useMemo(() => secureRandom() * (width || 0), [width]);\n  const targetY = useMemo(() => secureRandom() * (height || 0), [height]);\n  const duration = useMemo(() => secureRandom() * 15 + 20, []);\n  const initialOpacity = useMemo(() => secureRandom() * 0.4 + 0.2, []);\n  const bgColor = useMemo(\n    () =>\n      `rgb(${secureRandom() * 80}, ${secureRandom() * 200}, ${secureRandom() * 255 + 180})`,\n    [],\n  );\n  const shadowSize = useMemo(() => secureRandom() * 8 + 4, []);\n  const size = useMemo(() => secureRandom() * 8 + 2, []);\n  const uniqueId = useMemo(() => `particle-${index}`, [index]);\n\n  return (\n    <motion.div\n      key={uniqueId}\n      className='custom-particle'\n      initial={{\n        x: initialX,\n        y: initialY,\n        opacity: initialOpacity,\n      }}\n      animate={{\n        x: [initialX, targetX],\n        y: [initialY, targetY],\n        opacity: [0.2, 0.5, 0.2],\n      }}\n      transition={{\n        duration,\n        repeat: Infinity,\n        repeatType: 'reverse',\n      }}\n      style={{\n        width: size,\n        height: size,\n        background: bgColor,\n        boxShadow: `0 0 ${shadowSize}px rgba(0, 255, 234, 0.5)`,\n      }}\n    />\n  );\n});\n\nParticle.propTypes = {\n  index: PropTypes.string.isRequired,\n};\n\nParticle.displayName = 'Particle';\n\nconst NeuralNode = memo(({ index }) => {\n  const duration = useMemo(() => secureRandom() * 3 + 2, []);\n  const delay = useMemo(() => secureRandom() * 1.5, []);\n  const left = useMemo(() => `${secureRandom() * 100}%`, []);\n  const top = useMemo(() => `${secureRandom() * 100}%`, []);\n  const uniqueId = useMemo(() => `neural-node-${index}`, [index]);\n\n  return (\n    <motion.div\n      key={uniqueId}\n      className='neural-node'\n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: [0.2, 0.6, 0.2],\n        transition: {\n          duration,\n          delay,\n          repeat: Infinity,\n        },\n      }}\n      style={{ left, top }}\n    />\n  );\n});\n\nNeuralNode.propTypes = {\n  index: PropTypes.string.isRequired,\n};\n\nNeuralNode.displayName = 'NeuralNode';\n\nconst InputField = memo(\n  ({\n    type = 'text',\n    name,\n    placeholder,\n    value,\n    onChange,\n    onFocus,\n    onBlur,\n    isActive,\n  }) => {\n    const InputComponent = type === 'textarea' ? 'textarea' : 'input';\n\n    return (\n      <motion.div\n        className={`input-wrapper ${isActive ? 'active' : ''}`}\n        variants={itemVariants}\n      >\n        <div className='input-icon'>\n          <div className='icon-circle' />\n        </div>\n        <InputComponent\n          type={type === 'textarea' ? undefined : type}\n          name={name}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          required\n          className='contact-input'\n        />\n        <div className='input-line' />\n      </motion.div>\n    );\n  },\n);\n\nInputField.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  isActive: PropTypes.bool.isRequired,\n};\n\nInputField.displayName = 'InputField';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    nombre: '',\n    email: '',\n    mensaje: '',\n  });\n  const [formMessage, setFormMessage] = useState({ text: '', status: '' });\n  const [connectionStrength, setConnectionStrength] = useState(0);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [activeField, setActiveField] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const formReference = useRef(undefined);\n  const controls = useAnimation();\n  const titleControls = useAnimation();\n\n  // Efecto para mostrar el formulario con delay (optimizado)\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsFormVisible(true);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Animación del título (optimizada)\n  useEffect(() => {\n    const sequence = async () => {\n      await titleControls.start({\n        opacity: 1,\n        y: 0,\n        transition: { duration: 1, ease: 'easeOut' },\n      });\n\n      titleControls.start({\n        textShadow: [\n          '0 0 15px #00ffea, 0 0 30px #ff00ff',\n          '0 0 25px #00ffea, 0 0 40px #ff00ff',\n          '0 0 15px #00ffea, 0 0 30px #ff00ff',\n        ],\n        transition: {\n          duration: 4,\n          repeat: Infinity,\n          repeatType: 'reverse',\n        },\n      });\n    };\n\n    sequence();\n  }, [titleControls]);\n\n  // Cálculo de la fuerza de conexión (memoizado)\n  const calculateStrength = useCallback(() => {\n    let strength = 0;\n\n    if (formData.nombre) {\n      strength += formData.nombre.length > 3 ? 30 : 15;\n    }\n\n    if (formData.email) {\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      const isValidEmail = emailRegex.test(formData.email);\n      strength += isValidEmail ? 35 : 20;\n    }\n\n    if (formData.mensaje) {\n      strength += Math.min(Math.floor(formData.mensaje.length / 3), 35);\n    }\n\n    return Math.min(strength, 100);\n  }, [formData.nombre, formData.email, formData.mensaje]);\n\n  // Actualizar la fuerza de conexión con debounce\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setConnectionStrength(calculateStrength());\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [calculateStrength]);\n\n  // Handlers memoizados para evitar recreaciones en cada renderizado\n  const handleChange = useCallback((event) => {\n    setFormData((previous) => ({\n      ...previous,\n      [event.target.name]: event.target.value,\n    }));\n  }, []);\n\n  const handleFocus = useCallback(\n    (field) => {\n      setActiveField(field);\n      if (formReference.current) {\n        controls.start({\n          boxShadow: [\n            '0 0 20px rgba(0, 255, 234, 0.3)',\n            '0 0 30px rgba(0, 255, 234, 0.4)',\n            '0 0 20px rgba(0, 255, 234, 0.3)',\n          ],\n          transition: {\n            duration: 2.5,\n            repeat: Infinity,\n            repeatType: 'reverse',\n          },\n        });\n      }\n    },\n    [controls],\n  );\n\n  const handleBlur = useCallback(() => {\n    setActiveField(undefined);\n    controls.start({\n      boxShadow: '0 0 20px rgba(0, 255, 234, 0.3)',\n      transition: { duration: 0.5 },\n    });\n  }, [controls]);\n\n  const handleSubmit = useCallback(\n    async (event) => {\n      event.preventDefault();\n      setLoading(true);\n      setFormMessage({ text: '', status: '' });\n\n      // Crear un objeto FormData para enviar como multipart/form-data\n      const data = new FormData();\n      data.append('nombre', formData.nombre);\n      data.append('email', formData.email);\n      data.append('message', formData.mensaje);\n\n      try {\n        const response = await axiosInstance.post('contact', data, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        setFormMessage({\n          text: response.data.message || '¡Mensaje recibido en el Pluniverse!',\n          status: 'success',\n        });\n        setFormData({ nombre: '', email: '', mensaje: '' });\n        setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n      } catch (error) {\n        const errorMessage =\n          error.response?.data?.message ||\n          error.message ||\n          'Error en la transmisión. Intenta nuevamente.';\n        setFormMessage({ text: errorMessage, status: 'error' });\n        setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [formData],\n  );\n\n  // Memoizar partículas para evitar recálculos en cada renderizado\n  const particles = useMemo(() => {\n    const particleIds = Array.from(\n      { length: 25 },\n      (_, index) => `particle-${index}`,\n    );\n    return particleIds.map((id) => <Particle key={id} index={id} />);\n  }, []);\n\n  // Memoizar nodos neurales\n  const neuralNodes = useMemo(() => {\n    const neuralNodeIds = Array.from(\n      { length: 15 },\n      (_, index) => `neural-node-${index}`,\n    );\n    return neuralNodeIds.map((id) => <NeuralNode key={id} index={id} />);\n  }, []);\n\n  return (\n    <section className='contact-hero'>\n      {/* Fondo de partículas optimizado */}\n      <div className='particles-bg'>{particles}</div>\n\n      {/* Portal de energía en el fondo */}\n      <div className='energy-portal' />\n\n      <div className='contact-content'>\n        <motion.h2\n          className='contact-title'\n          data-text='Conéctate con el Futuro'\n          initial={{ opacity: 0, y: -50 }}\n          animate={titleControls}\n        >\n          <span className='neon-text'>Conéctate</span> con el{' '}\n          <span className='neon-text-alt'>Futuro</span>\n        </motion.h2>\n\n        <motion.p\n          className='contact-subtitle'\n          initial={{ opacity: 0 }}\n          animate={{\n            opacity: 1,\n            transition: {\n              duration: 1.5,\n              ease: 'easeOut',\n              delay: 0.5,\n            },\n          }}\n        >\n          Transmite tu señal al{' '}\n          <span className='highlight-text'>Pluniverse</span> y descubre cómo{' '}\n          <span className='highlight-text'>Plubot</span> impulsa tu visión con\n          IA de vanguardia.\n        </motion.p>\n\n        <motion.div className='neural-network-visual'>{neuralNodes}</motion.div>\n\n        <AnimatePresence>\n          {isFormVisible && (\n            <motion.div\n              className='form-container'\n              ref={formReference}\n              initial={{ opacity: 0, y: 50 }}\n              animate={{\n                opacity: 1,\n                y: 0,\n                transition: { type: 'spring', stiffness: 50, damping: 15 },\n              }}\n              exit={{ opacity: 0, y: -50 }}\n            >\n              <div className='holographic-overlay' />\n\n              <motion.form\n                onSubmit={handleSubmit}\n                id='contact-form'\n                className='contact-form'\n                variants={containerVariants}\n                initial='hidden'\n                animate='visible'\n              >\n                <InputField\n                  name='nombre'\n                  placeholder='Tu nombre'\n                  value={formData.nombre}\n                  onChange={handleChange}\n                  onFocus={() => handleFocus('nombre')}\n                  onBlur={handleBlur}\n                  isActive={activeField === 'nombre'}\n                />\n\n                <InputField\n                  type='email'\n                  name='email'\n                  placeholder='Tu email'\n                  value={formData.email}\n                  onChange={handleChange}\n                  onFocus={() => handleFocus('email')}\n                  onBlur={handleBlur}\n                  isActive={activeField === 'email'}\n                />\n\n                <InputField\n                  type='textarea'\n                  name='mensaje'\n                  placeholder='Tu mensaje para el Pluniverse'\n                  value={formData.mensaje}\n                  onChange={handleChange}\n                  onFocus={() => handleFocus('mensaje')}\n                  onBlur={handleBlur}\n                  isActive={activeField === 'mensaje'}\n                />\n\n                <motion.div\n                  className='connection-container'\n                  variants={itemVariants}\n                >\n                  <div className='connection-label'>\n                    <span className='connection-text'>\n                      Fuerza de Señal: {Math.round(connectionStrength)}%\n                    </span>\n                  </div>\n                  <div className='connection-bar'>\n                    <motion.div\n                      className='connection-fill'\n                      initial={{ width: 0 }}\n                      animate={{ width: `${connectionStrength}%` }}\n                      transition={{ type: 'spring', stiffness: 40 }}\n                    />\n                    <div className='connection-nodes'>\n                      {Array.from({ length: 5 }, (_, index) => (\n                        <div\n                          key={`connection-node-${index}`}\n                          className={`connection-node ${connectionStrength >= (index + 1) * 20 ? 'active' : ''}`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.button\n                  type='submit'\n                  className='quantum-btn contact-btn'\n                  disabled={loading}\n                  variants={itemVariants}\n                  whileHover={{\n                    scale: 1.03,\n                    boxShadow: '0 0 20px rgba(0, 255, 234, 0.5)',\n                  }}\n                  whileTap={{ scale: 0.97 }}\n                >\n                  <span className='btn-text'>\n                    {loading ? 'Enviando...' : 'Enviar Mensaje'}\n                  </span>\n                  {loading && (\n                    <motion.span\n                      className='btn-loader'\n                      animate={{ rotate: 360 }}\n                      transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        ease: 'linear',\n                      }}\n                    />\n                  )}\n                  <div className='btn-glow' />\n                </motion.button>\n              </motion.form>\n\n              <AnimatePresence>\n                {formMessage.text && (\n                  <motion.div\n                    className={`form-message ${formMessage.status}`}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{\n                      opacity: 1,\n                      y: 0,\n                      transition: {\n                        type: 'spring',\n                        stiffness: 150,\n                        damping: 15,\n                      },\n                    }}\n                    exit={{\n                      opacity: 0,\n                      y: 20,\n                      transition: { duration: 0.4 },\n                    }}\n                  >\n                    <span className='message-icon'>\n                      {formMessage.status === 'success' ? '✓' : '⚠'}\n                    </span>\n                    {formMessage.text}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n      <div className='ambient-light light-1' />\n      <div className='ambient-light light-2' />\n    </section>\n  );\n};\n\nexport default memo(Contact);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/createplubot/CreatePlubot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/faq/FAQ.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (323). Maximum allowed is 80.",
        "line": 15,
        "column": 13,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 351,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence } from 'framer-motion';\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\n\nimport logo from '@assets/img/logo.svg';\n\nimport { faqsData } from './faq-data';\n\n// Función de ayuda para generar números aleatorios más seguros\nconst secureRandom = () => {\n  return crypto.getRandomValues(new Uint32Array(1))[0] / (2 ** 32 - 1);\n};\n\nimport './FAQ.css';\n\nconst FAQ = () => {\n  const [expanded, setExpanded] = useState();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredFaqs, setFilteredFaqs] = useState([]);\n  const [activeCategory, setActiveCategory] = useState('Todos');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n  const particlesContainerReference = useRef(undefined);\n\n  const categories = [\n    'Todos',\n    'Básicos',\n    'Funcionalidades',\n    'Uso avanzado',\n    'Integraciones',\n    'Precios',\n    'Facturación',\n    'Seguridad',\n    'Comunidad',\n  ];\n\n  const faqs = useMemo(() => faqsData, []);\n\n  useEffect(() => {\n    let results = faqs;\n\n    if (activeCategory !== 'Todos') {\n      results = results.filter((faq) => faq.category === activeCategory);\n    }\n\n    if (searchTerm) {\n      results = results.filter(\n        (faq) =>\n          faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          faq.answer.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    setFilteredFaqs(results);\n    setCurrentPage(1); // Reset to first page on filter change\n  }, [searchTerm, activeCategory, faqs]);\n\n  const totalPages = Math.ceil(filteredFaqs.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentFaqs = filteredFaqs.slice(startIndex, endIndex);\n\n  const toggleFAQ = (index) => {\n    setExpanded(expanded === index ? undefined : index);\n    if (expanded !== index && particlesContainerReference.current) {\n      const clickWave = document.createElement('div');\n      clickWave.classList.add('click-wave');\n      particlesContainerReference.current.append(clickWave);\n      setTimeout(() => {\n        if (particlesContainerReference.current.contains(clickWave)) {\n          clickWave.remove();\n        }\n      }, 600);\n    }\n  };\n\n  const createParticlesBurst = (x, y) => {\n    if (!particlesContainerReference.current) return;\n    for (let index = 0; index < 5; index++) {\n      const particle = document.createElement('div');\n      particle.classList.add('interactive-particle');\n      particle.style.left = `${x}px`;\n      particle.style.top = `${y}px`;\n      const hue = Math.floor(secureRandom() * 60) + 240;\n      particle.style.backgroundColor = `hsl(${hue}, 100%, 70%)`;\n      const size = secureRandom() * 6 + 3;\n      particle.style.width = `${size}px`;\n      particle.style.height = `${size}px`;\n      particlesContainerReference.current.append(particle);\n      setTimeout(() => {\n        const angle = secureRandom() * Math.PI * 2;\n        const distance = secureRandom() * 50 + 30;\n        const xEnd = Math.cos(angle) * distance;\n        const yEnd = Math.sin(angle) * distance;\n        particle.style.transform = `translate(${xEnd}px, ${yEnd}px)`;\n        particle.style.opacity = '0';\n      }, 10);\n      setTimeout(() => {\n        if (particlesContainerReference.current.contains(particle)) {\n          particle.remove();\n        }\n      }, 600);\n    }\n  };\n\n  const handleClick = (event) => {\n    createParticlesBurst(event.clientX, event.clientY);\n  };\n\n  const goToPage = (page) => {\n    setExpanded(undefined);\n    setCurrentPage(page);\n  };\n\n  const goToPreviousPage = () => {\n    if (currentPage > 1) {\n      setExpanded(undefined);\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const goToNextPage = () => {\n    if (currentPage < totalPages) {\n      setExpanded(undefined);\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  return (\n    <div className='faq-wrapper'>\n      <motion.div\n        className='faq-page'\n        onClick={handleClick}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.8, ease: 'easeOut' }}\n      >\n        <div className='cosmic-lights'>\n          <div className='light-beam light-beam-1' />\n          <div className='light-beam light-beam-2' />\n          <div className='light-beam light-beam-3' />\n        </div>\n        <div className='particles' ref={particlesContainerReference}>\n          {Array.from({ length: 6 }).map((_, index) => (\n            <div\n              key={`particle-${index + 1}`}\n              className={`particle particle-${index + 1}`}\n            />\n          ))}\n        </div>\n        <motion.div\n          className='faq-container'\n          initial={{ opacity: 0, scale: 0.9, y: 50 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={{ duration: 0.8, ease: 'easeOut', delay: 0.2 }}\n        >\n          <div className='faq-header'>\n            <motion.h1\n              className='faq-title'\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n            >\n              Centro de Conocimiento Plubot\n              <img src={logo} alt='Plubot Logo' className='faq-title-logo' />\n            </motion.h1>\n            <motion.p\n              className='faq-subtitle'\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.5, delay: 0.4 }}\n            >\n              Todo lo que necesitas saber sobre la plataforma y el universo\n              Plubot\n            </motion.p>\n          </div>\n          <motion.div\n            className='faq-search-box'\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.5, delay: 0.5 }}\n          >\n            <input\n              type='text'\n              placeholder='Buscar preguntas...'\n              value={searchTerm}\n              onChange={(event) => setSearchTerm(event.target.value)}\n              className='faq-search-input'\n            />\n            <span className='faq-search-icon'>🔍</span>\n          </motion.div>\n          <motion.div\n            className='faq-categories'\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.6 }}\n          >\n            {categories.map((category) => (\n              <motion.button\n                key={category}\n                className={`faq-category-btn ${activeCategory === category ? 'active' : ''}`}\n                onClick={() => setActiveCategory(category)}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                transition={{ duration: 0.2 }}\n              >\n                {category}\n              </motion.button>\n            ))}\n          </motion.div>\n          <motion.div\n            className='faq-results-count'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.7 }}\n          >\n            Mostrando {filteredFaqs.length} de {faqs.length} preguntas\n          </motion.div>\n          <div className='faq-list'>\n            <AnimatePresence>\n              {currentFaqs.length > 0 ? (\n                currentFaqs.map((faq, index) => (\n                  <motion.div\n                    key={faq.question}\n                    className='faq-card'\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: 20 }}\n                    transition={{ duration: 0.4, delay: index * 0.05 }}\n                    layout\n                  >\n                    <div\n                      role='button'\n                      tabIndex='0'\n                      className='faq-question'\n                      onClick={() => toggleFAQ(startIndex + index)}\n                      onKeyDown={(event) => {\n                        if (event.key === 'Enter' || event.key === ' ') {\n                          toggleFAQ(startIndex + index);\n                        }\n                      }}\n                    >\n                      <span className='faq-question-icon'>{faq.icon}</span>\n                      {faq.question}\n                      <span\n                        className={`faq-icon ${expanded === startIndex + index ? 'open' : ''}`}\n                      >\n                        +\n                      </span>\n                    </div>\n                    <AnimatePresence>\n                      {expanded === startIndex + index && (\n                        <motion.div\n                          className='faq-answer'\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ height: 'auto', opacity: 1 }}\n                          exit={{ height: 0, opacity: 0 }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        >\n                          <div className='faq-answer-content'>\n                            <div className='faq-badge'>{faq.category}</div>\n                            <p>{faq.answer}</p>\n                          </div>\n                        </motion.div>\n                      )}\n                    </AnimatePresence>\n                  </motion.div>\n                ))\n              ) : (\n                <motion.div\n                  className='faq-no-results'\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.5 }}\n                >\n                  <div className='faq-no-results-icon'>🔍</div>\n                  <h3>No encontramos resultados</h3>\n                  <p>Intenta con otra búsqueda o categoría</p>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n          {totalPages > 1 && (\n            <motion.div\n              className='faq-pagination'\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.5, delay: 0.8 }}\n            >\n              <motion.button\n                className='pagination-btn'\n                onClick={(event) => {\n                  goToPreviousPage();\n                  event.preventDefault();\n                }}\n                disabled={currentPage === 1}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                Anterior\n              </motion.button>\n              <div className='pagination-pages'>\n                {Array.from(\n                  { length: totalPages },\n                  (_, index) => index + 1,\n                ).map((pageNumber) => (\n                  <motion.button\n                    key={pageNumber}\n                    className={`pagination-page ${currentPage === pageNumber ? 'active' : ''}`}\n                    onClick={(event) => {\n                      goToPage(pageNumber);\n                      event.preventDefault();\n                    }}\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                  >\n                    {pageNumber}\n                  </motion.button>\n                ))}\n              </div>\n              <motion.button\n                className='pagination-btn'\n                onClick={(event) => {\n                  goToNextPage();\n                  event.preventDefault();\n                }}\n                disabled={currentPage === totalPages}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                Siguiente\n              </motion.button>\n            </motion.div>\n          )}\n          <motion.div\n            className='faq-footer'\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.8 }}\n          >\n            <p>\n              ¿No encuentras lo que buscas?{' '}\n              <a href='/contact' className='neo-link'>\n                Contacta al soporte\n              </a>\n            </p>\n          </motion.div>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default FAQ;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/faq/faq-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/Historyverse.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/CharacterCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/CharacterSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/CtaSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/GameUI.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/GamificationSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/HistoryverseHero.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/MapSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/components/OriginSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/historyverse-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/useHistoryverse.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 2,
        "message": "React Hook useEffect has missing dependencies: 'badges', 'setBadges', and 'setShowBadgeNotification'. Either include them or remove the dependency array. If 'setBadges' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
        "line": 30,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 30,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [badges, setBadges, setShowBadgeNotification, userLevel]",
            "fix": {
              "range": [812, 823],
              "text": "[badges, setBadges, setShowBadgeNotification, userLevel]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/historyverse/useHistoryverseEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/home/Home.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/layout/Layout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/layout/components/FlowStatusNotifier.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/layout/components/GlobalModals.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/layout/hooks/useHeaderAnimations.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/legal/Privacy.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (82). Maximum allowed is 80.",
        "line": 17,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 107,
        "endColumn": 2,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/legal/Seguridad.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (497). Maximum allowed is 80.",
        "line": 196,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 731,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence, useAnimation } from 'framer-motion';\nimport {\n  Shield,\n  Lock,\n  CheckCircle,\n  Eye,\n  BarChart3,\n  FileCheck,\n} from 'lucide-react';\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport aegisAvatar from '@assets/img/characters/seguridad/aegis-seguridad.webp';\n\n// Función de ayuda para generar números aleatorios más seguros\nconst secureRandom = () => {\n  return crypto.getRandomValues(new Uint32Array(1))[0] / (2 ** 32 - 1);\n};\n\nimport './Seguridad.css';\n\nconst PHRASE_COUNT = 5;\n\nconst PHRASE_CHANGE_INTERVAL = 4000;\nconst SCANNER_SPEED = 1.5;\nconst AUDIO_VOLUME = 0.5;\nconst DOT_MATRIX_COUNT = 36;\nconst PARTICLE_COUNT = 6;\n\n// Arrays estáticos para optimizar el rendimiento y proporcionar claves estables.\nconst DOTS = Array.from({ length: DOT_MATRIX_COUNT }, (_, index) => ({\n  id: `dot-${index}`,\n}));\nconst PARTICLES = Array.from({ length: PARTICLE_COUNT }, (_, index) => ({\n  id: `particle-${index}`,\n  index,\n}));\nconst H_LINES = Array.from({ length: 8 }, (_, index) => ({\n  id: `hline-${index}`,\n}));\nconst V_LINES = Array.from({ length: 8 }, (_, index) => ({\n  id: `vline-${index}`,\n}));\n\n// Se utiliza una función con un 'switch' para el acceso controlado a las frases.\n// Este patrón elimina el acceso dinámico a propiedades (array[index])\n// y satisface al linter de seguridad, erradicando el falso positivo.\nconst getPhraseSafely = (index) => {\n  switch (index) {\n    case 0: {\n      return 'Tu seguridad es mi misión.';\n    }\n    case 1: {\n      return 'Datos protegidos, confianza asegurada.';\n    }\n    case 2: {\n      return 'Pluniverse protegido 24/7.';\n    }\n    case 3: {\n      return 'Aegis vigila, tú creas.';\n    }\n    case 4: {\n      return 'Cifrado cuántico activado.';\n    }\n    default: {\n      return 'Tu seguridad es mi misión.';\n    }\n  }\n};\n\nconst ShieldMatrix = React.memo(() => {\n  return (\n    <div className='dot-matrix'>\n      <div className='dot-grid'>\n        {DOTS.map((dot) => (\n          <motion.div\n            key={dot.id}\n            className='matrix-dot'\n            initial={{ opacity: 0 }}\n            animate={{\n              opacity: secureRandom() > 0.7 ? 0.8 : 0.2,\n              scale: secureRandom() > 0.8 ? [1, 1.3, 1] : 1,\n            }}\n            transition={{\n              duration: 2 + secureRandom() * 2,\n              repeat: Infinity,\n              repeatType: 'reverse',\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\nShieldMatrix.displayName = 'ShieldMatrix';\n\nconst SecurityRadar = React.memo(() => {\n  return (\n    <div className='radar-container'>\n      <div className='radar-content'>\n        <div className='security-radar'>\n          <motion.div\n            className='radar-ring radar-outer-ring'\n            animate={{ scale: [1, 1.5, 1], opacity: [0.7, 0.3, 0.7] }}\n            transition={{ repeat: Infinity, duration: 3, ease: 'easeInOut' }}\n          />\n          <motion.div\n            className='radar-ring radar-inner-ring'\n            animate={{\n              boxShadow: [\n                '0 0 5px var(--seguridad-primary)',\n                '0 0 15px var(--seguridad-primary)',\n                '0 0 5px var(--seguridad-primary)',\n              ],\n            }}\n            transition={{ repeat: Infinity, duration: 2, ease: 'easeInOut' }}\n          />\n          <motion.div\n            className='radar-sweep'\n            animate={{ rotate: 360 }}\n            transition={{ repeat: Infinity, duration: 4, ease: 'linear' }}\n          />\n        </div>\n        <motion.p\n          className='radar-message'\n          animate={{\n            textShadow: [\n              '0 0 5px var(--seguridad-primary)',\n              '0 0 15px var(--seguridad-primary)',\n              '0 0 5px var(--seguridad-primary)',\n            ],\n          }}\n          transition={{ repeat: Infinity, duration: 3, ease: 'easeInOut' }}\n        >\n          &quot;El Pluniverse está blindado. Crea con confianza.&quot;\n        </motion.p>\n      </div>\n    </div>\n  );\n});\nSecurityRadar.displayName = 'SecurityRadar';\n\nconst buttonVariants = {\n  hover: {\n    scale: 1.05,\n    boxShadow: '0 0 15px var(--seguridad-glow-primary)',\n  },\n  tap: { scale: 0.97 },\n};\n\nconst metricVariants = {\n  hidden: { opacity: 0, y: 15 },\n  visible: { opacity: 1, y: 0 },\n};\n\nconst detailsVariants = {\n  hidden: { opacity: 0, height: 0, scale: 0.98 },\n  visible: {\n    opacity: 1,\n    height: 'auto',\n    scale: 1,\n    transition: {\n      duration: 0.5,\n      ease: 'easeOut',\n      when: 'beforeChildren',\n      staggerChildren: 0.1,\n    },\n  },\n  exit: {\n    opacity: 0,\n    height: 0,\n    scale: 0.98,\n    transition: { duration: 0.3, ease: 'easeIn' },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, x: -20 },\n  visible: { opacity: 1, x: 0 },\n};\n\nconst getTransformStyle = (tiltValues) => {\n  return `perspective(1000px) rotateX(${tiltValues.x}deg) rotateY(${tiltValues.y}deg)`;\n};\n\nconst getStaticTransformStyle = () => {\n  return 'perspective(1000px) rotateX(0deg) rotateY(0deg)';\n};\n\nconst Seguridad = () => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [phraseIndex, setPhraseIndex] = useState(0);\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n  const [isShieldActivated, setIsShieldActivated] = useState(false);\n\n  const containerReference = useRef(undefined);\n  const audioReference = useRef(undefined);\n  const scannerReference = useRef(undefined);\n  const animationFrameReference = useRef(undefined);\n\n  const controlsMetrics = useAnimation();\n  const controlsTitle = useAnimation();\n  const controlsShield = useAnimation();\n\n  useEffect(() => {\n    const sequence = async () => {\n      await controlsTitle.start({\n        opacity: 1,\n        y: 0,\n        scale: 1,\n        transition: { duration: 0.8 },\n      });\n      await controlsShield.start({\n        opacity: 1,\n        scale: 1,\n        filter: 'drop-shadow(0 0 15px var(--seguridad-primary))',\n        transition: { duration: 0.6 },\n      });\n      controlsMetrics.start({\n        opacity: 1,\n        y: 0,\n        transition: { staggerChildren: 0.1, duration: 0.5 },\n      });\n      setIsShieldActivated(true);\n    };\n\n    sequence();\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n\n    audioReference.current = new Audio('/sounds/cyber-activation.mp3');\n    audioReference.current.load();\n\n    return () => {\n      if (audioReference.current) audioReference.current.pause();\n    };\n  }, [controlsTitle, controlsShield, controlsMetrics]);\n\n  useEffect(() => {\n    if (!scannerReference.current || !containerReference.current) {\n      return () => {\n        setIsShieldActivated(false);\n      };\n    }\n\n    const scanner = scannerReference.current;\n    let posY = 0;\n    let direction = 1;\n    const maxHt = containerReference.current.clientHeight - 2;\n\n    const animateScan = () => {\n      if (posY >= maxHt) {\n        direction = -1;\n      }\n      if (posY <= 0) {\n        direction = 1;\n      }\n      posY += SCANNER_SPEED * direction;\n      scanner.style.transform = `translateY(${posY}px)`;\n      animationFrameReference.current = requestAnimationFrame(animateScan);\n    };\n\n    animationFrameReference.current = requestAnimationFrame(animateScan);\n\n    return () => {\n      if (animationFrameReference.current) {\n        cancelAnimationFrame(animationFrameReference.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPhraseIndex((previous) => (previous + 1) % PHRASE_COUNT);\n    }, PHRASE_CHANGE_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (!containerReference.current) {\n      return () => {\n        setIsHovering(false);\n      };\n    }\n\n    let timeoutId;\n    const handleMouseMove = (event) => {\n      if (timeoutId) return;\n\n      timeoutId = setTimeout(() => {\n        if (!containerReference.current) return;\n        const rect = containerReference.current.getBoundingClientRect();\n        setCursorPosition({\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top,\n        });\n        timeoutId = undefined;\n      }, 16);\n    };\n\n    globalThis.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      globalThis.removeEventListener('mousemove', handleMouseMove);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  const playActivationSound = useCallback(() => {\n    if (audioReference.current) {\n      audioReference.current.currentTime = 0;\n      audioReference.current.volume = AUDIO_VOLUME;\n      audioReference.current.play().catch(() => {\n        // Manejo silencioso de error\n      });\n    }\n  }, []);\n\n  const handleMouseEnter = useCallback(() => setIsHovering(true), []);\n  const handleMouseLeave = useCallback(() => setIsHovering(false), []);\n\n  const handleToggleDetails = useCallback(() => {\n    setShowDetails((previous) => !previous);\n    playActivationSound();\n  }, [playActivationSound]);\n\n  const tilt = useMemo(() => {\n    if (!containerReference.current || !isHovering) return { x: 0, y: 0 };\n    const rect = containerReference.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const tiltX = ((cursorPosition.y - centerY) / centerY) * 3;\n    const tiltY = ((cursorPosition.x - centerX) / centerX) * -3;\n    return { x: tiltX, y: tiltY };\n  }, [cursorPosition, isHovering]);\n\n  const renderMetricCards = useMemo(\n    () => (\n      <>\n        <motion.div\n          className='metric-card primary-border'\n          variants={metricVariants}\n        >\n          <Lock className='metric-icon primary-text' size={24} />\n          <span className='metric-label primary-text'>Cifrado</span>\n          <span className='metric-value'>SSL/TLS+</span>\n        </motion.div>\n        <motion.div\n          className='metric-card secondary-border'\n          variants={metricVariants}\n        >\n          <Eye className='metric-icon secondary-text' size={24} />\n          <span className='metric-label secondary-text'>Aegis-Status</span>\n          <span className='metric-value'>Vigilante</span>\n        </motion.div>\n        <motion.div\n          className='metric-card primary-border'\n          variants={metricVariants}\n        >\n          <CheckCircle className='metric-icon primary-text' size={24} />\n          <span className='metric-label primary-text'>Protección</span>\n          <span className='metric-value'>Activa</span>\n        </motion.div>\n      </>\n    ),\n    [],\n  );\n\n  const renderParticles = useMemo(\n    () => (\n      <>\n        {PARTICLES.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className='particle'\n            animate={{\n              opacity: [0.3, 0.8, 0.3],\n              y: [0, -10, 0],\n              x: [0, 5, 0],\n            }}\n            transition={{\n              repeat: Infinity,\n              duration: 3 + particle.index * 0.5,\n              ease: 'easeInOut',\n              delay: particle.index * 0.2,\n            }}\n          />\n        ))}\n      </>\n    ),\n    [],\n  );\n\n  const renderDetailItems = useMemo(\n    () => (\n      <>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <Lock className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Privacidad:</div>\n            <p className='detail-text'>\n              Plubot nunca comparte, vende ni intercambia tus datos.{' '}\n              <span className='highlight'>Tú controlas tu información.</span>\n            </p>\n          </div>\n        </motion.div>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <BarChart3 className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Integraciones:</div>\n            <p className='detail-text'>\n              Conexiones con WhatsApp, Instagram, Stripe y más, protegidas con{' '}\n              <span className='highlight'>APIs oficiales</span> y tokens\n              encriptados de alta renovación.\n            </p>\n          </div>\n        </motion.div>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <FileCheck className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Cumplimiento:</div>\n            <p className='detail-text'>\n              Cumplimos con normativas internacionales como{' '}\n              <span className='highlight'>GDPR y CCPA</span>, con controles de\n              auditoría continua.\n            </p>\n          </div>\n        </motion.div>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <CheckCircle className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Respaldo:</div>\n            <p className='detail-text'>\n              Copias de seguridad automáticas para garantizar la{' '}\n              <span className='highlight'>continuidad</span> de tu operación.\n            </p>\n          </div>\n        </motion.div>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <Eye className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Auditoría:</div>\n            <p className='detail-text'>\n              Controla la actividad de tus Plubots y gestiona accesos desde tu{' '}\n              <span className='highlight'>panel de control</span>.\n            </p>\n          </div>\n        </motion.div>\n        <motion.div variants={itemVariants} className='detail-item'>\n          <div className='detail-icon-wrapper'>\n            <Shield className='secondary-text' />\n          </div>\n          <div className='detail-content'>\n            <div className='detail-label'>{'>'} Marketplace:</div>\n            <p className='detail-text'>\n              Transacciones protegidas y auditadas para garantizar{' '}\n              <span className='highlight'>seguridad financiera</span>.\n            </p>\n          </div>\n        </motion.div>\n      </>\n    ),\n    [],\n  );\n\n  const currentPhrase = getPhraseSafely(phraseIndex);\n\n  return (\n    <div className='seguridad-section' ref={containerReference}>\n      <div className='digital-grid'>\n        <div className='grid-lines grid-horizontal'>\n          {H_LINES.map((line) => (\n            <div key={line.id} className='grid-line h-line' />\n          ))}\n        </div>\n        <div className='grid-lines grid-vertical'>\n          {V_LINES.map((line) => (\n            <div key={line.id} className='grid-line v-line' />\n          ))}\n        </div>\n      </div>\n\n      <div className='scanner-line' ref={scannerReference} />\n\n      <div className='content-wrapper'>\n        <motion.h1\n          className='title seguridad-animate-glitch'\n          initial={{ opacity: 0, y: -30, scale: 0.95 }}\n          animate={controlsTitle}\n        >\n          <span className='title-bracket'>[</span>\n          Seguridad Plubot\n          <span className='title-bracket'>]</span>\n          <span\n            className='glitch-layer seguridad-animate-glitch'\n            data-text='Seguridad Plubot'\n          >\n            Seguridad Plubot\n          </span>\n          <span\n            className='glitch-layer seguridad-animate-glitch-reverse'\n            data-text='Seguridad Plubot'\n          >\n            Seguridad Plubot\n          </span>\n        </motion.h1>\n\n        <motion.div\n          className='badge'\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n        >\n          <span className='subtitle'>Protocolo Aegis v4.2</span>\n        </motion.div>\n\n        <motion.div\n          className='main-card'\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2, duration: 0.7 }}\n          style={{\n            transform: isHovering\n              ? getTransformStyle({ x: tilt.x, y: tilt.y })\n              : getStaticTransformStyle(),\n            transition: 'transform 0.6s ease-out',\n          }}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          <div className='card-corner corner-tl' />\n          <div className='card-corner corner-tr' />\n          <div className='card-corner corner-bl' />\n          <div className='card-corner corner-br' />\n\n          <ShieldMatrix />\n\n          <div className='avatar-container'>\n            <motion.div\n              className='avatar-wrapper'\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={controlsShield}\n            >\n              <motion.div\n                className='avatar-aura seguridad-animate-pulse'\n                animate={{ scale: [1, 1.05, 1], opacity: [0.2, 0.3, 0.2] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 3,\n                  ease: 'easeInOut',\n                }}\n              />\n              <motion.img\n                src={aegisAvatar}\n                alt='Aegis el protector'\n                className='avatar-image'\n                width={80}\n                height={80}\n                loading='lazy'\n                onError={(event) =>\n                  (event.target.src = '/api/placeholder/80/80')\n                }\n                initial={{ scale: 0.8 }}\n                animate={{\n                  scale: isShieldActivated ? [0.98, 1.02, 0.98] : 0.98,\n                  rotate: isShieldActivated ? [0, 2, -2, 0] : 0,\n                }}\n                transition={{\n                  duration: 6,\n                  repeat: isShieldActivated ? Infinity : 0,\n                  ease: 'easeInOut',\n                }}\n              />\n              <motion.div\n                className='avatar-ring seguridad-animate-rotate'\n                animate={{ opacity: [0.7, 0.3, 0.7] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 4,\n                  ease: 'easeInOut',\n                }}\n              />\n              <motion.div\n                className='avatar-outer-ring seguridad-animate-rotate'\n                animate={{ opacity: [0.5, 0.2, 0.5] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 4,\n                  ease: 'easeInOut',\n                  delay: 0.5,\n                }}\n              />\n            </motion.div>\n\n            <AnimatePresence mode='wait'>\n              <motion.div\n                key={phraseIndex}\n                className='dialog-box seguridad-animate-fade-up'\n                initial={{ opacity: 0, y: 15 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -15 }}\n                transition={{ duration: 0.6 }}\n              >\n                <div className='dialog-corner dialog-corner-tl' />\n                <div className='dialog-corner dialog-corner-tr' />\n                <div className='dialog-corner dialog-corner-bl' />\n                <div className='dialog-corner dialog-corner-br' />\n                <span className='dialog-text'>{currentPhrase}</span>\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          <motion.div\n            className='metrics-grid'\n            initial={{ opacity: 0, y: 20 }}\n            animate={controlsMetrics}\n          >\n            {renderMetricCards}\n          </motion.div>\n\n          <motion.div\n            className='security-text mb-8'\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8, duration: 0.6 }}\n          >\n            <p className='mb-4'>\n              Todas las conexiones y datos están protegidos con{' '}\n              <span className='highlight'>cifrado SSL/TLS</span> de última\n              generación con validación de certificados reforzada.\n            </p>\n            <p>\n              Tus credenciales están{' '}\n              <span className='highlight'>cifradas de extremo a extremo</span> y\n              protegidas con autenticación segura mediante tokens temporales y\n              verificación en dos pasos.\n            </p>\n          </motion.div>\n\n          <motion.button\n            className='button w-full'\n            variants={buttonVariants}\n            whileHover='hover'\n            whileTap='tap'\n            onClick={handleToggleDetails}\n          >\n            <motion.div className='shine seguridad-animate-slide' />\n            <span>\n              {showDetails ? 'Cerrar Protocolo' : 'Desplegar Protocolo'}\n            </span>\n            <span className='button-icon'>{showDetails ? '×' : '▶'}</span>\n          </motion.button>\n\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                className='details-container'\n                variants={detailsVariants}\n                initial='hidden'\n                animate='visible'\n                exit='exit'\n              >\n                <div className='details-header'>\n                  <div className='header-dot' />\n                  <div className='header-title'>AEGIS.SECURITY.PROTOCOLS</div>\n                  <div className='header-dots'>\n                    <div className='small-dot' />\n                    <div className='small-dot' />\n                    <div className='small-dot' />\n                  </div>\n                </div>\n                <div className='details-content'>\n                  {renderDetailItems}\n                  <SecurityRadar />\n                  <div className='pt-6 pb-2 text-center'>\n                    <Link to='/welcome'>\n                      <motion.button\n                        className='cta-button'\n                        variants={buttonVariants}\n                        whileHover='hover'\n                        whileTap='tap'\n                        onClick={playActivationSound}\n                      >\n                        <motion.div className='shine seguridad-animate-slide' />\n                        <span>Crear Tu Plubot</span>\n                        <span className='button-icon'>▶</span>\n                      </motion.button>\n                    </Link>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n\n      <div className='floating-particles'>{renderParticles}</div>\n\n      {isHovering && (\n        <motion.div\n          className='custom-cursor'\n          style={{\n            transform: `translate(${cursorPosition.x}px, ${cursorPosition.y}px)`,\n          }}\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{\n            opacity: 0.8,\n            scale: 1,\n            boxShadow: 'var(--seguridad-glow-primary)',\n          }}\n          transition={{ duration: 0.2 }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(Seguridad);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/legal/Terms.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/marketplace/Marketplace.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (267). Maximum allowed is 80.",
        "line": 34,
        "column": 21,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 322,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Particles } from '@tsparticles/react';\nimport { loadSlim } from '@tsparticles/slim';\nimport { gsap } from 'gsap';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport LazyImage from '@/components/common/LazyImage';\nimport { powers } from '@/data/powers';\nimport ByteGuide from '@components/pluniverse/ByteGuide.jsx';\n\nimport usePlubotCreation from '../../hooks/usePlubotCreation';\n\nimport './Marketplace.css';\n\nconst categories = [\n  'todos',\n  'comunicacion',\n  'ecommerce',\n  'pagos',\n  'reservas',\n  'productividad',\n  'automatizacion',\n  'analiticas',\n  'inteligencia',\n  'marketing',\n  'desarrollo',\n  'crm',\n  'finanzas',\n  'soporte',\n  'encuestas',\n  'diseno',\n];\n\nconst Marketplace = () => {\n  const [filter, setFilter] = useState('todos');\n  const [selectedModule, setSelectedModule] = useState();\n  const [notification, setNotification] = useState();\n\n  const { plubotData, updatePlubotData, updateActiveSection } =\n    usePlubotCreation();\n  const navigate = useNavigate();\n\n  const filteredModules =\n    filter === 'todos'\n      ? powers\n      : powers.filter((module_) => module_.category === filter);\n\n  const particlesInit = useCallback(async (engine) => {\n    await loadSlim(engine);\n  }, []);\n\n  const particlesOptions = {\n    particles: {\n      number: { value: 80, density: { enable: true, value_area: 800 } },\n      color: { value: '#00e0ff' },\n      shape: { type: 'circle' },\n      opacity: { value: 0.5, random: true },\n      size: { value: 3, random: true },\n      line_linked: {\n        enable: true,\n        distance: 150,\n        color: '#00e0ff',\n        opacity: 0.4,\n        width: 1,\n      },\n      move: {\n        enable: true,\n        speed: 2,\n        direction: 'none',\n        random: false,\n        straight: false,\n        out_mode: 'out',\n        bounce: false,\n      },\n    },\n    interactivity: {\n      detect_on: 'canvas',\n      events: {\n        onhover: { enable: true, mode: 'repulse' },\n        onclick: { enable: true, mode: 'push' },\n        resize: true,\n      },\n      modes: {\n        repulse: { distance: 100, duration: 0.4 },\n        push: { particles_nb: 4 },\n      },\n    },\n    retina_detect: true,\n    fullScreen: { enable: true, zIndex: -1 },\n    background: { color: 'transparent' },\n  };\n\n  // Agregar clase al body para identificar la página\n  useEffect(() => {\n    document.body.classList.add('marketplace-page');\n    return () => {\n      document.body.classList.remove('marketplace-page');\n    };\n  }, []);\n\n  const handleAddPower = (powerId) => {\n    const currentPowers = Array.isArray(plubotData.powers)\n      ? [...plubotData.powers]\n      : [];\n\n    if (currentPowers.includes(powerId)) {\n      setNotification({\n        type: 'error',\n        message: 'Este poder ya está agregado.',\n      });\n      setTimeout(() => setNotification(undefined), 3000);\n      return;\n    }\n\n    if (currentPowers.length >= 3) {\n      setNotification({\n        type: 'error',\n        message: 'Ya has alcanzado el límite de 3 poderes.',\n      });\n      setTimeout(() => setNotification(undefined), 3000);\n      return;\n    }\n\n    const updatedPowers = [...currentPowers, powerId];\n    updatePlubotData({ powers: updatedPowers });\n    setNotification({\n      type: 'success',\n      message: `¡${powers.find((module_) => module_.id === powerId).name} agregado con éxito!`,\n    });\n    setTimeout(() => {\n      setNotification(undefined);\n      updateActiveSection('powerConfig');\n      navigate('/plubot/create');\n    }, 2000);\n    setSelectedModule(undefined);\n  };\n\n  useEffect(() => {\n    const animateElements = () => {\n      const cardElements = document.querySelectorAll(\n        '.extension-card, .marketplace-title, .marketplace-subtitle, .filter-button',\n      );\n      if (cardElements.length > 0) {\n        gsap.fromTo(\n          cardElements,\n          { opacity: 0, y: 50 },\n          {\n            opacity: 1,\n            y: 0,\n            duration: 1,\n            stagger: 0.2,\n            ease: 'power3.out',\n            delay: 0.5,\n          },\n        );\n      }\n    };\n\n    const timeoutId = setTimeout(animateElements, 500);\n\n    return () => clearTimeout(timeoutId);\n  }, [filteredModules]);\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.key === 'Escape') {\n        setSelectedModule(undefined);\n      }\n    };\n\n    if (selectedModule) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedModule]);\n\n  return (\n    <div className='marketplace'>\n      <Particles\n        id='marketplace-particles'\n        init={particlesInit}\n        options={particlesOptions}\n      />\n      <div className='marketplace-content'>\n        <h1 className='marketplace-title' style={{ opacity: 1 }}>\n          Mercado de Extensiones\n        </h1>\n        <p className='marketplace-subtitle' style={{ opacity: 1 }}>\n          Potencia tu Plubot con extensiones y plantillas únicas. ¡Explora y\n          personaliza tu experiencia!\n        </p>\n\n        <div className='marketplace-filters'>\n          {categories.map((cat) => (\n            <button\n              key={cat}\n              onClick={() => setFilter(cat)}\n              className={`filter-button ${filter === cat ? 'active' : ''}`}\n            >\n              {cat.charAt(0).toUpperCase() + cat.slice(1)}\n            </button>\n          ))}\n        </div>\n\n        {notification && (\n          <div className={`notification ${notification.type}`}>\n            {notification.message}\n          </div>\n        )}\n\n        <div className='extensions-grid'>\n          {filteredModules.length > 0 ? (\n            filteredModules.map((extension) => (\n              <div\n                className='extension-card'\n                key={extension.id}\n                role='button'\n                tabIndex='0'\n                onClick={() => setSelectedModule(extension)}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter' || event.key === ' ') {\n                    setSelectedModule(extension);\n                  }\n                }}\n                style={{ opacity: 1 }}\n              >\n                <LazyImage\n                  src={extension.image}\n                  alt={extension.name}\n                  className='extension-image'\n                  placeholderColor='#1a1e3a'\n                  onError={(error) => {\n                    error.target.src =\n                      'https://via.placeholder.com/150?text=Image+Not+Found';\n                  }}\n                />\n                <h3>{extension.name}</h3>\n                <p>{extension.description}</p>\n                <div className='extension-footer'>\n                  <span className='extension-price'>Desbloquear</span>\n                  <button\n                    className='extension-buy-btn'\n                    onClick={(event) => {\n                      event.stopPropagation();\n                      handleAddPower(extension.id);\n                    }}\n                  >\n                    Agregar poder\n                  </button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <p style={{ color: '#fff', opacity: 1 }}>\n              No hay extensiones disponibles para esta categoría.\n            </p>\n          )}\n        </div>\n      </div>\n\n      {selectedModule && (\n        <div\n          className='extension-modal-overlay'\n          role='button'\n          tabIndex='0'\n          onClick={(event) => {\n            if (event.target === event.currentTarget) {\n              setSelectedModule(undefined);\n            }\n          }}\n          onKeyDown={(event) => {\n            if (event.key === 'Enter' || event.key === ' ') {\n              setSelectedModule(undefined);\n            }\n          }}\n        >\n          <div\n            className='extension-modal'\n            role='dialog'\n            aria-modal='true'\n            tabIndex='-1'\n          >\n            <button\n              className='close-modal-btn'\n              onClick={() => setSelectedModule(undefined)}\n            >\n              ×\n            </button>\n            <LazyImage\n              src={selectedModule.image}\n              alt={selectedModule.name}\n              className='modal-image'\n              placeholderColor='#1a1e3a'\n              threshold={0.5}\n              onError={(error) => {\n                error.target.src =\n                  'https://via.placeholder.com/200?text=Image+Not+Found';\n              }}\n            />\n            <h2>{selectedModule.name}</h2>\n            <p>{selectedModule.description}</p>\n            <div className='modal-price'>Desbloquear</div>\n            <button\n              className='extension-buy-btn'\n              onClick={() => handleAddPower(selectedModule.id)}\n            >\n              Agregar poder\n            </button>\n          </div>\n        </div>\n      )}\n\n      <ByteGuide\n        message='¡Bienvenido al Mercado! Aquí puedes encontrar \"herramientas\" para hacer tu Plubot aún más poderoso.'\n        position='bottom-right'\n      />\n    </div>\n  );\n};\n\nMarketplace.displayName = 'Marketplace';\n\nexport default Marketplace;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/notfound/NotFound.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/plans/Plans.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'Plans' has too many lines (308). Maximum allowed is 80.",
        "line": 10,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 350,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 56,
        "column": 30,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 56,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 60,
        "column": 30,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 60,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 60,
        "column": 54,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 60,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 67,
        "column": 23,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 67,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 68,
        "column": 26,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 68,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion } from 'framer-motion';\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\n\nimport logo from '@assets/img/logo.svg';\n\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport './Plans.css';\n\nexport default function Plans() {\n  const { width } = useWindowSize();\n  const [isVisible, setIsVisible] = useState(false);\n  const [activePlan, setActivePlan] = useState();\n  const particlesContainerReference = useRef();\n  const plansSectionReference = useRef();\n\n  useEffect(() => {\n    const element = plansSectionReference.current;\n    const observer = new IntersectionObserver(\n      ([intersectionEntry]) => {\n        setIsVisible(intersectionEntry.isIntersecting);\n      },\n      { threshold: 0.2, rootMargin: '50px' },\n    );\n\n    if (element) {\n      observer.observe(element);\n    }\n\n    return () => {\n      if (element) {\n        observer.unobserve(element);\n      }\n    };\n  }, []);\n\n  /* eslint-disable sonarjs/pseudo-random */\n  // Se deshabilita la regla de 'pseudo-random' porque Math.random es suficiente\n  // para una animación puramente decorativa y no requiere seguridad criptográfica.\n  const createParticlesBurst = (x, y) => {\n    if (!particlesContainerReference.current || !isVisible) return;\n\n    const particleCount = (width || 0) < 768 ? 2 : 3;\n\n    for (let index = 0; index < particleCount; index++) {\n      const particle = document.createElement('div');\n      particle.classList.add('interactive-particle');\n\n      const rect = particlesContainerReference.current.getBoundingClientRect();\n      const relativeX = Math.max(0, Math.min(x - rect.left, rect.width));\n      const relativeY = Math.max(0, Math.min(y - rect.top, rect.height));\n\n      particle.style.left = `${relativeX}px`;\n      particle.style.top = `${relativeY}px`;\n\n      const hue = Math.floor(Math.random() * 40) + 180;\n      particle.style.backgroundColor = `hsl(${hue}, 100%, 70%)`;\n\n      const size =\n        (width || 0) < 768 ? Math.random() * 3 + 2 : Math.random() * 4 + 3;\n      particle.style.width = `${size}px`;\n      particle.style.height = `${size}px`;\n\n      particlesContainerReference.current.append(particle);\n\n      requestAnimationFrame(() => {\n        const angle = Math.random() * Math.PI * 2;\n        const distance = Math.random() * 30 + 15;\n        const xEnd = Math.cos(angle) * distance;\n        const yEnd = Math.sin(angle) * distance;\n\n        particle.style.transform = `translate(${xEnd}px, ${yEnd}px)`;\n        particle.style.opacity = '0';\n      });\n\n      setTimeout(() => {\n        if (particlesContainerReference.current && particle.parentNode) {\n          particle.remove();\n        }\n      }, 600);\n    }\n  };\n\n  const handleClick = (event) => {\n    if (!isVisible) return;\n    createParticlesBurst(event.clientX, event.clientY);\n  };\n\n  const handlePlanHover = (index) => {\n    setActivePlan(index);\n  };\n\n  const plans = [\n    {\n      name: 'Plan Despierto',\n      tagline: 'Free',\n      price: 'Gratis',\n      icon: '🚀',\n      idealFor: 'Ideal para probar y familiarizarse',\n      features: [\n        '1 Plubot Despierto activo',\n        'Respuestas ilimitadas en chat web',\n        'Flujos básicos (10 nodos)',\n        'Personalidades básicas',\n        'Editor visual de flujos',\n        'Estadísticas simples',\n        'Acceso básico al Pluniverse',\n      ],\n    },\n    {\n      name: 'Plan Poder Inicial',\n      tagline: 'Popular',\n      price: 'USD 14 / mes',\n      icon: '⚡️',\n      idealFor: 'Ideal para emprendedores y startups',\n      features: [\n        '3 Plubots activos',\n        'Chat web + WhatsApp Business',\n        'Flujos de hasta 50 nodos',\n        'Personalidades avanzadas',\n        '3 Integraciones (WhatsApp, Notion, Calendly)',\n        'Estadísticas avanzadas',\n        'Pluniverse completo hasta nivel 5',\n      ],\n    },\n    {\n      name: 'Plan Maestro',\n      tagline: 'Pro',\n      price: 'USD 29 / mes',\n      icon: '✨',\n      idealFor: 'Ideal para agencias y marcas',\n      features: [\n        '10 Plubots activos',\n        'Multi-canal: Web, WhatsApp, Instagram, Telegram',\n        'Flujos ilimitados',\n        'Personalidades premium',\n        'Todas las integraciones (Stripe, Shopify, Trello, Gmail)',\n        'Reportes avanzados exportables',\n        'Zonas exclusivas del Pluniverse',\n      ],\n    },\n    {\n      name: 'Plan Legendario',\n      tagline: 'Enterprise',\n      price: 'USD 59 / mes',\n      icon: '👑',\n      idealFor: 'Ideal para empresas y proyectos escalables',\n      features: [\n        'Plubots ilimitados',\n        'Integraciones ilimitadas',\n        'Funciones beta exclusivas',\n        'Personalización de marca completa',\n        'Funcionalidad white-label',\n        'API de reportes',\n        'Soporte VIP y consultoría mensual',\n      ],\n    },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.07,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: { type: 'spring', stiffness: 100, damping: 12 },\n    },\n  };\n\n  const isLowPerfDevice = useMemo(() => {\n    const mobileUserAgent =\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n    return (\n      (width || 0) < 768 ||\n      mobileUserAgent.test(navigator.userAgent) ||\n      (navigator.hardwareConcurrency && navigator.hardwareConcurrency < 4)\n    );\n  }, [width]);\n\n  const particles = useMemo(\n    () =>\n      Array.from({ length: isLowPerfDevice ? 3 : 6 }).map((unused, index) => ({\n        id: index,\n      })),\n    [isLowPerfDevice],\n  );\n\n  return (\n    <div className='plans-wrapper' ref={plansSectionReference}>\n      <motion.div\n        className='plans-page'\n        onClick={handleClick}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.8, ease: 'easeOut' }}\n      >\n        {!isLowPerfDevice && (\n          <div className='cosmic-lights'>\n            <div className='light-beam light-beam-1' />\n            <div className='light-beam light-beam-2' />\n            <div className='light-beam light-beam-3' />\n          </div>\n        )}\n\n        <div className='particles' ref={particlesContainerReference}>\n          {isVisible &&\n            particles.map((particle) => (\n              <div\n                key={particle.id}\n                className={`particle particle-${particle.id + 1}`}\n              />\n            ))}\n        </div>\n\n        <motion.div\n          className='plans-container'\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, ease: 'easeOut' }}\n        >\n          <motion.div\n            className='plans-header'\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            <h1 className='plans-title'>\n              Planes de Plubot\n              <img src={logo} alt='Plubot Logo' className='faq-title-logo' />\n            </h1>\n            <div className='plans-subtitle-container'>\n              <p className='plans-subtitle'>\n                Elige el plan que mejor se adapte a tus necesidades\n              </p>\n              <div className='plans-subtitle-line' />\n            </div>\n          </motion.div>\n\n          <motion.div\n            className='plans-grid'\n            variants={containerVariants}\n            initial='hidden'\n            animate={isVisible ? 'visible' : 'hidden'}\n          >\n            {plans.map((plan, index) => (\n              <motion.div\n                key={plan.name}\n                className={`plan-card ${activePlan === index ? 'plan-card-active' : ''}`}\n                variants={itemVariants}\n                onMouseEnter={() => handlePlanHover(index)}\n                onMouseLeave={() => handlePlanHover()}\n                whileHover={{\n                  scale: isLowPerfDevice ? 1.01 : 1.03,\n                  y: isLowPerfDevice ? -2 : -5,\n                  transition: { type: 'spring', stiffness: 400, damping: 17 },\n                }}\n                whileTap={{ scale: 0.98 }}\n              >\n                {plan.tagline && <div className='plan-tag'>{plan.tagline}</div>}\n                <div className='plan-header'>\n                  <div className='plan-icon-container'>\n                    <span className='plan-icon'>{plan.icon}</span>\n                  </div>\n                  <h2 className='plan-name'>{plan.name}</h2>\n                  <p className='plan-price'>{plan.price}</p>\n                </div>\n\n                <ul className='plan-features'>\n                  {plan.features.map((feature) => (\n                    <li\n                      key={`${plan.name}-${feature}`}\n                      className='plan-feature'\n                    >\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n\n                {plan.idealFor && (\n                  <p className='plan-ideal-for'>{plan.idealFor}</p>\n                )}\n\n                <motion.button\n                  className='plan-button'\n                  whileHover={{\n                    scale: 1.05,\n                    boxShadow: '0 0 15px rgba(0, 224, 255, 0.8)',\n                  }}\n                  whileTap={{ scale: 0.97 }}\n                >\n                  Seleccionar Plan\n                </motion.button>\n              </motion.div>\n            ))}\n          </motion.div>\n\n          <motion.div\n            className='plans-cta'\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}\n            transition={{ duration: 0.5, delay: 0.7 }}\n          >\n            <h3 className='plans-cta-title'>\n              ¿No estás seguro? Prueba gratis por 14 días\n            </h3>\n            <p className='plans-cta-text'>\n              Actualiza, cambia o cancela en cualquier momento. Sin compromisos.\n            </p>\n            <motion.button\n              className='plans-cta-button'\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.97 }}\n            >\n              Iniciar prueba gratuita\n            </motion.button>\n          </motion.div>\n\n          <motion.div\n            className='plans-notes'\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 10 }}\n            transition={{ duration: 0.4, delay: 0.8 }}\n          >\n            <h3>Notas:</h3>\n            <ul>\n              <li>\n                Se cobrará por uso de API externas como WhatsApp Business API\n                (Twilio o 360Dialog) al costo que ellas indiquen.\n              </li>\n              <li>Planes anuales disponibles con 20% de descuento.</li>\n              <li>\n                Plucoins y marketplace funcionan aparte con sus propias compras.\n              </li>\n            </ul>\n          </motion.div>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/Academy.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/Coliseum.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/Sanctuary.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/Tower.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/coliseum-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/BattleCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/ChallengeCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/ColiseumHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/GalleryCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/GalleryGrid.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/RankingTable.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/StatCards.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/Tabs.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/components/TowerHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/hooks/useParticleAnimation.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 28,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 28,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 30,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 30,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 32,
        "column": 17,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 32,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 35,
        "column": 24,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 35,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 37,
        "column": 24,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 37,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 39,
        "column": 18,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 39,
        "endColumn": 31,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/hooks/useTowerAnimations.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniverse/tower-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/pluniversedashboard/PluniverseDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/poderes/Poderes-about.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/poderes/Poderes.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (141). Maximum allowed is 80.",
        "line": 10,
        "column": 17,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 160,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Particles } from '@tsparticles/react';\nimport { loadSlim } from '@tsparticles/slim';\nimport { motion } from 'framer-motion';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Poderes.css';\n\nimport PoderesGrid from './PoderesGrid';\n\nconst Poderes = () => {\n  const [progress, setProgress] = useState(0);\n\n  const particlesInit = useCallback(async (engine) => {\n    await loadSlim(engine);\n  }, []);\n\n  const particlesOptions = {\n    particles: {\n      number: { value: 60, density: { enable: true, value_area: 800 } },\n      color: { value: '#00e0ff' },\n      shape: { type: 'circle' },\n      opacity: { value: 0.4, random: true },\n      size: { value: 3, random: true },\n      line_linked: {\n        enable: true,\n        distance: 150,\n        color: '#00e0ff',\n        opacity: 0.3,\n        width: 1,\n      },\n      move: {\n        enable: true,\n        speed: 1.5,\n        direction: 'none',\n        random: false,\n        straight: false,\n        out_mode: 'out',\n      },\n    },\n    interactivity: {\n      detect_on: 'canvas',\n      events: {\n        onhover: { enable: true, mode: 'repulse' },\n        onclick: { enable: true, mode: 'push' },\n        resize: true,\n      },\n      modes: {\n        repulse: { distance: 100, duration: 0.4 },\n        push: { particles_nb: 4 },\n      },\n    },\n    retina_detect: true,\n    background: {\n      color: 'transparent',\n    },\n    fullScreen: {\n      enable: false,\n      zIndex: -1,\n    },\n  };\n\n  useEffect(() => {\n    // Simulate progress animation\n    const progressInterval = setInterval(() => {\n      setProgress((previous) => {\n        if (previous >= 100) {\n          clearInterval(progressInterval);\n          return 100;\n        }\n        return previous + 10;\n      });\n    }, 200);\n\n    return () => {\n      clearInterval(progressInterval);\n    };\n  }, []);\n\n  return (\n    <div className='poderes-page'>\n      <Particles\n        id='poderes-particles'\n        className='particles-container'\n        init={particlesInit}\n        options={particlesOptions}\n      />\n      <section className='poderes-hero'>\n        <motion.h1\n          initial={{ opacity: 0, y: 40 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1.2 }}\n        >\n          Desata los Poderes del Plubot\n        </motion.h1>\n        <motion.p\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1.2, delay: 0.3 }}\n        >\n          En el Pluniverse, tu Plubot es una fuerza cósmica. Activa sus poderes\n          y domina el universo digital.\n        </motion.p>\n      </section>\n\n      <section className='poderes-about'>\n        <motion.h2\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 0.5 }}\n        >\n          ¿Qué son los Poderes del Plubot?\n        </motion.h2>\n        <motion.p\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, delay: 0.7 }}\n        >\n          Los poderes son habilidades únicas que transforman a tu Plubot en un\n          aliado imparable. Desde automatizaciones inteligentes hasta\n          integraciones con herramientas como Shopify, Stripe, y MercadoPago,\n          cada poder desbloquea nuevas posibilidades para tu negocio, haciéndolo\n          más ágil, eficiente y conectado.\n        </motion.p>\n        <div className='hero-buttons'>\n          <Link to='/poderes-about' className='hero-button'>\n            Dime Más\n          </Link>\n          <Link to='/marketplace' className='hero-button secondary'>\n            Explorar Poderes\n          </Link>\n        </div>\n      </section>\n\n      <section className='poderes-progress'>\n        <h2>Progreso de Desbloqueo</h2>\n        <div className='progress-bar-container'>\n          <motion.div\n            className='progress-bar'\n            initial={{ width: 0 }}\n            animate={{ width: `${progress}%` }}\n            transition={{ duration: 0.5 }}\n          />\n          <span className='progress-text'>{progress}%</span>\n        </div>\n      </section>\n\n      <PoderesGrid />\n\n      <section className='poderes-cta'>\n        <h2>Forja un Plubot Épico</h2>\n        <p>\n          Desbloquea poderes y crea un asistente que conquiste el Pluniverse.\n        </p>\n        <Link to='/welcome' className='hero-button'>\n          Crear mi Plubot\n        </Link>\n      </section>\n    </div>\n  );\n};\n\nexport default Poderes;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/poderes/PoderesGrid.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/poderes/powers-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/Profile.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/AchievementPopup.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 11,
        "column": 37,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 11,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [442, 446], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [442, 446], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/AchievementsSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ActivitiesSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ActivitySection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/AddIntegrationModal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/AddPowerForm.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/BackupSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/CosmicLights.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/DeleteConfirmationModal.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 6,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 6,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [203, 207], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [203, 207], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/DeletingOverlay.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/EditModalHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/EditPlubotModal.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 87,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 93,
        "endColumn": 8,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "jsx-a11y/no-noninteractive-element-interactions",
        "severity": 2,
        "message": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
        "line": 87,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 93,
        "endColumn": 8,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/FormField.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/GridLines.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 17,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 17,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 29,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 29,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/IntegrationFormActions.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/IntegrationFormUI.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/IntegrationsSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/NotificationSystem.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 12,
        "column": 29,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 12,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [518, 522], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [518, 522], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ParticleEffect.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/Particles.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 14,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 14,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotCardActions.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotCardDetails.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotCardHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotDetailsModal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotList.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PlubotSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PowerItem.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PowerLevelIndicator.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PowersSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/PowersTab.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileAccessDenied.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileAvatar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileContent.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileLoading.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileMain.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileTabs.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/ProfileView.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/StatsSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/SystemSection.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/components/VisualEffects.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useAchievements.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useEditPlubotModal.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 31,
        "column": 20,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 31,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 33,
        "column": 30,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 33,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 35,
        "column": 37,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 35,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 56,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 56,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 75,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 75,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useIntegrationForm.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useIntegrationsSection.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useIntersectionObserver.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useMouseTracker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useNotification.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/usePlubotCard.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/usePlubotSection.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/usePowerAnimations.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/usePowersTab.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileActions.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileHeader.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileImageUpload.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileMain.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useProfileState.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useVisualEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/profile/hooks/useVisualEffects.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/PublicChat.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/ChatError.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/ChatHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/ChatLoader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/MessageInput.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/MessageList.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/components/PoweredBy.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/hooks/usePublicChat.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/hooks/usePublicChatEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/services/chatService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/public-chat/utils/adjustColor.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tuopinion/TuOpinion.jsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (330). Maximum allowed is 80.",
        "line": 245,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 607,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { motion, AnimatePresence, useAnimation } from 'framer-motion';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\n\nimport axiosInstance from '@/utils/axios-config.js';\nimport byteHappy from '@assets/img/byte-happy.png';\nimport byteNormal from '@assets/img/byte-normal.png';\nimport byteThinking from '@assets/img/byte-thinking.png';\n\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport './TuOpinion.css';\n\n// Componente optimizado para las partículas\n// Función de ayuda para generar números aleatorios más seguros\nconst secureRandom = () => {\n  return crypto.getRandomValues(new Uint32Array(1))[0] / (2 ** 32 - 1);\n};\n\nconst ParticlesBackground = React.memo(({ count = 15 }) => {\n  // Pre-calcular posiciones aleatorias para mejor rendimiento\n  const particles = useMemo(\n    () =>\n      Array.from({ length: count }).map(() => ({\n        id: crypto.randomUUID(),\n        size: secureRandom() * 2 + 1,\n        initialX: secureRandom() * 100,\n        initialY: secureRandom() * 100,\n        destX: secureRandom() * 100,\n        destY: secureRandom() * 100,\n        duration: secureRandom() * 10 + 15,\n        delay: secureRandom() * 2,\n      })),\n    [count],\n  );\n\n  return (\n    <div className='particles-bg'>\n      {particles.map((particle) => (\n        <motion.div\n          key={particle.id}\n          className='custom-particle'\n          initial={{\n            left: `${particle.initialX}%`,\n            top: `${particle.initialY}%`,\n            opacity: 0.3,\n          }}\n          animate={{\n            left: [`${particle.initialX}%`, `${particle.destX}%`],\n            top: [`${particle.initialY}%`, `${particle.destY}%`],\n            opacity: [0.2, 0.5, 0.2],\n          }}\n          transition={{\n            duration: particle.duration,\n            repeat: Infinity,\n            repeatType: 'reverse',\n            delay: particle.delay,\n          }}\n          style={{\n            width: particle.size,\n            height: particle.size,\n          }}\n        />\n      ))}\n    </div>\n  );\n});\n\nParticlesBackground.propTypes = {\n  count: PropTypes.number,\n};\n\nParticlesBackground.displayName = 'ParticlesBackground';\n\n// Componente para el efecto de portal de energía\nconst EnergyPortal = React.memo(() => {\n  return (\n    <motion.div\n      className='energy-portal'\n      initial={{ scale: 0.9, opacity: 0 }}\n      animate={{\n        scale: [0.95, 1.02, 0.98, 1],\n        opacity: [0, 0.7, 0.5],\n      }}\n      transition={{\n        duration: 3,\n        ease: 'easeInOut',\n      }}\n    />\n  );\n});\nEnergyPortal.displayName = 'EnergyPortal';\n\n// Componente optimizado para mensajes del formulario\nconst FormMessage = React.memo(({ message, status }) => {\n  if (!message) return;\n\n  return (\n    <motion.div\n      className={`form-message ${status}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 20 }}\n      transition={{ type: 'spring', stiffness: 150, damping: 15 }}\n    >\n      <div className='message-background'>\n        <div className='message-circle' />\n      </div>\n      <div className='message-content'>\n        <p>{message}</p>\n        <motion.div\n          className='message-icon'\n          animate={{ scale: [1, 1.1, 1] }}\n          transition={{ duration: 1.5, repeat: Infinity }}\n        >\n          {status === 'success' ? '✓' : '!'}\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n});\n\nFormMessage.propTypes = {\n  message: PropTypes.string,\n  status: PropTypes.string,\n};\n\nFormMessage.displayName = 'FormMessage';\n\n// Campo de entrada optimizado\nconst InputField = React.memo(\n  ({ type = 'text', name, placeholder, value, onChange, required = false }) => {\n    const [isFocused, setIsFocused] = useState(false);\n\n    return (\n      <motion.div\n        className={`input-wrapper ${isFocused ? 'active' : ''}`}\n        whileHover={{ scale: 1.01 }}\n        transition={{ duration: 0.2 }}\n      >\n        <div className='input-icon'>\n          <motion.div\n            className='icon-circle'\n            animate={\n              isFocused\n                ? {\n                    scale: [1, 1.3, 1.2],\n                    backgroundColor: ['#00ffea', '#ff00ff', '#00ffea'],\n                  }\n                : {}\n            }\n            transition={{ duration: 1, repeat: isFocused ? Infinity : 0 }}\n          />\n        </div>\n        {type === 'textarea' ? (\n          <textarea\n            name={name}\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            required={required}\n            className='opinion-input'\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n          />\n        ) : (\n          <input\n            type={type}\n            name={name}\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            required={required}\n            className='opinion-input'\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n          />\n        )}\n        <motion.div\n          className='input-line'\n          initial={{ scaleX: 0 }}\n          animate={{ scaleX: isFocused ? 1 : 0 }}\n          transition={{ duration: 0.3 }}\n        />\n      </motion.div>\n    );\n  },\n);\n\nInputField.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  required: PropTypes.bool,\n};\n\nInputField.displayName = 'InputField';\n\n// Botón de envío con efectos optimizados\nconst SubmitButton = React.memo(({ loading, text }) => {\n  return (\n    <motion.button\n      type='submit'\n      className='quantum-btn'\n      disabled={loading}\n      whileHover={{ scale: 1.03, boxShadow: '0 0 15px rgba(0, 255, 234, 0.4)' }}\n      whileTap={{ scale: 0.97 }}\n    >\n      <motion.span\n        className='btn-text'\n        animate={loading ? { opacity: [1, 0.8, 1] } : {}}\n        transition={{ duration: 1, repeat: loading ? Infinity : 0 }}\n      >\n        {loading ? 'Procesando...' : text}\n      </motion.span>\n\n      {loading && (\n        <motion.span\n          className='btn-loader'\n          animate={{ rotate: 360 }}\n          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n        />\n      )}\n\n      <motion.div\n        className='btn-glow'\n        animate={{\n          backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],\n        }}\n        transition={{ duration: 5, repeat: Infinity, ease: 'linear' }}\n      />\n    </motion.button>\n  );\n});\n\nSubmitButton.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nSubmitButton.displayName = 'SubmitButton';\n\nconst TuOpinion = () => {\n  const { width } = useWindowSize();\n  const heroReference = useRef(undefined);\n  const [formData, setFormData] = useState({ nombre: '', opinion: '' });\n  const [loading, setLoading] = useState(false);\n  const [formMessage, setFormMessage] = useState({\n    text: undefined,\n    status: undefined,\n  });\n  const [byteState, setByteState] = useState('normal');\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const inViewport = useRef(false);\n  const formReference = useRef(undefined);\n  const mainControls = useAnimation();\n  const idleCallbackIdReference = useRef(undefined);\n\n  const getByteImage = () => {\n    switch (byteState) {\n      case 'happy': {\n        return byteHappy;\n      }\n      case 'thinking': {\n        return byteThinking;\n      }\n      default: {\n        return byteNormal;\n      }\n    }\n  };\n\n  const startVisibilitySequence = React.useCallback(async () => {\n    await mainControls.start({\n      opacity: 1,\n      transition: { duration: 0.5 },\n    });\n    setTimeout(() => setIsFormVisible(true), 800);\n  }, [mainControls]);\n\n  useEffect(() => {\n    const heroElement = heroReference.current;\n\n    const handleIntersection = (entries) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting && !inViewport.current) {\n          inViewport.current = true;\n          startVisibilitySequence();\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 0.2,\n    });\n\n    if (heroElement) {\n      observer.observe(heroElement);\n    }\n\n    return () => {\n      if (heroElement) {\n        observer.unobserve(heroElement);\n      }\n    };\n  }, [startVisibilitySequence]);\n\n  useEffect(() => {\n    const initInteractions = () => {\n      // La variable de estado hasInteracted fue eliminada.\n    };\n\n    if ('requestIdleCallback' in globalThis) {\n      idleCallbackIdReference.current = globalThis.requestIdleCallback(\n        initInteractions,\n        { timeout: 2000 },\n      );\n    } else {\n      setTimeout(initInteractions, 2000);\n    }\n\n    return () => {\n      mainControls.stop();\n      if (\n        'cancelIdleCallback' in globalThis &&\n        idleCallbackIdReference.current\n      ) {\n        globalThis.cancelIdleCallback(idleCallbackIdReference.current);\n        idleCallbackIdReference.current = undefined; // Clear the ref after cancelling\n      }\n    };\n  }, [mainControls]);\n\n  const handleChange = useMemo(\n    () => (event) => {\n      const { name, value } = event.target;\n      setFormData((previous) => ({ ...previous, [name]: value }));\n    },\n    [],\n  );\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (loading) return;\n\n    setLoading(true);\n    setByteState('thinking');\n    setFormMessage({ text: '', status: '' });\n\n    const data = new FormData();\n    data.append('nombre', formData.nombre);\n    data.append('opinion', formData.opinion);\n\n    try {\n      await axiosInstance.post('opinion/', data, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        timeout: 30_000, // Aumentado a 30s para dar más margen al backend\n      });\n\n      setFormMessage({\n        text: '¡Tu opinión ha sido enviada al Pluniverse! Gracias por ayudarnos a mejorar.',\n        status: 'success',\n      });\n\n      setFormData({ nombre: '', opinion: '' });\n      setByteState('happy');\n\n      setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n    } catch (error) {\n      const errorMessage =\n        error.response?.data?.message ||\n        (error.code === 'ECONNABORTED'\n          ? 'Tiempo de espera agotado. Intenta nuevamente.'\n          : error.message) ||\n        'Error al enviar tu opinión. Intenta nuevamente.';\n\n      setFormMessage({ text: errorMessage, status: 'error' });\n      setByteState('normal');\n\n      setTimeout(() => setFormMessage({ text: '', status: '' }), 5000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.15,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 15 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: 'spring',\n        stiffness: 70,\n        damping: 12,\n      },\n    },\n  };\n\n  const sectionStyle = {\n    position: 'relative',\n    width: '100%',\n    minHeight: '100vh',\n    overflow: 'hidden',\n  };\n\n  return (\n    <motion.section\n      className='opinion-hero'\n      ref={heroReference}\n      initial={{ opacity: 0 }}\n      animate={mainControls}\n      style={sectionStyle}\n    >\n      {inViewport.current && (\n        <>\n          <div\n            className='particles-bg'\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              zIndex: 0,\n            }}\n          >\n            <ParticlesBackground count={width > 768 ? 15 : 8} />\n          </div>\n          <div className='energy-portal-wrapper'>\n            <EnergyPortal />\n          </div>\n        </>\n      )}\n\n      <motion.div\n        className='byte-image-column'\n        initial={{ scale: 0.9, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ delay: 0.3, duration: 0.8 }}\n        style={{ position: 'relative', zIndex: 2 }}\n      >\n        <div className='byte-image-wrapper'>\n          <div className='byte-hologram-effect' />\n          <img\n            src={getByteImage()}\n            alt='Byte Assistant'\n            className={`byte-image ${loading ? 'byte-thinking' : ''}`}\n          />\n          <div className='byte-glow' />\n        </div>\n      </motion.div>\n\n      <motion.div\n        className='opinion-content'\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.8, delay: 0.2 }}\n        style={{ position: 'relative', zIndex: 2 }}\n      >\n        <motion.h2\n          className='opinion-title'\n          initial={{ opacity: 0, y: -30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, ease: 'easeOut' }}\n        >\n          <motion.span\n            className='neon-text'\n            animate={{\n              textShadow: [\n                '0 0 15px #00ffea',\n                '0 0 25px #00ffea',\n                '0 0 15px #00ffea',\n              ],\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              repeatType: 'reverse',\n            }}\n          >\n            Tu opinión\n          </motion.span>{' '}\n          da forma al{' '}\n          <motion.span\n            className='neon-text-alt'\n            animate={{\n              textShadow: [\n                '0 0 15px #ff00ff',\n                '0 0 25px #ff00ff',\n                '0 0 15px #ff00ff',\n              ],\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              repeatType: 'reverse',\n              delay: 1.5,\n            }}\n          >\n            Pluniverse\n          </motion.span>\n        </motion.h2>\n\n        <motion.p\n          className='opinion-subtitle'\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 1, ease: 'easeOut', delay: 0.5 }}\n        >\n          ¡Hola! Soy Byte, tu guía en el Pluniverse. Comparte tus{' '}\n          <motion.span\n            className='highlight-text'\n            animate={{\n              color: ['#00ffea', '#88ffff', '#00ffea'],\n            }}\n            transition={{ duration: 4, repeat: Infinity }}\n          >\n            ideas\n          </motion.span>\n          , sugerencias o sueños para hacer de Plubot una experiencia aún más\n          épica. ¡Tu voz importa!\n        </motion.p>\n\n        <AnimatePresence>\n          {isFormVisible && (\n            <motion.div\n              className='form-container'\n              ref={formReference}\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -30 }}\n              transition={{ type: 'spring', stiffness: 40, damping: 15 }}\n            >\n              <motion.div\n                className='holographic-overlay'\n                animate={{\n                  background: [\n                    'linear-gradient(135deg, rgba(0, 255, 234, 0.05) 0%, rgba(255, 0, 255, 0.05) 50%, rgba(0, 255, 234, 0.05) 100%)',\n                    'linear-gradient(225deg, rgba(0, 255, 234, 0.05) 0%, rgba(255, 0, 255, 0.05) 50%, rgba(0, 255, 234, 0.05) 100%)',\n                    'linear-gradient(135deg, rgba(0, 255, 234, 0.05) 0%, rgba(255, 0, 255, 0.05) 50%, rgba(0, 255, 234, 0.05) 100%)',\n                  ],\n                }}\n                transition={{ duration: 8, repeat: Infinity, ease: 'linear' }}\n              />\n\n              <motion.form\n                onSubmit={handleSubmit}\n                className='opinion-form'\n                variants={containerVariants}\n                initial='hidden'\n                animate='visible'\n              >\n                <motion.div variants={itemVariants}>\n                  <InputField\n                    name='nombre'\n                    placeholder='Tu nombre (opcional)'\n                    value={formData.nombre}\n                    onChange={handleChange}\n                  />\n                </motion.div>\n\n                <motion.div variants={itemVariants}>\n                  <InputField\n                    type='textarea'\n                    name='opinion'\n                    placeholder='Comparte tu opinión, sugerencia o idea...'\n                    value={formData.opinion}\n                    onChange={handleChange}\n                    required\n                  />\n                </motion.div>\n\n                <motion.div variants={itemVariants}>\n                  <SubmitButton loading={loading} text='Enviar Opinión' />\n                </motion.div>\n              </motion.form>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <AnimatePresence>\n          {formMessage.text && (\n            <FormMessage\n              message={formMessage.text}\n              status={formMessage.status}\n            />\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </motion.section>\n  );\n};\n\nexport default React.memo(TuOpinion);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/Tutoriales.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/TutorialesAprendizaje.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/TutorialesAutomatizacion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/TutorialesExpansion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/TutorialesFlujos.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/AprendizajeCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/AprendizajeExpansion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/AutomatizacionCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/AutomatizacionExpansion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/ByteHologram.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/DigitalCursor.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/FlujosCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/FlujosExpansion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/expansion/ExpansionButtonContainer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/expansion/ExpansionByteContainer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/expansion/ExpansionCardsContainer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/expansion/ExpansionExpandedContent.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/main/TutorialesCardContent.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/main/TutorialesExpandedContent.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/components/main/TutorialesHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useAprendizajeEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useCardTiltEffect.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useMousePosition.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/usePhraseRotator.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useScrollActivation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useTiltEffect.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useTutorialAutomatizacion.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useTutorialEffects.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useTutorialExpansion.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/hooks/useTutorialFlujos.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/TutorialDiscord.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/TutorialDiscordChannelId.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/components/CopyIdStep.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/components/DeveloperModeStep.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/components/DiscordTutorialFooter.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/components/DiscordTutorialHeader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/pages/tutoriales/tutorialesdiscord/components/WhyIdStep.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/AuthRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/MainRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/OnboardingRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/PlubotRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/PluniverseRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/ProtectedRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/PublicRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/routes/components/TutorialRoutes.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/services/exportImportService.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async arrow function has too many lines (101). Maximum allowed is 80.",
        "line": 246,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 381,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 18. Maximum allowed is 10.",
        "line": 246,
        "column": 30,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 381,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-await-in-loop",
        "severity": 1,
        "message": "Unexpected `await` inside a loop.",
        "line": 307,
        "column": 24,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 307,
        "endColumn": 65,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 317,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 317,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { v4 as uuidv4 } from 'uuid';\n\nimport useAuthStore from '../stores/use-auth-store';\n\nimport logger from './loggerService';\nimport { syncAllPlubots } from './syncService';\n\n/**\n * Lee un archivo como texto\n * @param {File} file - Archivo a leer\n * @returns {Promise<string>} - Contenido del archivo\n */\nconst readFileAsText = (file) => {\n  // Usar el método moderno file.text() que devuelve una promesa\n  return file.text().catch((error) => {\n    logger.error('Error al leer el archivo:', error);\n    // Relanzar el error para que la promesa sea rechazada y el error pueda ser capturado\n    throw new Error('Error al leer el archivo');\n  });\n};\n\n/**\n * Muestra un diálogo para confirmar sobrescritura\n * @param {string} plubotName - Nombre del plubot\n * @returns {Promise<string>} - Acción seleccionada ('overwrite', 'keep-both', 'skip')\n */\nconst confirmOverwrite = (plubotName) => {\n  return new Promise((resolve) => {\n    // Crear modal\n    const modal = document.createElement('div');\n    modal.className = 'plubot-import-modal';\n    modal.innerHTML = `\n      <div class=\"plubot-import-modal-content\">\n        <h3>Plubot existente</h3>\n        <p>Ya existe un Plubot con el nombre \"${plubotName}\". ¿Qué deseas hacer?</p>\n        <div class=\"plubot-import-modal-actions\">\n          <button class=\"btn-overwrite\">Sobrescribir</button>\n          <button class=\"btn-keep-both\">Mantener ambos</button>\n          <button class=\"btn-skip\">Omitir</button>\n        </div>\n      </div>\n    `;\n\n    // Estilos inline para el modal\n    modal.style.position = 'fixed';\n    modal.style.top = '0';\n    modal.style.left = '0';\n    modal.style.width = '100%';\n    modal.style.height = '100%';\n    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    modal.style.display = 'flex';\n    modal.style.justifyContent = 'center';\n    modal.style.alignItems = 'center';\n    modal.style.zIndex = '9999';\n\n    const content = modal.querySelector('.plubot-import-modal-content');\n    content.style.backgroundColor = 'white';\n    content.style.padding = '20px';\n    content.style.borderRadius = '8px';\n    content.style.maxWidth = '400px';\n    content.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n\n    const buttons = modal.querySelectorAll('button');\n    for (const button of buttons) {\n      button.style.padding = '8px 16px';\n      button.style.margin = '0 8px';\n      button.style.border = 'none';\n      button.style.borderRadius = '4px';\n      button.style.cursor = 'pointer';\n    }\n\n    const overwriteButton = modal.querySelector('.btn-overwrite');\n    overwriteButton.style.backgroundColor = '#EA4335';\n    overwriteButton.style.color = 'white';\n\n    const keepBothButton = modal.querySelector('.btn-keep-both');\n    keepBothButton.style.backgroundColor = '#4285F4';\n    keepBothButton.style.color = 'white';\n\n    const skipButton = modal.querySelector('.btn-skip');\n    skipButton.style.backgroundColor = '#9AA0A6';\n    skipButton.style.color = 'white';\n\n    // Añadir al DOM\n    document.body.append(modal);\n\n    // Manejar clics\n    overwriteButton.addEventListener('click', () => {\n      modal.remove();\n      resolve('overwrite');\n    });\n\n    keepBothButton.addEventListener('click', () => {\n      modal.remove();\n      resolve('keep-both');\n    });\n\n    skipButton.addEventListener('click', () => {\n      modal.remove();\n      resolve('skip');\n    });\n  });\n};\n\n/**\n * Servicio para exportar e importar plubots como respaldo adicional\n * Permite a los usuarios descargar sus plubots como archivos JSON y restaurarlos\n */\n\n/**\n * Exporta todos los plubots del usuario a un archivo JSON\n * @returns {Promise<Object>} - Resultado de la exportaciu00f3n\n */\nexport const exportAllPlubots = async () => {\n  try {\n    // Obtener plubots del usuario\n    const { user } = useAuthStore.getState();\n    if (!user || !user.plubots || user.plubots.length === 0) {\n      return { success: false, message: 'No hay plubots para exportar' };\n    }\n\n    // Preparar datos para exportaciu00f3n\n    const exportData = {\n      version: '1.0',\n      timestamp: new Date().toISOString(),\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n      plubots: user.plubots.map((plubot) => {\n        // Crear una copia limpia del plubot sin propiedades temporales\n        const cleanPlubot = { ...plubot };\n\n        // Eliminar propiedades que no deben exportarse\n        delete cleanPlubot._offlineCreated;\n        delete cleanPlubot._recoveryPending;\n        delete cleanPlubot._synced;\n        delete cleanPlubot._syncedAt;\n        delete cleanPlubot._timestamp;\n        delete cleanPlubot._localId;\n\n        return cleanPlubot;\n      }),\n    };\n\n    // Convertir a JSON\n    const jsonData = JSON.stringify(exportData, undefined, 2);\n\n    // Crear blob y URL\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n\n    // Crear elemento de descarga\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `plubots_backup_${new Date().toISOString().slice(0, 10)}.json`;\n    document.body.append(a);\n    a.click();\n\n    // Limpiar\n    setTimeout(() => {\n      a.remove();\n      URL.revokeObjectURL(url);\n    }, 100);\n\n    return { success: true, message: 'Plubots exportados correctamente' };\n  } catch (error) {\n    return { success: false, error: error.message || 'Error desconocido' };\n  }\n};\n\n/**\n * Exporta un plubot especu00edfico a un archivo JSON\n * @param {string} plubotId - ID del plubot a exportar\n * @returns {Promise<Object>} - Resultado de la exportaciu00f3n\n */\nexport const exportPlubot = async (plubotId) => {\n  try {\n    // Obtener plubots del usuario\n    const { user } = useAuthStore.getState();\n    if (!user || !user.plubots) {\n      return { success: false, message: 'No hay plubots disponibles' };\n    }\n\n    // Encontrar el plubot\n    const plubot = user.plubots.find((p) => p.id === plubotId);\n    if (!plubot) {\n      return { success: false, message: 'Plubot no encontrado' };\n    }\n\n    // Preparar datos para exportaciu00f3n\n    const exportData = {\n      version: '1.0',\n      timestamp: new Date().toISOString(),\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n      plubot: { ...plubot },\n    };\n\n    // Eliminar propiedades temporales\n    delete exportData.plubot._offlineCreated;\n    delete exportData.plubot._recoveryPending;\n    delete exportData.plubot._synced;\n    delete exportData.plubot._syncedAt;\n    delete exportData.plubot._timestamp;\n    delete exportData.plubot._localId;\n\n    // Convertir a JSON\n    const jsonData = JSON.stringify(exportData, undefined, 2);\n\n    // Crear blob y URL\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n\n    // Crear elemento de descarga\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `plubot_${plubot.name.replaceAll(/\\s+/g, '_').toLowerCase()}_${new Date().toISOString().slice(0, 10)}.json`;\n    document.body.append(a);\n    a.click();\n\n    // Limpiar\n    setTimeout(() => {\n      a.remove();\n      URL.revokeObjectURL(url);\n    }, 100);\n\n    return {\n      success: true,\n      message: `Plubot \"${plubot.name}\" exportado correctamente`,\n    };\n  } catch (error) {\n    return { success: false, error: error.message || 'Error desconocido' };\n  }\n};\n\n/**\n * Importa plubots desde un archivo JSON\n * @param {File} file - Archivo JSON con plubots\n * @returns {Promise<Object>} - Resultado de la importación\n */\nexport const importPlubots = async (file) => {\n  try {\n    // Verificar que sea un archivo JSON\n    if (file.type !== 'application/json' && !file.name.endsWith('.json')) {\n      return { success: false, message: 'El archivo debe ser de tipo JSON' };\n    }\n\n    // Leer el archivo\n    const fileContent = await readFileAsText(file);\n    const importData = JSON.parse(fileContent);\n\n    // Validar estructura\n    if (!importData.version || !importData.timestamp) {\n      return { success: false, message: 'Formato de archivo inválido' };\n    }\n\n    // Determinar si es un solo plubot o varios\n    const plubots =\n      importData.plubots || (importData.plubot ? [importData.plubot] : []);\n\n    if (plubots.length === 0) {\n      return {\n        success: false,\n        message: 'No se encontraron plubots en el archivo',\n      };\n    }\n\n    // Obtener estado actual\n    const { user, updateUser } = useAuthStore.getState();\n    if (!user) {\n      return {\n        success: false,\n        message: 'Debes iniciar sesión para importar plubots',\n      };\n    }\n\n    // Preparar plubots para importación\n    const currentPlubots = user.plubots || [];\n    const importedPlubots = [];\n    const updatedPlubots = [];\n    const skippedPlubots = [];\n\n    // Procesar cada plubot\n    for (const importPlubot of plubots) {\n      // Verificar si ya existe\n      const existingIndex = currentPlubots.findIndex(\n        (p) => p.id === importPlubot.id,\n      );\n\n      if (existingIndex === -1) {\n        // Si no existe, añadir\n        const newPlubot = {\n          ...importPlubot,\n          _imported: true,\n          _importedAt: new Date().toISOString(),\n        };\n        currentPlubots.push(newPlubot);\n        importedPlubots.push(newPlubot);\n      } else {\n        // Si existe, preguntar si desea sobrescribir o mantener ambos\n        // eslint-disable-next-line no-await-in-loop\n        const action = await confirmOverwrite(importPlubot.name);\n\n        switch (action) {\n          case 'skip': {\n            skippedPlubots.push(importPlubot);\n            continue;\n          }\n          case 'overwrite': {\n            // Sobrescribir\n            // eslint-disable-next-line security/detect-object-injection\n            currentPlubots[existingIndex] = {\n              ...importPlubot,\n              _imported: true,\n              _importedAt: new Date().toISOString(),\n            };\n            updatedPlubots.push(importPlubot);\n\n            break;\n          }\n          case 'keep-both': {\n            // Mantener ambos (crear copia)\n            const newPlubot = {\n              ...importPlubot,\n              id: `imported-${uuidv4()}`,\n              name: `${importPlubot.name} (Importado)`,\n              _imported: true,\n              _importedAt: new Date().toISOString(),\n            };\n            currentPlubots.push(newPlubot);\n            importedPlubots.push(newPlubot);\n\n            break;\n          }\n          // No default\n        }\n      }\n    }\n\n    // Actualizar el estado del usuario\n    updateUser({\n      ...user,\n      plubots: currentPlubots,\n    });\n\n    // Actualizar respaldo local\n    try {\n      localStorage.setItem(\n        'user_plubots_backup',\n        JSON.stringify(currentPlubots),\n      );\n    } catch (storageError) {\n      logger.error('Error al guardar respaldo en localStorage:', storageError);\n      // No se pudo guardar el respaldo, pero no es un error crítico\n    }\n\n    // Sincronizar con el servidor\n    setTimeout(() => {\n      syncAllPlubots();\n    }, 1000);\n\n    const message =\n      `Importación completada: ${importedPlubots.length} nuevos, ` +\n      `${updatedPlubots.length} actualizados, ${skippedPlubots.length} omitidos`;\n\n    return {\n      success: true,\n      message,\n      imported: importedPlubots,\n      updated: updatedPlubots,\n      skipped: skippedPlubots,\n    };\n  } catch (error) {\n    return { success: false, error: error.message || 'Error desconocido' };\n  }\n};\n\nconst exportImportService = {\n  exportAllPlubots,\n  exportPlubot,\n  importPlubots,\n};\n\nexport default exportImportService;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/services/flowService.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async method 'loadFlow' has a complexity of 15. Maximum allowed is 10.",
        "line": 59,
        "column": 17,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 112,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Servicio para manejar las operaciones de flujo de manera optimizada.\n * Este servicio proporciona métodos para cargar, guardar y gestionar flujos\n * utilizando actualizaciones incrementales y persistencia de IDs.\n */\nimport { v4 as uuidv4 } from 'uuid';\n\n// Importar sistema de registro de eventos\n\nimport instance from '@/utils/axios-config.js';\n// Importar utilidades de optimización de flujo\nimport { captureError, handleError } from '@/utils/error-handler.js';\nimport { calculateFlowDiff } from '@/utils/flow-optimizer.js';\n\n// Importar sistema centralizado de manejo de errores\n\n/**\n * Genera un ID único para un nodo o arista.\n * @param {string} prefix - Prefijo para el ID ('node', 'edge', etc.)\n * @returns {string} ID único en formato '{prefix}-{uuid}'\n */\nexport const generateId = (prefix = 'node') => {\n  return `${prefix}-${uuidv4()}`;\n};\n\n/**\n * Calcula las diferencias entre dos estados de flujo de manera optimizada.\n * @param {Object} oldState - Estado anterior del flujo {nodes: [], edges: []}\n * @param {Object} newState - Nuevo estado del flujo {nodes: [], edges: []}\n * @returns {Object} Diferencias entre los estados\n */\nexport const computeFlowDiff = (oldState, newState) => {\n  // Validar parámetros de entrada\n  if (!oldState || !newState) {\n    return {\n      nodes_to_create: [],\n      nodes_to_update: [],\n      nodes_to_delete: [],\n      edges_to_create: [],\n      edges_to_update: [],\n      edges_to_delete: [],\n      stats: { total: { nodes: 0, edges: 0 }, changes: {} },\n    };\n  }\n\n  // Utilizar la implementación optimizada del flow-optimizer\n  return calculateFlowDiff(oldState, newState);\n};\n\n/**\n * Servicio para manejar operaciones de flujo.\n */\nconst flowService = {\n  /**\n   * Carga el flujo de un plubot.\n   * @param {string} plubotId - ID del plubot\n   * @returns {Promise<Object>} Datos del flujo {nodes: [], edges: [], name: string}\n   */\n  async loadFlow(plubotId) {\n    if (!plubotId) {\n      const error = new Error(\n        'El ID del Plubot es inválido para cargar el flujo.',\n      );\n      captureError(error, 'loadFlow:invalid-id');\n      handleError(error);\n      throw error;\n    }\n\n    try {\n      const response = await instance.get(`/flow/${plubotId}`);\n      if (\n        response &&\n        response.data &&\n        response.data.status === 'success' &&\n        response.data.data\n      ) {\n        const flowData = response.data.data;\n\n        // Adaptaciones para compatibilidad\n        if (flowData.nodes) {\n          flowData.nodes = flowData.nodes.map((node) => {\n            if (node.node_metadata) {\n              node.metadata = node.node_metadata;\n            }\n            return node;\n          });\n        }\n        if (flowData.edges) {\n          flowData.edges = flowData.edges.map((edge) => {\n            if (edge.edge_metadata) {\n              edge.metadata = edge.edge_metadata;\n            }\n            return edge;\n          });\n        }\n        return flowData;\n      } else {\n        let errorMessage =\n          'Error al cargar el flujo: Respuesta inesperada del servidor.';\n        if (response?.data?.message) {\n          errorMessage = response.data.message;\n        } else if (response?.data?.status) {\n          errorMessage = `Error al cargar el flujo: status backend '${response.data.status}'.`;\n        }\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      const errorInfo = captureError(error, `loadFlow:${plubotId}`);\n      handleError(errorInfo);\n      throw error;\n    }\n  },\n\n  /**\n   * Guarda el flujo completo de un plubot. Es más robusto y fiable que el guardado incremental.\n   * @param {string} plubotId - ID del plubot\n   * @param {Object} flowData - Datos del flujo {nodes, edges, name}\n   * @returns {Promise<Object>} Respuesta del servidor\n   */\n  async saveFlow(plubotId, flowData) {\n    if (!plubotId || !flowData) {\n      throw new Error('Parámetros de entrada inválidos para saveFlow');\n    }\n\n    try {\n      // Adapta la estructura de datos para el backend\n      const adaptedFlowData = {\n        ...flowData,\n        nodes: flowData.nodes.map((node) => {\n          const adapted = { ...node };\n          if (adapted.metadata) {\n            adapted.node_metadata = adapted.metadata;\n            delete adapted.metadata;\n          }\n          return adapted;\n        }),\n        edges: flowData.edges.map((edge) => {\n          const adapted = { ...edge };\n          if (adapted.metadata) {\n            adapted.edge_metadata = adapted.metadata;\n            delete adapted.metadata;\n          }\n          return adapted;\n        }),\n      };\n\n      const response = await instance.patch(\n        `/flow/${plubotId}`,\n        adaptedFlowData,\n      );\n      return response.data;\n    } catch (error) {\n      const errorInfo = captureError(error, `saveFlow:${plubotId}`);\n      handleError(errorInfo);\n      throw error;\n    }\n  },\n\n  /**\n   * Obtiene la lista de copias de seguridad disponibles para un plubot.\n   * @param {string} plubotId - ID del plubot\n   * @returns {Promise<Array>} Lista de copias de seguridad\n   */\n  async listBackups(plubotId) {\n    try {\n      const response = await instance.get(`/flow/${plubotId}/backup`);\n      if (response.data.status === 'success') {\n        return response.data.backups;\n      }\n      throw new Error(\n        response.data.message || 'Error al obtener las copias de seguridad',\n      );\n    } catch (error) {\n      captureError(error, `listBackups:${plubotId}`);\n      throw error;\n    }\n  },\n\n  /**\n   * Restaura una copia de seguridad para un plubot.\n   * @param {string} plubotId - ID del plubot\n   * @param {string} backupId - ID de la copia de seguridad\n   * @returns {Promise<Object>} Respuesta del servidor\n   */\n  async restoreBackup(plubotId, backupId) {\n    try {\n      const response = await instance.post(\n        `/flow/${plubotId}/backup/${backupId}`,\n      );\n      return response.data;\n    } catch (error) {\n      captureError(error, `restoreBackup:${plubotId}:${backupId}`);\n      throw error;\n    }\n  },\n};\n\nexport default flowService;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/services/loggerService.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 24,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 24,
        "endColumn": 18,
        "suggestions": [
          {
            "fix": { "range": [773, 800], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 35,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 35,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1029, 1057], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "desc": "Remove the console.warn()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 46,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 46,
        "endColumn": 20,
        "suggestions": [
          {
            "fix": { "range": [1281, 1310], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "desc": "Remove the console.error()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-console",
        "severity": 2,
        "message": "Unexpected console statement.",
        "line": 59,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 59,
        "endColumn": 19,
        "suggestions": [
          {
            "fix": { "range": [1715, 1743], "text": "" },
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "desc": "Remove the console.info()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/services/syncService.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 83,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 145,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 151,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 227,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from 'react';\n\nimport {\n  safeGetItem,\n  safeSetItem,\n} from '../components/onboarding/flow-editor/utils/storage-manager';\nimport useAuthStore from '../stores/use-auth-store';\nimport useSyncStore from '../stores/use-sync-store';\nimport instance from '../utils/axios-config';\n\nimport logger from './loggerService';\n\n/**\n * Servicio de sincronización para plubots en segundo plano\n * Este servicio se encarga de sincronizar los plubots creados en modo offline\n * y mantener actualizados los datos del usuario\n */\n\n// Intervalo de sincronización en milisegundos (5 minutos por defecto)\nconst SYNC_INTERVAL = 5 * 60 * 1000;\n\n/**\n * Sincroniza un plubot específico con el servidor\n * @param {Object} plubot - El plubot a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\n/**\n * Actualiza un plubot en localStorage\n * @param {string} plubotId - ID del plubot a actualizar\n * @param {Object} updatedPlubot - Datos actualizados del plubot\n */\nconst updateLocalPlubot = (plubotId, updatedPlubot) => {\n  try {\n    // Actualizar en el respaldo de plubots del usuario\n    const userPlubots = safeGetItem('user_plubots_backup', []);\n    const updatedUserPlubots = userPlubots.map((p) =>\n      p.id === plubotId ? updatedPlubot : p,\n    );\n    safeSetItem('user_plubots_backup', updatedUserPlubots);\n\n    // Actualizar en el respaldo local de plubots\n    const localPlubots = safeGetItem('local_plubots_backup', []);\n    const updatedLocalPlubots = localPlubots.map((p) => {\n      if (p._localId === plubotId || p.id === plubotId) {\n        return { ...p, ...updatedPlubot, _synced: true };\n      }\n      return p;\n    });\n    safeSetItem('local_plubots_backup', updatedLocalPlubots);\n  } catch (error) {\n    logger.error('Error al actualizar plubot en localStorage:', error);\n  }\n};\n\n/**\n * Actualiza un plubot en el store de autenticación\n * @param {string} plubotId - ID del plubot a actualizar\n * @param {Object} updatedPlubot - Datos actualizados del plubot\n */\nconst updateStorePlubot = (plubotId, updatedPlubot) => {\n  try {\n    const { user, updateUser } = useAuthStore.getState();\n    if (user && user.plubots) {\n      const updatedPlubots = user.plubots.map((p) => {\n        if (p.id === plubotId) {\n          return updatedPlubot;\n        }\n        return p;\n      });\n\n      updateUser({ ...user, plubots: updatedPlubots });\n    }\n  } catch (error) {\n    logger.error('Error al actualizar plubot en el store:', error);\n  }\n};\n\n/**\n * Sincroniza un plubot específico con el servidor\n * @param {Object} plubot - El plubot a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nconst syncPlubot = async (plubot) => {\n  try {\n    // Verificar si el plubot fue creado en modo offline\n    if (plubot._offlineCreated || plubot._recoveryPending) {\n      // Preparar datos para sincronización\n      const syncData = {\n        ...plubot,\n        _localId: plubot.id, // Guardar el ID local\n        id: undefined, // Eliminar el ID para que el servidor asigne uno nuevo\n      };\n\n      // Eliminar propiedades locales\n      delete syncData._offlineCreated;\n      delete syncData._recoveryPending;\n      delete syncData._synced;\n      delete syncData._timestamp;\n\n      // Enviar al servidor\n      const token = localStorage.getItem('access_token');\n      if (!token) throw new Error('No hay token de autenticación');\n\n      const response = await instance.post('plubots/create', syncData);\n\n      if (response.data?.status === 'success' && response.data.plubot?.id) {\n        // Actualizar el plubot local con el ID del servidor\n        const updatedPlubot = {\n          ...plubot,\n          id: response.data.plubot.id,\n          _offlineCreated: false,\n          _recoveryPending: false,\n          _synced: true,\n          _syncedAt: new Date().toISOString(),\n        };\n\n        // Actualizar en localStorage\n        updateLocalPlubot(plubot.id, updatedPlubot);\n\n        // Actualizar en el store\n        updateStorePlubot(plubot.id, updatedPlubot);\n\n        return {\n          success: true,\n          plubot: updatedPlubot,\n          message: 'Plubot sincronizado correctamente',\n        };\n      }\n\n      throw new Error(response.data?.message || 'Error al sincronizar plubot');\n    }\n\n    // Si el plubot ya está sincronizado, verificar si hay cambios pendientes\n    if (plubot._pendingChanges) {\n      // Implementar lógica para sincronizar cambios\n      // ...\n\n      return { success: true, message: 'Cambios sincronizados correctamente' };\n    }\n\n    return { success: true, message: 'No hay cambios para sincronizar' };\n  } catch (error) {\n    return { success: false, error: error.message || 'Error desconocido' };\n  }\n};\n\n/**\n * Ejecuta la sincronización de todos los plubots pendientes\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nexport const syncAllPlubots = async () => {\n  const { startSync, endSync } = useSyncStore.getState();\n\n  // Usar la acción atómica para iniciar la sincronización\n  if (!startSync()) {\n    return { success: false, message: 'Ya hay una sincronización en curso' };\n  }\n\n  try {\n    const { user } = useAuthStore.getState();\n    if (!user || !user.plubots) {\n      endSync({ status: 'success' }); // No hay nada que hacer, termina exitosamente\n      return {\n        success: true,\n        message: 'No hay usuario o plubots para sincronizar',\n      };\n    }\n\n    // Prioridad 1: Plubots en el store de usuario\n    const plubotsToBeSynced = user.plubots.filter(\n      (p) => p._offlineCreated || p._recoveryPending || p._pendingChanges,\n    );\n\n    // Prioridad 2: Plubots en el respaldo de localStorage que no están en el store\n    const localPlubots = JSON.parse(\n      localStorage.getItem('local_plubots_backup') || '[]',\n    );\n    const unsyncedLocal = localPlubots.filter((p) => {\n      const isInStore = user.plubots.some((up) => up.id === p.id);\n      return !p._synced && !isInStore;\n    });\n\n    const allPlubotsToSync = [...plubotsToBeSynced, ...unsyncedLocal];\n\n    if (allPlubotsToSync.length === 0) {\n      endSync({ status: 'success' });\n      return {\n        success: true,\n        message: 'No hay plubots pendientes de sincronización',\n      };\n    }\n\n    const results = await Promise.all(\n      allPlubotsToSync.map((plubot) => syncPlubot(plubot)),\n    );\n\n    const errors = results.filter((r) => !r.success).map((r) => r.error);\n    const finalStatus = errors.length === 0 ? 'success' : 'error';\n\n    endSync({ status: finalStatus, errors });\n\n    const successfulSyncs = results.filter((r) => r.success).length;\n    const totalSyncs = results.length;\n\n    return {\n      success: finalStatus === 'success',\n      results,\n      message: `${successfulSyncs}/${totalSyncs} plubots sincronizados correctamente`,\n    };\n  } catch (error) {\n    logger.error(\n      'Error catastrófico durante la sincronización de plubots:',\n      error,\n    );\n    endSync({\n      status: 'error',\n      errors: [error.message || 'Error desconocido'],\n    });\n    return { success: false, error: error.message || 'Error desconocido' };\n  } finally {\n    // La lógica de re-sincronización pendiente se puede manejar en el hook que consume el servicio\n    const { pendingSync } = useSyncStore.getState();\n    if (pendingSync) {\n      setTimeout(syncAllPlubots, 1000); // Re-intentar si había una sincronización pendiente\n    }\n  }\n};\n\n/**\n * Obtiene el estado actual de sincronización\n * @returns {Object} - Estado de sincronización\n */\nexport const getSyncState = () => {\n  const state = useSyncStore.getState();\n  return {\n    ...state,\n    lastSyncFormatted: state.lastSync\n      ? new Date(state.lastSync).toLocaleString()\n      : 'Nunca',\n  };\n};\n\n/**\n * Hook para usar el servicio de sincronización en componentes\n * @param {Object} options - Opciones de configuración\n * @param {boolean} options.autoSync - Si debe sincronizar automáticamente\n * @param {number} options.interval - Intervalo de sincronización en ms\n * @returns {Object} - Estado y funciones de sincronización\n */\nconst useSyncService = (options = {}) => {\n  const { autoSync = true, interval = SYNC_INTERVAL } = options;\n\n  // Iniciar sincronización periódica\n  useEffect(() => {\n    let syncInterval;\n    if (autoSync) {\n      syncAllPlubots();\n      syncInterval = setInterval(syncAllPlubots, interval);\n    }\n    return () => {\n      if (syncInterval) {\n        clearInterval(syncInterval);\n      }\n    };\n  }, [autoSync, interval]);\n\n  return {\n    syncState: getSyncState(),\n    syncAllPlubots,\n    syncPlubot,\n  };\n};\n\nexport default useSyncService;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/auth/auth-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/auth/error-parser.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/customZustandStorage.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/selectors.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 15. Maximum allowed is 10.",
        "line": 19,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 37,
        "endColumn": 7
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 18. Maximum allowed is 10.",
        "line": 47,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 68,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-empty-function",
        "severity": 2,
        "message": "Unexpected empty arrow function.",
        "line": 8,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 22,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { shallow } from 'zustand/shallow';\n\nimport useFlowStore from '@/stores/use-flow-store';\nimport useTrainingStore from '@/stores/use-training-store';\n\n// --- Constantes y Fallbacks Seguros ---\n// eslint-disable-next-line no-empty-function\nconst noop = () => {}; // Función \"no operation\" para acciones no disponibles.\nconst defaultArray = []; // Array vacío para nodos/aristas.\n\n// --- Selectores del Store de Flujo (useFlowStore) ---\n\n/**\n * Hook para acceder a los metadatos del flujo y acciones principales.\n * Lee todos los datos y acciones desde la raíz del estado.\n */\nexport const useFlowMeta = () =>\n  useFlowStore(\n    (state) => ({\n      // Datos desde state (raíz)\n      plubotId: state.plubotId ?? undefined,\n      flowName: state.flowName ?? '',\n      isLoaded: state.isLoaded ?? false,\n      loadError: state.loadError ?? false,\n      isUltraMode: state.isUltraMode ?? false,\n      lastSaved: state.lastSaved ?? undefined,\n\n      // Acciones desde state (raíz)\n      setFlowName: state.setFlowName || noop,\n      setPlubotId: state.setPlubotId || noop,\n      resetFlow: state.resetFlow || noop,\n      toggleUltraMode: state.toggleUltraMode || noop,\n      getVisibleNodeCount: state.getVisibleNodeCount || (() => 0),\n      saveFlow: state.saveFlow || noop,\n      fitView: state.fitView || noop,\n      loadFlow: state.loadFlow || noop,\n    }),\n    shallow,\n  );\n\n/**\n * Hook para acceder a los nodos, aristas y sus acciones.\n * Garantiza que nodes y edges siempre sean arrays. Lee desde la raíz del estado.\n */\nexport const useFlowNodesEdges = () =>\n  useFlowStore(\n    (state) => ({\n      // Datos desde state (raíz)\n      nodes: state.nodes ?? defaultArray,\n      edges: state.edges ?? defaultArray,\n      selectedNode: state.selectedNode ?? undefined,\n      selectedEdge: state.selectedEdge ?? undefined,\n\n      // Acciones desde state (raíz) - onXChange y onConnect son parte de React Flow\n      onNodesChange: state.onNodesChange || noop,\n      onEdgesChange: state.onEdgesChange || noop,\n      onConnect: state.onConnect || noop,\n      setNodes: state.setNodes || noop,\n      setEdges: state.setEdges || noop,\n      setSelectedNode: state.setSelectedNode || noop,\n      removeNode: state.removeNode || noop,\n      duplicateDecisionNode: state.duplicateDecisionNode || noop,\n      duplicateNode: state.duplicateNode || noop,\n      updateNode: state.updateNode || noop,\n      updateNodeData: state.updateNodeData || noop,\n      getVisibleEdgeCount: state.getVisibleEdgeCount || (() => 0),\n      backupEdgesToLocalStorage: state.backupEdgesToLocalStorage || noop,\n    }),\n    shallow,\n  );\n\n/**\n * Hook para obtener el objeto completo del nodo seleccionado.\n * Devuelve `null` si no hay ningún nodo seleccionado.\n */\nexport const useSelectedNode = () =>\n  useFlowStore(\n    (state) =>\n      state.nodes?.find((n) => n.id === state.selectedNode) || undefined,\n  );\n\n/**\n * Hook para obtener el objeto `data` de un nodo específico por su ID.\n * Devuelve `null` si el nodo o sus datos no existen.\n */\nexport const useNodeData = (id) =>\n  useFlowStore(\n    (state) => state.nodes?.find((n) => n.id === id)?.data || undefined,\n  );\n\n/**\n * Hook para obtener información del nodo padre.\n * Devuelve un objeto con valores `null` si no se encuentra el padre.\n */\nexport const useParentNodeInfo = (id) =>\n  useFlowStore((state) => {\n    if (!id || !state.edges || !state.nodes) {\n      return { sourceNode: undefined, parentHandleColor: undefined };\n    }\n    const parentEdge = state.edges.find((edge) => edge.target === id);\n    if (!parentEdge)\n      return { sourceNode: undefined, parentHandleColor: undefined };\n\n    const parentNode = state.nodes.find((n) => n.id === parentEdge.source);\n    if (!parentNode)\n      return { sourceNode: undefined, parentHandleColor: undefined };\n\n    return {\n      sourceNode: parentNode.id,\n      parentHandleColor: parentNode.data?.color || undefined,\n    };\n  }, shallow);\n\n/**\n * Hook para gestionar el menú contextual.\n * Siempre devuelve un estado y acciones seguras.\n */\nexport const useContextMenu = () =>\n  useFlowStore(\n    (state) => ({\n      contextMenuVisible: state.contextMenuVisible ?? false,\n      contextMenuPosition: state.contextMenuPosition ?? { x: 0, y: 0 },\n      contextMenuNodeId: state.contextMenuNodeId ?? undefined,\n      contextMenuItems: state.contextMenuItems || defaultArray,\n      showContextMenu: state.showContextMenu || noop,\n      hideContextMenu: state.hideContextMenu || noop,\n    }),\n    shallow,\n  );\n\n/**\n * Hook para las acciones de deshacer y rehacer.\n */\nexport const useUndoRedo = () =>\n  useFlowStore(\n    (state) => ({\n      undo: state.undo || noop,\n      redo: state.redo || noop,\n      canUndo: (state.past?.length || 0) > 0,\n      canRedo: (state.future?.length || 0) > 0,\n    }),\n    shallow,\n  );\n\n// --- Selectores del Store de UI de Training (useTrainingStore) ---\n\n/**\n * Hook para acceder a los flags de la UI.\n * Garantiza que todos los flags tengan un valor booleano por defecto.\n */\nexport const useUIFlags = () =>\n  useTrainingStore(\n    (state) => ({\n      showSimulation: state.showSimulation || false,\n      showTemplateSelector: state.showTemplateSelector || false,\n      showExportMode: state.showExportMode || false,\n      showConnectionEditor: state.showConnectionEditor || false,\n      showRouteAnalysis: state.showRouteAnalysis || false,\n      showVersionHistoryPanel: state.showVersionHistoryPanel || false,\n      showSuggestionsModal: state.showSuggestionsModal || false,\n      showEmbedModal: state.showEmbedModal || false,\n    }),\n    shallow,\n  );\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/decisionNodeSlice.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (158). Maximum allowed is 80.",
        "line": 6,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 184,
        "endColumn": 3
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import isEqual from 'fast-deep-equal';\n\nimport { getConnectorColor } from '@/components/onboarding/nodes/decisionnode/DecisionNode.types';\nimport { generateId } from '@/services/flowService';\n\nexport const createDecisionNodeSlice = (set, get) => ({\n  // =================================================================================================\n  // DECISION NODE ACTIONS\n  // =================================================================================================\n\n  updateDecisionNodeQuestion: (nodeId, newQuestion) =>\n    get().updateNode(nodeId, { question: newQuestion }),\n\n  addDecisionNodeCondition: (nodeId) => {\n    const { nodes, _createHistoryEntry, generateOptionNodes } = get();\n    const newNodes = nodes.map((node) => {\n      if (node.id === nodeId && node.type === 'decision') {\n        const newCondition = {\n          id: generateId('condition'),\n          text: 'Nueva condición',\n          condition: '',\n          color: getConnectorColor(\n            'Nueva condición',\n            node.data.conditions.length,\n          ),\n        };\n        const updatedConditions = [...node.data.conditions, newCondition];\n        return {\n          ...node,\n          data: { ...node.data, conditions: updatedConditions },\n        };\n      }\n      return node;\n    });\n\n    if (!isEqual(nodes, newNodes)) {\n      _createHistoryEntry({ nodes: newNodes });\n      const updatedNode = newNodes.find((n) => n.id === nodeId);\n      if (updatedNode) {\n        generateOptionNodes(updatedNode);\n      }\n    }\n  },\n\n  updateDecisionNodeConditionText: (nodeId, conditionId, newText) => {\n    const { nodes, _createHistoryEntry, generateOptionNodes } = get();\n    const newNodes = nodes.map((node) => {\n      if (node.id === nodeId && node.type === 'decision') {\n        const updatedConditions = node.data.conditions.map((cond) =>\n          cond.id === conditionId ? { ...cond, text: newText } : cond,\n        );\n        return {\n          ...node,\n          data: { ...node.data, conditions: updatedConditions },\n        };\n      }\n      return node;\n    });\n\n    if (!isEqual(nodes, newNodes)) {\n      _createHistoryEntry({ nodes: newNodes });\n      const updatedNode = newNodes.find((n) => n.id === nodeId);\n      if (updatedNode) {\n        generateOptionNodes(updatedNode);\n      }\n    }\n  },\n\n  deleteDecisionNodeCondition: (nodeId, conditionId) => {\n    const { nodes, _createHistoryEntry, generateOptionNodes } = get();\n    const newNodes = nodes.map((node) => {\n      if (node.id === nodeId && node.type === 'decision') {\n        const updatedConditions = node.data.conditions.filter(\n          (cond) => cond.id !== conditionId,\n        );\n        return {\n          ...node,\n          data: { ...node.data, conditions: updatedConditions },\n        };\n      }\n      return node;\n    });\n\n    if (!isEqual(nodes, newNodes)) {\n      _createHistoryEntry({ nodes: newNodes });\n      const updatedNode = newNodes.find((n) => n.id === nodeId);\n      if (updatedNode) {\n        generateOptionNodes(updatedNode);\n      }\n    }\n  },\n\n  generateOptionNodes: (decisionNode) => {\n    const { nodes, edges, _createHistoryEntry, isUltraMode } = get();\n\n    const existingOptionNodeIds = new Set(\n      edges\n        .filter((edge) => edge.source === decisionNode.id)\n        .map((edge) => edge.target),\n    );\n\n    const nodesWithoutOldOptions = nodes.filter(\n      (node) => !existingOptionNodeIds.has(node.id),\n    );\n    const edgesWithoutOldOptions = edges.filter(\n      (edge) => edge.source !== decisionNode.id,\n    );\n\n    const { conditions } = decisionNode.data;\n    if (!conditions || conditions.length === 0) {\n      _createHistoryEntry({\n        nodes: nodesWithoutOldOptions,\n        edges: edgesWithoutOldOptions,\n      });\n      return;\n    }\n\n    const isUltra = isUltraMode || decisionNode.data.isUltraPerformanceMode;\n\n    const newOptionNodes = conditions.map((condition, index) => ({\n      id: `option-${decisionNode.id}-${condition.id}`,\n      type: 'option',\n      position: {\n        x:\n          decisionNode.position.x + (index - (conditions.length - 1) / 2) * 250,\n        y: decisionNode.position.y + 200,\n      },\n      data: {\n        sourceNode: decisionNode.id,\n        conditionId: condition.id,\n        text: condition.text,\n        instruction: condition.text,\n        isUltraPerformanceMode: isUltra,\n        parentNode: undefined,\n        color: condition.color,\n        lastUpdated: new Date().toISOString(),\n      },\n      draggable: true,\n      deletable: true,\n    }));\n\n    const newEdges = conditions.map((condition) => ({\n      id: `edge-${decisionNode.id}-${condition.id}`,\n      source: decisionNode.id,\n      target: `option-${decisionNode.id}-${condition.id}`,\n      sourceHandle: `output-${condition.id}`,\n      targetHandle: 'target',\n      type: 'eliteEdge',\n      animated: !isUltra,\n      style: { stroke: condition.color, strokeWidth: 2 },\n    }));\n\n    _createHistoryEntry({\n      nodes: [...nodesWithoutOldOptions, ...newOptionNodes],\n      edges: [...edgesWithoutOldOptions, ...newEdges],\n    });\n  },\n\n  _initializeDecisionNodeWithOptions: (decisionNode) => {\n    const { generateOptionNodes } = get();\n\n    if (\n      !Array.isArray(decisionNode.data.conditions) ||\n      decisionNode.data.conditions.length === 0\n    ) {\n      decisionNode.data.conditions = [\n        {\n          id: generateId('condition'),\n          text: 'Sí',\n          condition: 'true',\n          color: getConnectorColor('Sí', 0),\n        },\n        {\n          id: generateId('condition'),\n          text: 'No',\n          condition: 'false',\n          color: getConnectorColor('No', 1),\n        },\n      ];\n    }\n\n    generateOptionNodes(decisionNode);\n  },\n});\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/edgeSlice.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/historySlice.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/nodeSlice.js",
    "messages": [
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'getConnectorColor'.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 6,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [292, 391], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (136). Maximum allowed is 80.",
        "line": 37,
        "column": 32,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 215,
        "endColumn": 3
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused '_initializeDecisionNodeWithOptions' variable.",
        "line": 179,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 179,
        "endColumn": 75
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 187,
        "column": 22,
        "nodeType": "MemberExpression",
        "endLine": 187,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import isEqual from 'fast-deep-equal';\nimport { applyNodeChanges } from 'reactflow';\n\nimport { preventNodeStacking } from '@/components/onboarding/flow-editor/utils/fix-node-positions';\nimport { validateNodePositions } from '@/components/onboarding/flow-editor/utils/node-position-validator';\nimport { getConnectorColor } from '@/components/onboarding/nodes/decisionnode/DecisionNode.types';\nimport { generateId } from '@/services/flowService';\nimport { NODE_LABELS, NODE_TYPES } from '@/utils/node-config';\n\nimport { createSanitizedObject } from '../../utils/object-sanitizer';\n\nimport { createDecisionNodeSlice } from './decisionNodeSlice';\n\n// Aunque no se use para iterar, se mantiene como referencia de las propiedades permitidas.\nconst ALLOWED_NODE_DATA_PROPERTIES = [\n  'label',\n  'nodeType',\n  'metadata',\n  'message',\n  'variables',\n  'isEditing',\n  'id',\n  // Decision Node specific\n  'conditions',\n  'question',\n  // Option Node specific\n  'sourceNode',\n  'conditionId',\n  'text',\n  'instruction',\n  'isUltraPerformanceMode',\n  'parentNode',\n  'color',\n  'lastUpdated',\n];\n\nexport const createNodeSlice = (set, get) => ({\n  // =================================================================================================\n  // STATE\n  // =================================================================================================\n  nodes: [],\n\n  // =================================================================================================\n  // GENERIC NODE ACTIONS\n  // =================================================================================================\n\n  onNodesChange: (changes) => {\n    const { nodes: currentNodes, _createHistoryEntry } = get();\n\n    const isSelectionChange = changes.every((c) => c.type === 'select');\n    const isDrag = changes.some((c) => c.type === 'position' && c.dragging);\n\n    const newNodes = applyNodeChanges(changes, currentNodes);\n\n    if (isSelectionChange || isDrag) {\n      set({ nodes: newNodes });\n      return;\n    }\n\n    _createHistoryEntry({\n      nodes: newNodes,\n      isUndoing: false,\n      isRedoing: false,\n    });\n  },\n\n  setNodes: (nodes) => {\n    const { nodes: currentNodes, _createHistoryEntry, edges } = get();\n    const validatedNodes = validateNodePositions(nodes || []);\n    const processedNodes = preventNodeStacking(validatedNodes);\n\n    if (isEqual(currentNodes, processedNodes)) {\n      return;\n    }\n\n    _createHistoryEntry({ nodes: processedNodes, edges });\n  },\n\n  addNode: (nodeData, position, userData) => {\n    const { _createNodeFromPalette } = get();\n    let newNode;\n\n    if (typeof nodeData === 'string') {\n      newNode = _createNodeFromPalette(nodeData, position, userData);\n    } else {\n      const finalUserData = { ...nodeData.data, ...userData };\n      newNode = {\n        ...nodeData,\n        id: nodeData.id || generateId(nodeData.type || 'default'),\n        data: createSanitizedObject(\n          finalUserData,\n          ALLOWED_NODE_DATA_PROPERTIES,\n        ),\n      };\n      get()._createHistoryEntry({ nodes: [...get().nodes, newNode] });\n    }\n    return newNode;\n  },\n\n  updateNode: (id, dataToUpdate) => {\n    const { nodes, _createHistoryEntry } = get();\n    const newNodes = nodes.map((node) => {\n      if (node.id === id) {\n        const sanitizedData = createSanitizedObject(\n          dataToUpdate,\n          ALLOWED_NODE_DATA_PROPERTIES,\n        );\n        const updatedData = { ...node.data, ...sanitizedData };\n        return { ...node, data: updatedData };\n      }\n      return node;\n    });\n\n    if (!isEqual(nodes, newNodes)) {\n      _createHistoryEntry({ nodes: newNodes });\n    }\n  },\n\n  updateNodeData: (id, dataToUpdate) => get().updateNode(id, dataToUpdate),\n\n  setNodeEditing: (nodeId, isEditing) => {\n    get().updateNode(nodeId, { isEditing });\n  },\n\n  duplicateNode: (nodeIdToDuplicate) => {\n    const { nodes, addNode } = get();\n    const nodeToDuplicate = nodes.find((n) => n.id === nodeIdToDuplicate);\n    if (!nodeToDuplicate) return;\n\n    const newNodePosition = {\n      x: nodeToDuplicate.position.x + 50,\n      y: nodeToDuplicate.position.y + 50,\n    };\n\n    const newLabel = `${nodeToDuplicate.data.label || 'Nodo'} (Copia)`;\n    const newId = generateId(nodeToDuplicate.type);\n\n    const newNodeData = {\n      ...nodeToDuplicate,\n      id: newId,\n      position: newNodePosition,\n      data: { ...nodeToDuplicate.data, label: newLabel },\n    };\n    addNode(newNodeData);\n  },\n\n  deleteNode: (nodeIdToDelete) => {\n    const { nodes, edges, _createHistoryEntry } = get();\n    const nodesToDelete = new Set();\n    const edgesToDelete = new Set();\n    const queue = [nodeIdToDelete];\n\n    while (queue.length > 0) {\n      const currentId = queue.shift();\n      if (nodesToDelete.has(currentId)) continue;\n      nodesToDelete.add(currentId);\n\n      for (const edge of edges) {\n        if (edge.source === currentId) {\n          edgesToDelete.add(edge.id);\n          if (!nodesToDelete.has(edge.target)) queue.push(edge.target);\n        }\n      }\n    }\n\n    const remainingNodes = nodes.filter((node) => !nodesToDelete.has(node.id));\n    const remainingEdges = edges.filter((edge) => !edgesToDelete.has(edge.id));\n\n    _createHistoryEntry({ nodes: remainingNodes, edges: remainingEdges });\n  },\n\n  ...createDecisionNodeSlice(set, get),\n\n  // =================================================================================================\n  // INTERNAL HELPERS\n  // =================================================================================================\n\n  _createNodeFromPalette: (nodeType, position, userData) => {\n    const { nodes, _createHistoryEntry, _initializeDecisionNodeWithOptions } =\n      get();\n    const nodeId = generateId(nodeType);\n\n    // Validate nodeType against a hardcoded list of known, safe keys to prevent object injection.\n    let defaultLabel = nodeType;\n    if (Object.keys(NODE_LABELS).includes(nodeType)) {\n      // eslint-disable-next-line security/detect-object-injection\n      defaultLabel = NODE_LABELS[nodeType]; // Safe to access after validation.\n    }\n\n    const initialData = {\n      id: nodeId,\n      label: userData?.label || defaultLabel,\n      nodeType,\n      metadata: userData,\n    };\n\n    const newNode = {\n      id: nodeId,\n      type: nodeType,\n      position: position || {\n        x: 100 + (nodes.length % 3) * 200,\n        y: 100 + Math.floor(nodes.length / 3) * 150,\n      },\n      data: createSanitizedObject(initialData, ALLOWED_NODE_DATA_PROPERTIES),\n    };\n\n    if (newNode.type === NODE_TYPES.decision) {\n      get()._initializeDecisionNodeWithOptions(newNode);\n    } else {\n      _createHistoryEntry({ nodes: [...nodes, newNode] });\n    }\n\n    return newNode;\n  },\n});\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/persistenceSlice.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/slices/uiSlice.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/use-auth-store.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (317). Maximum allowed is 80.",
        "line": 30,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 391,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\nimport logger from '@/services/loggerService';\nimport { onEvent } from '@/utils/event-bus.js';\n\nimport * as authApi from './auth/auth-api';\nimport { parseAuthError } from './auth/error-parser';\n\n// Estado inicial\nconst initialState = {\n  user: undefined,\n  isAuthenticated: false,\n  loading: false,\n  error: undefined,\n  // Estado del perfil\n  profile: {\n    energyLevel: 0,\n    dailyRewardAvailable: true,\n    recentActivities: [],\n    isLoading: false,\n    isLoaded: false,\n    profileId: undefined,\n    terminalId: undefined,\n  },\n  _isLoadingProfile: false,\n  _profileCache: { data: undefined, timestamp: 0 },\n};\n\nconst authStoreLogic = (set, get) => {\n  // Escuchar el evento de logout para desacoplar de axios-config\n  onEvent('auth:logout', () => get().logout());\n\n  const _profileCache = {\n    isValid: () => {\n      const cache = get()._profileCache;\n      const CACHE_DURATION = 5 * 60 * 1000; // 5 minutos\n      return cache.data && Date.now() - cache.timestamp < CACHE_DURATION;\n    },\n    set: (data) => {\n      set((state) => ({\n        _profileCache: {\n          ...state._profileCache,\n          data,\n          timestamp: Date.now(),\n        },\n      }));\n    },\n    clear: () => {\n      set((state) => ({\n        _profileCache: {\n          ...state._profileCache,\n          data: undefined,\n          timestamp: 0,\n        },\n      }));\n    },\n  };\n\n  const _handleCachedProfile = (forceUpdate) => {\n    if (!forceUpdate && _profileCache.isValid()) {\n      const cachedUser = _profileCache.data;\n      if (cachedUser) {\n        set((state) => ({\n          user: cachedUser,\n          profile: { ...state.profile, ...cachedUser, isLoaded: true },\n        }));\n        return { success: true, user: cachedUser };\n      }\n    }\n  };\n\n  const _fetchAndSetProfile = async () => {\n    try {\n      const data = await authApi.fetchUserProfile();\n      if (data?.success && data.user) {\n        _profileCache.set(data.user);\n        set((state) => ({\n          ...state,\n          user: data.user,\n          _isLoadingProfile: false,\n          profile: {\n            ...state.profile,\n            ...data.user,\n            isLoading: false,\n            isLoaded: true,\n          },\n        }));\n        return { success: true, user: data.user };\n      }\n      throw new Error(data?.message || 'No se pudo cargar el perfil');\n    } catch (error) {\n      const errorMessage = parseAuthError(error);\n      set((state) => ({\n        ...state,\n        _isLoadingProfile: false,\n        profile: {\n          ...state.profile,\n          isLoading: false,\n          error: errorMessage,\n        },\n      }));\n      if (error.response?.status === 401) get().logout();\n      throw new Error(errorMessage);\n    }\n  };\n\n  const _handleAuthSuccess = (data) => {\n    localStorage.setItem('access_token', data.access_token);\n    if (data.refresh_token) {\n      localStorage.setItem('refresh_token', data.refresh_token);\n    }\n    set({ user: data.user, isAuthenticated: true, loading: false });\n    _profileCache.set(data.user);\n    return { success: true, user: data.user };\n  };\n\n  return {\n    ...initialState,\n\n    // Iniciar sesión\n    login: async (email, password) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.loginUser(email, password);\n        if (data?.success && data?.user) {\n          return _handleAuthSuccess(data);\n        }\n        throw new Error(data?.message || 'Respuesta inválida del servidor');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({\n          user: undefined,\n          isAuthenticated: false,\n          loading: false,\n          error: errorMessage,\n        });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Registrar nuevo usuario\n    register: async (name, email, password) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.registerUser(name, email, password);\n        if (data?.success === true) {\n          set({ loading: false });\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al registrarse');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Cerrar sesión\n    logout: async () => {\n      set({ loading: true });\n      const accessToken = localStorage.getItem('access_token');\n\n      try {\n        if (accessToken) {\n          await authApi.logoutUser();\n        }\n      } catch {\n        logger.warn('Fallo el logout en la API, procediendo localmente');\n      } finally {\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        _profileCache.clear();\n        set({ ...initialState, loading: false });\n        onEvent('auth:logged_out');\n      }\n    },\n\n    // Verificar autenticación\n    checkAuth: () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        set({ isAuthenticated: true });\n        // Opcional: decodificar token para obtener info básica sin llamar a la API\n      } else {\n        const currentState = get();\n        if (currentState.isAuthenticated) {\n          currentState.logout();\n        }\n      }\n    },\n\n    // Cargar perfil de usuario\n    fetchUserProfile: async (forceUpdate = false) => {\n      if (get()._isLoadingProfile) return;\n\n      const cachedResponse = _handleCachedProfile(forceUpdate);\n      if (cachedResponse) return cachedResponse;\n\n      set((state) => ({\n        ...state,\n        _isLoadingProfile: true,\n        profile: { ...state.profile, isLoading: true, error: undefined },\n      }));\n\n      return _fetchAndSetProfile();\n    },\n\n    // Solicitar restablecimiento de contraseña\n    forgotPassword: async (email) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.requestPasswordReset(email);\n        if (data?.success) {\n          set({ loading: false });\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al solicitar');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Restablecer contraseña\n    resetPassword: async (token, newPassword) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.resetUserPassword(token, newPassword);\n        if (data?.success) {\n          set({ loading: false });\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al restablecer');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Cambiar contraseña\n    changePassword: async (currentPassword, newPassword) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.changeUserPassword(\n          currentPassword,\n          newPassword,\n        );\n        if (data?.success) {\n          set({ loading: false });\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al cambiar contraseña');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Verificar email con token\n    verifyEmail: async (token) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.verifyUserEmail(token);\n        if (data?.success) {\n          set((state) => ({\n            loading: false,\n            user: { ...state.user, is_verified: true },\n          }));\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al verificar');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Reenviar email de verificación\n    resendVerificationEmail: async (email) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.resendVerificationEmail(email);\n        if (data?.success) {\n          set({ loading: false });\n          return { success: true, message: data.message };\n        }\n        throw new Error(data?.message || 'Error al reenviar');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Autenticación con Google\n    getGoogleAuthUrl: async () => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.fetchGoogleAuthUrl();\n        if (data?.url) {\n          set({ loading: false });\n          return { success: true, url: data.url };\n        }\n        throw new Error('No se pudo obtener la URL de Google');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({ loading: false, error: errorMessage });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Procesar token de autenticación de Google\n    processGoogleAuth: async (token) => {\n      set({ loading: true, error: undefined });\n      try {\n        const data = await authApi.processGoogleToken(token);\n        if (data?.success && data.user) {\n          return _handleAuthSuccess(data);\n        }\n        throw new Error(\n          data?.message || 'Error en la autenticación con Google',\n        );\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set({\n          loading: false,\n          error: errorMessage,\n          isAuthenticated: false,\n          user: undefined,\n        });\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Actualizar manualmente el objeto de usuario\n    setUser: (user) => {\n      set({ user });\n    },\n\n    // Limpiar errores\n    clearError: () => set({ error: undefined }),\n\n    // Actualizar perfil\n    updateProfile: async (updates) => {\n      if (!get().isAuthenticated) throw new Error('No hay usuario autenticado');\n\n      set((state) => ({ profile: { ...state.profile, isLoading: true } }));\n\n      try {\n        const data = await authApi.updateUserProfile(updates);\n        if (data?.success && data.user) {\n          const updatedUser = { ...get().user, ...data.user };\n          _profileCache.set(updatedUser);\n          set((state) => ({\n            user: updatedUser,\n            profile: {\n              ...state.profile,\n              isLoading: false,\n              isLoaded: true,\n              error: undefined,\n            },\n          }));\n          return { success: true, user: updatedUser };\n        }\n        throw new Error(data?.message || 'Error al actualizar el perfil');\n      } catch (error) {\n        const errorMessage = parseAuthError(error);\n        set((state) => ({\n          profile: {\n            ...state.profile,\n            isLoading: false,\n            error: errorMessage,\n          },\n        }));\n        if (error.response?.status === 401) get().logout();\n        throw new Error(errorMessage);\n      }\n    },\n\n    // Utilidades\n    clearProfileError: () =>\n      set((state) => ({\n        profile: { ...state.profile, error: undefined },\n      })),\n  };\n};\n\nconst persistConfig = {\n  name: 'auth-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: (state) => {\n    const { user, isAuthenticated, _profileCache } = state;\n    const partialUser = user\n      ? {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          is_verified: user.is_verified,\n          plubots: user.plubots,\n        }\n      : undefined;\n\n    return {\n      user: partialUser,\n      isAuthenticated,\n      _profileCache,\n    };\n  },\n};\n\nconst useAuthStore = create(persist(authStoreLogic, persistConfig));\n\n// Selectores personalizados\nexport const useUser = () => useAuthStore((state) => state.user);\nexport const useIsAuthenticated = () =>\n  useAuthStore((state) => state.isAuthenticated);\nexport const useAuthLoading = () => useAuthStore((state) => state.loading);\nexport const useAuthError = () => useAuthStore((state) => state.error);\n\nexport default useAuthStore;\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/use-flow-store.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/use-sync-store.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/stores/use-training-store.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 2,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 26,
        "column": 30,
        "nodeType": "NewExpression",
        "endLine": 26,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utilities/ParticlesBackground.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utilities/SheetsViewer.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 115,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 115,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 118,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "noArrayIndex",
        "endLine": 118,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react/no-array-index-key",
        "severity": 1,
        "message": "Do not use Array index in keys",
        "line": 127,
        "column": 30,
        "nodeType": "TemplateLiteral",
        "messageId": "noArrayIndex",
        "endLine": 127,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/ai-flow-helpers.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 80.",
        "line": 89,
        "column": 41,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 198,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 89,
        "column": 41,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 198,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 174,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 174,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * aiFlowHelpers.js\n * Utilidades para analizar y optimizar flujos conversacionales en Plubot.\n */\n\n/**\n * Analiza la estructura del flujo conversacional para identificar problemas.\n * @param {Array} nodes - Lista de nodos del flujo.\n * @returns {Object} - Objeto con mensaje descriptivo y categoría.\n */\nexport const analyzeFlowStructure = (nodes, edges) => {\n  if (!Array.isArray(nodes) || nodes.length === 0) {\n    return {\n      message: 'El flujo está vacío. Añade nodos para comenzar.',\n      category: 'Error',\n    };\n  }\n\n  // Contar tipos de nodos\n  const nodeTypesCount = Object.create(null);\n  for (const node of nodes) {\n    nodeTypesCount[node.type] = (nodeTypesCount[node.type] || 0) + 1;\n  }\n\n  // Validar presencia de nodos críticos\n  if (!nodeTypesCount.start) {\n    return {\n      message:\n        'Falta un nodo de inicio. Todo flujo debe comenzar con un nodo \"start\".',\n      category: 'Error',\n    };\n  }\n  if (nodeTypesCount.start > 1) {\n    return {\n      message:\n        'Se detectaron múltiples nodos de inicio. Un flujo debe tener solo un nodo \"start\".',\n      category: 'Error',\n    };\n  }\n  if (!nodeTypesCount.end) {\n    return {\n      message:\n        'Falta un nodo de fin. Todo flujo debe terminar con al menos un nodo \"end\".',\n      category: 'Error',\n    };\n  }\n\n  // Verificar nodos desconectados (sin conexiones, pero no aplica a start/end)\n  const hasIsolatedNodes = nodes.some((node) => {\n    const isRegularNode = node.type !== 'start' && node.type !== 'end';\n    if (!isRegularNode) {\n      return false;\n    }\n    const isConnected = edges.some(\n      (edge) => edge.source === node.id || edge.target === node.id,\n    );\n    return !isConnected;\n  });\n  if (hasIsolatedNodes) {\n    return {\n      message:\n        'Se encontraron nodos desconectados. Conecta todos los nodos para formar un flujo coherente.',\n      category: 'Advertencia',\n    };\n  }\n\n  // Análisis de complejidad\n  const totalNodes = nodes.length;\n  if (totalNodes < 3) {\n    return {\n      message:\n        'El flujo es muy simple. Considera añadir nodos de decisión o acción para mayor interactividad.',\n      category: 'Sugerencia',\n    };\n  }\n\n  return {\n    message: `Análisis completado: ${totalNodes} nodos detectados. La estructura parece válida.`,\n    category: 'Info',\n  };\n};\n\n/**\n * Sugiere optimizaciones para el flujo conversacional basado en nodos y bordes.\n * @param {Array} nodes - Lista de nodos del flujo.\n * @param {Array} edges - Lista de bordes del flujo.\n * @returns {Object|null} - Objeto con sugerencia y categoría, o null si no hay sugerencias.\n */\nexport const suggestNodeOptimizations = (nodes, edges) => {\n  if (!Array.isArray(nodes) || !Array.isArray(edges)) {\n    return {\n      message:\n        'Datos inválidos. Asegúrate de proporcionar nodos y bordes válidos.',\n      category: 'Error',\n    };\n  }\n\n  // Crear un mapa de conexiones para análisis eficiente\n  // Create a directed graph representation (adjacency list) for efficient lookup.\n  const connections = Object.create(null);\n  for (const edge of edges) {\n    if (!connections[edge.source]) {\n      connections[edge.source] = [];\n    }\n    connections[edge.source].push(edge.target);\n  }\n\n  // Verificar nodos sin conexiones salientes (excepto end)\n  // Find nodes that are not 'end' nodes and have no outgoing connections.\n  const deadEnds = nodes.filter(\n    (node) => node.type !== 'end' && !connections[node.id]?.length,\n  );\n  if (deadEnds.length > 0) {\n    return {\n      message: `Se encontraron nodos sin conexiones salientes (${deadEnds\n        .map((n) => n.data.label)\n        .join(', ')}). Añade conexiones para continuar el flujo.`,\n      category: 'Advertencia',\n    };\n  }\n\n  // Analizar distribución de nodos de decisión\n  const decisionNodes = nodes.filter((node) => node.type === 'decision');\n  if (decisionNodes.length === 0 && nodes.length > 5) {\n    return {\n      message:\n        'No hay nodos de decisión. Añade nodos de tipo \"decision\" para crear flujos más interactivos.',\n      category: 'Sugerencia',\n    };\n  }\n\n  // Find the first decision node with unbalanced branches.\n  const unbalancedNode = decisionNodes.find((node) => {\n    const { branchA, branchB } = node.data.branchMetrics || {};\n    return Boolean(branchA && branchB && Math.abs(branchA - branchB) > 50);\n  });\n\n  if (unbalancedNode) {\n    return {\n      message: [\n        `El nodo \"${unbalancedNode.data.label}\" tiene ramas desbalanceadas. `,\n        'Considere ajustar las condiciones.',\n      ].join(''),\n      category: 'Sugerencia',\n    };\n  }\n\n  // Verificar nodos de acción con baja tasa de éxito\n  const actionNodes = nodes.filter(\n    (node) => node.type === 'action' && node.data.successRate < 80,\n  );\n  if (actionNodes.length > 0) {\n    return {\n      message: [\n        `El nodo \"${actionNodes[0].data.label}\" tiene una tasa de éxito baja. `,\n        'Recomiendo revisar la acción.',\n      ].join(''),\n      category: 'Advertencia',\n    };\n  }\n\n  // Verificar caminos largos sin nodos de mensaje\n  const visited = new Set();\n  const dfs = (nodeId, depth, hasMessage) => {\n    if (depth > 5 && !hasMessage) {\n      return true; // Camino largo sin mensaje\n    }\n    const node = nodes.find((n) => n.id === nodeId);\n    if (!node || visited.has(nodeId)) return false;\n    visited.add(nodeId);\n    const isMessage = node.type === 'message';\n    // `connections` is a safe, prototype-less object, and nodeId is a controlled value.\n    // eslint-disable-next-line security/detect-object-injection\n    const neighbors = connections[nodeId] || [];\n    for (const neighbor of neighbors) {\n      if (dfs(neighbor, depth + 1, hasMessage || isMessage)) {\n        return true;\n      }\n    }\n    visited.delete(nodeId);\n    return false;\n  };\n\n  const startNode = nodes.find((n) => n.type === 'start');\n  if (startNode && dfs(startNode.id, 0, false)) {\n    return {\n      message:\n        'Se detectó un camino largo sin nodos de mensaje. Añade nodos de tipo \"message\" para mejorar la interacción.',\n      category: 'Sugerencia',\n    };\n  }\n\n  // No se devuelve nada explícitamente si no hay sugerencias, pero se asegura un retorno consistente.\n  return {\n    message: '',\n    category: '',\n  };\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/auth-helpers.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 68,
        "column": 27,
        "nodeType": "MemberExpression",
        "endLine": 68,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/axios-config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/date-formatters.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/date.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/development-mode.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/error-handler.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'captureError' has a complexity of 14. Maximum allowed is 10.",
        "line": 27,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 91,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import logger from '../services/loggerService';\n\n/**\n * Sistema centralizado de manejo de errores para el editor de flujos.\n * Proporciona funciones para capturar, clasificar, registrar y manejar errores\n * de manera coherente en toda la aplicación.\n */\n\n// Constantes para tipos de errores\nexport const ERROR_TYPES = {\n  AUTH: 'auth', // Errores de autenticación\n  NETWORK: 'network', // Errores de red\n  VALIDATION: 'validation', // Errores de validación de datos\n  API: 'api', // Errores de API\n  FLOW: 'flow', // Errores específicos del editor de flujos\n  RENDERING: 'rendering', // Errores de renderizado\n  STORAGE: 'storage', // Errores de almacenamiento\n  GENERAL: 'general', // Errores generales\n};\n\n/**\n * Captura y clasifica un error\n * @param {Error} error - El objeto de error\n * @param {string} context - Contexto donde ocurrió el error\n * @returns {Object} Información clasificada sobre el error\n */\nexport function captureError(error, context = 'unknown') {\n  // Registrar en consola para debugging\n\n  // Información básica del error\n  const errorInfo = {\n    originalError: error,\n    message: error.message || 'Error desconocido',\n    context,\n    timestamp: Date.now(),\n    type: ERROR_TYPES.GENERAL, // Tipo por defecto\n    data: {},\n  };\n\n  // Clasificar error según sus características\n  if (error.response) {\n    // Error de respuesta HTTP\n    const { status } = error.response;\n    errorInfo.data.status = status;\n    errorInfo.data.responseData = error.response.data;\n\n    // Clasificar por código de estado\n    switch (status) {\n      case 401:\n      case 403: {\n        errorInfo.type = ERROR_TYPES.AUTH;\n        errorInfo.message = 'Sesión expirada o no autorizado';\n\n        break;\n      }\n      case 404: {\n        errorInfo.type = ERROR_TYPES.API;\n        errorInfo.message = 'Recurso no encontrado';\n\n        break;\n      }\n      case 422: {\n        errorInfo.type = ERROR_TYPES.VALIDATION;\n        errorInfo.message = 'Datos no válidos';\n\n        break;\n      }\n      default: {\n        if (status >= 500) {\n          errorInfo.type = ERROR_TYPES.API;\n          errorInfo.message = 'Error en el servidor';\n        }\n      }\n    }\n  } else if (error.request) {\n    // Error de red (sin respuesta)\n    errorInfo.type = ERROR_TYPES.NETWORK;\n    errorInfo.message = 'Error de conexión. Verifica tu red.';\n  } else if (error.message && error.message.includes('validateFlow')) {\n    // Error de validación de flujo\n    errorInfo.type = ERROR_TYPES.VALIDATION;\n  } else if (error.message && error.message.includes('storage')) {\n    // Error de almacenamiento\n    errorInfo.type = ERROR_TYPES.STORAGE;\n  }\n\n  // Guardar en histórico de errores\n  saveErrorToLog(errorInfo);\n\n  return errorInfo;\n}\n\n/**\n * Maneja un error según su tipo y contexto\n * @param {Object} errorInfo - Información del error (de captureError)\n * @param {Function} notifyUser - Función para notificar al usuario\n * @returns {Object} Acciones recomendadas\n */\nexport function handleError(errorInfo, notifyUser) {\n  // Por defecto: mostrar notificación si está disponible\n  if (typeof notifyUser === 'function') {\n    notifyUser(errorInfo.message, 'error');\n  }\n\n  // Determinar acciones según el tipo de error\n  const actions = {\n    shouldRedirect: false,\n    shouldRetry: false,\n    shouldRecover: false,\n    shouldClearCache: false,\n    path: undefined,\n  };\n\n  switch (errorInfo.type) {\n    case ERROR_TYPES.AUTH: {\n      // Limpiar token y redirigir a login\n      localStorage.removeItem('access_token');\n      actions.shouldRedirect = true;\n      actions.path = '/login';\n      break;\n    }\n\n    case ERROR_TYPES.NETWORK: {\n      // Sugerir reintentar\n      actions.shouldRetry = true;\n      break;\n    }\n\n    case ERROR_TYPES.VALIDATION: {\n      // Mostrar detalles de validación si están disponibles\n      if (errorInfo.data.responseData?.errors) {\n        const detailedMessage = Object.entries(\n          errorInfo.data.responseData.errors,\n        )\n          .map(([field, msgs]) => `${field}: ${msgs.join(', ')}`)\n          .join('\\n');\n\n        if (notifyUser) {\n          notifyUser(`Datos no válidos:\\n${detailedMessage}`, 'error');\n        }\n      }\n      break;\n    }\n\n    case ERROR_TYPES.FLOW: {\n      // Intentar recuperación automática\n      actions.shouldRecover = true;\n      break;\n    }\n\n    case ERROR_TYPES.STORAGE: {\n      // Limpiar caché y reintentar\n      actions.shouldClearCache = true;\n      actions.shouldRetry = true;\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  return actions;\n}\n\n/**\n * Guarda un error en el registro local para análisis posterior\n * @param {Object} errorInfo - Información del error\n */\nfunction saveErrorToLog(errorInfo) {\n  try {\n    // Obtener log existente\n    const errorLog = JSON.parse(localStorage.getItem('flow_error_log') || '[]');\n\n    // Añadir nuevo error (sin el objeto de error original para evitar ciclos)\n    const logEntry = {\n      ...errorInfo,\n      originalError: undefined,\n      stackTrace: errorInfo.originalError?.stack,\n    };\n\n    // Limitar a los últimos 20 errores\n    errorLog.push(logEntry);\n    if (errorLog.length > 20) {\n      errorLog.shift();\n    }\n\n    // Guardar log actualizado\n    localStorage.setItem('flow_error_log', JSON.stringify(errorLog));\n  } catch (error) {\n    logger.error('Failed to save error to log:', error);\n  }\n}\n\n/**\n * Recupera datos de un respaldo local si está disponible.\n * @param {string} backupId - ID del respaldo a recuperar.\n * @returns {object | undefined} Datos recuperados o undefined si no hay respaldo o si ocurre un error.\n */\nexport function recoverFromBackup(backupId) {\n  let recoveredData;\n  try {\n    const backup = localStorage.getItem(backupId);\n    if (backup) {\n      recoveredData = JSON.parse(backup);\n    } else {\n      logger.warn(`No se encontró respaldo con ID ${backupId}`);\n    }\n  } catch (error) {\n    logger.error(`Error al recuperar respaldo ${backupId}:`, error);\n  }\n  return recoveredData;\n}\n\n/**\n * Genera un reporte de errores para enviar al equipo de soporte\n * @returns {Object} Reporte de errores\n */\nexport function generateErrorReport() {\n  try {\n    const errorLog = JSON.parse(localStorage.getItem('flow_error_log') || '[]');\n    const backups = [];\n\n    // Buscar respaldos existentes\n    for (const key of Object.keys(localStorage)) {\n      if (key.startsWith('flow_backup_')) {\n        try {\n          const backup = JSON.parse(localStorage.getItem(key));\n          backups.push({\n            id: key,\n            timestamp: backup.timestamp,\n            nodesCount: backup.nodes?.length || 0,\n            edgesCount: backup.edges?.length || 0,\n          });\n        } catch (error) {\n          logger.error(`Failed to parse backup data for key: ${key}`, error);\n        }\n      }\n    }\n\n    return {\n      errors: errorLog,\n      backups,\n      browser: navigator.userAgent,\n      timestamp: Date.now(),\n    };\n  } catch (error) {\n    logger.error('Failed to generate error report:', error);\n    return { error: 'No se pudo generar el reporte' };\n  }\n}\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/event-bus.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/event-callback.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/flow-optimizer.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 17. Maximum allowed is 10.",
        "line": 110,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 152,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 19. Maximum allowed is 10.",
        "line": 160,
        "column": 34,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 248,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 15. Maximum allowed is 10.",
        "line": 313,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 405,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Function Call Object Injection Sink",
        "line": 95,
        "column": 22,
        "nodeType": "MemberExpression",
        "endLine": 95,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Function Call Object Injection Sink",
        "line": 95,
        "column": 60,
        "nodeType": "MemberExpression",
        "endLine": 95,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidades para optimizar y mejorar el manejo de flujos en el editor.\n * Proporciona funciones para normalizar, comparar y optimizar flujos.\n */\n\n/**\n * Normaliza un nodo para su comparaciu00f3n eficiente\n * @param {Object} node - Nodo a normalizar\n * @returns {Object} Nodo normalizado\n */\nconst normalizeNode = (node) => {\n  const { id, type, position, data } = node;\n\n  // Estructura normalizada para comparaciu00f3n eficiente\n  return {\n    id,\n    type,\n    position: {\n      x: Math.round(position.x),\n      y: Math.round(position.y),\n    },\n    data: {\n      ...data,\n      // Filtrar propiedades virtuales o de RenderInfo que no persistimos\n      _renderInfo: undefined,\n      isVisible: undefined,\n      detailLevel: undefined,\n      renderDetail: undefined,\n    },\n  };\n};\n\n/**\n * Normaliza una arista para su comparaciu00f3n eficiente\n * @param {Object} edge - Arista a normalizar\n * @returns {Object} Arista normalizada\n */\nconst normalizeEdge = (edge) => {\n  const { id, source, target, sourceHandle, targetHandle, label, type, style } =\n    edge;\n\n  // Estructura normalizada para comparaciu00f3n eficiente\n  return {\n    id,\n    source,\n    target,\n    sourceHandle,\n    targetHandle,\n    label,\n    type,\n    // Normalizar estilos relevantes si existen\n    style: style\n      ? {\n          strokeWidth: style.strokeWidth,\n          stroke: style.stroke,\n        }\n      : undefined,\n  };\n};\n\n/**\n * Detecta cambios entre dos nodos\n * @param {Object} oldNode - Nodo original\n * @param {Object} newNode - Nodo modificado\n * @returns {boolean} true si hay cambios, false en caso contrario\n */\nexport const hasNodeChanged = (oldNode, newNode) => {\n  if (!oldNode || !newNode) return true;\n\n  const normalizedOld = normalizeNode(oldNode);\n  const normalizedNew = normalizeNode(newNode);\n\n  // Comparar posiciones con umbral de tolerancia para evitar actualizaciones innecesarias\n  const positionChanged =\n    Math.abs(normalizedOld.position.x - normalizedNew.position.x) > 1 ||\n    Math.abs(normalizedOld.position.y - normalizedNew.position.y) > 1;\n\n  if (positionChanged) return true;\n\n  // Comparar tipo\n  if (normalizedOld.type !== normalizedNew.type) return true;\n\n  // Comparar datos relevantes\n  const oldData = normalizedOld.data || {};\n  const newData = normalizedNew.data || {};\n\n  // Comparar propiedades comunes para diferentes tipos de nodos\n  const commonProperties = ['label', 'message', 'options', 'conditions'];\n\n  for (const property of commonProperties) {\n    // La variable `property` proviene de una lista blanca (allowlist) predefinida,\n    // lo que garantiza que el acceso a las propiedades del objeto es seguro.\n    if (\n      // eslint-disable-next-line security/detect-object-injection\n      JSON.stringify(oldData[property]) !== JSON.stringify(newData[property])\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Detecta cambios entre dos aristas\n * @param {Object} oldEdge - Arista original\n * @param {Object} newEdge - Arista modificada\n * @returns {boolean} true si hay cambios, false en caso contrario\n */\nexport const hasEdgeChanged = (oldEdge, newEdge) => {\n  if (!oldEdge || !newEdge) return true;\n\n  const normalizedOld = normalizeEdge(oldEdge);\n  const normalizedNew = normalizeEdge(newEdge);\n\n  // Comparar conexiones\n  if (\n    normalizedOld.source !== normalizedNew.source ||\n    normalizedOld.target !== normalizedNew.target ||\n    normalizedOld.sourceHandle !== normalizedNew.sourceHandle ||\n    normalizedOld.targetHandle !== normalizedNew.targetHandle\n  ) {\n    return true;\n  }\n\n  // Comparar etiqueta\n  if (normalizedOld.label !== normalizedNew.label) {\n    return true;\n  }\n\n  // Comparar tipo\n  if (normalizedOld.type !== normalizedNew.type) {\n    return true;\n  }\n\n  // Comparar estilos relevantes\n  if (normalizedOld.style && normalizedNew.style) {\n    if (\n      normalizedOld.style.strokeWidth !== normalizedNew.style.strokeWidth ||\n      normalizedOld.style.stroke !== normalizedNew.style.stroke\n    ) {\n      return true;\n    }\n  } else if (\n    (normalizedOld.style && !normalizedNew.style) ||\n    (!normalizedOld.style && normalizedNew.style)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Calcula las diferencias entre dos estados de flujo\n * @param {Object} prevState - Estado anterior {nodes, edges}\n * @param {Object} currentState - Estado actual {nodes, edges}\n * @returns {Object} Cambios detectados entre estados\n */\nexport const calculateFlowDiff = (previousState, currentState) => {\n  const previousNodes = previousState?.nodes || [];\n  const currentNodes = currentState?.nodes || [];\n  const previousEdges = previousState?.edges || [];\n  const currentEdges = currentState?.edges || [];\n\n  // Crear mapas para buscar elementos por ID\n  const previousNodesMap = new Map(\n    previousNodes.map((node) => [node.id, node]),\n  );\n  const currentNodesMap = new Map(currentNodes.map((node) => [node.id, node]));\n  const previousEdgesMap = new Map(\n    previousEdges.map((edge) => [edge.id, edge]),\n  );\n  const currentEdgesMap = new Map(currentEdges.map((edge) => [edge.id, edge]));\n\n  // Detectar cambios en nodos\n  const nodesToCreate = [];\n  const nodesToUpdate = [];\n  const nodesToDelete = [];\n\n  // Nodos nuevos o modificados\n  for (const node of currentNodes) {\n    const previousNode = previousNodesMap.get(node.id);\n    if (!previousNode) {\n      nodesToCreate.push(node);\n    } else if (hasNodeChanged(previousNode, node)) {\n      nodesToUpdate.push(node);\n    }\n  }\n\n  // Nodos eliminados\n  for (const node of previousNodes) {\n    if (!currentNodesMap.has(node.id)) {\n      nodesToDelete.push(node.id);\n    }\n  }\n\n  // Detectar cambios en aristas\n  const edgesToCreate = [];\n  const edgesToUpdate = [];\n  const edgesToDelete = [];\n\n  // Aristas nuevas o modificadas\n  for (const edge of currentEdges) {\n    const previousEdge = previousEdgesMap.get(edge.id);\n    if (!previousEdge) {\n      edgesToCreate.push(edge);\n    } else if (hasEdgeChanged(previousEdge, edge)) {\n      edgesToUpdate.push(edge);\n    }\n  }\n\n  // Aristas eliminadas\n  for (const edge of previousEdges) {\n    if (!currentEdgesMap.has(edge.id)) {\n      edgesToDelete.push(edge.id);\n    }\n  }\n\n  // Calcular estadisticas\n  const stats = {\n    total: {\n      nodes: currentNodes.length,\n      edges: currentEdges.length,\n    },\n    changes: {\n      nodesCreated: nodesToCreate.length,\n      nodesUpdated: nodesToUpdate.length,\n      nodesDeleted: nodesToDelete.length,\n      edgesCreated: edgesToCreate.length,\n      edgesUpdated: edgesToUpdate.length,\n      edgesDeleted: edgesToDelete.length,\n    },\n  };\n\n  // Crear resumen final\n  return {\n    // Datos para la API\n    nodes_to_create: nodesToCreate,\n    nodes_to_update: nodesToUpdate,\n    nodes_to_delete: nodesToDelete,\n    edges_to_create: edgesToCreate,\n    edges_to_update: edgesToUpdate,\n    edges_to_delete: edgesToDelete,\n    // Estadisticas adicionales\n    stats,\n  };\n};\n\n/**\n * Optimiza un flujo para aumentar su rendimiento\n * @param {Object} flow - Flujo a optimizar {nodes, edges}\n * @returns {Object} Flujo optimizado {nodes, edges}\n */\nexport const optimizeFlow = (flow) => {\n  if (!flow) return { nodes: [], edges: [] };\n\n  const { nodes = [], edges = [] } = flow;\n\n  // 1. Eliminar nodos desconectados o hu00e9rfanos\n  const connectedNodeIds = new Set();\n\n  // Au00f1adir todos los nodos que son origen o destino de alguna arista\n  for (const edge of edges) {\n    connectedNodeIds.add(edge.source);\n    connectedNodeIds.add(edge.target);\n  }\n\n  // Siempre mantener el nodo START como \"conectado\", aunque no tenga conexiones\n  for (const node of nodes) {\n    if (node.type === 'start') {\n      connectedNodeIds.add(node.id);\n    }\n  }\n\n  // Filtrar nodos conectados o de inicio\n  const optimizedNodes = nodes.filter((node) => connectedNodeIds.has(node.id));\n\n  // 2. Optimizar datos de nodos\n  const processedNodes = optimizedNodes.map((node) => ({\n    ...node,\n    data: {\n      ...node.data,\n      // Eliminar datos temporales que no necesitamos persistir\n      _renderInfo: undefined,\n      isVisible: undefined,\n      detailLevel: undefined,\n      renderDetail: undefined,\n    },\n  }));\n\n  // 3. Validar aristas (eliminar las que apuntan a nodos que ya no existen)\n  const validNodeIds = new Set(processedNodes.map((node) => node.id));\n  const optimizedEdges = edges.filter(\n    (edge) => validNodeIds.has(edge.source) && validNodeIds.has(edge.target),\n  );\n\n  return {\n    nodes: processedNodes,\n    edges: optimizedEdges,\n    stats: {\n      nodesRemoved: nodes.length - processedNodes.length,\n      edgesRemoved: edges.length - optimizedEdges.length,\n    },\n  };\n};\n\n/**\n * Valida un flujo en busca de problemas o configuraciones incorrectas\n * @param {Object} flow - Flujo a validar {nodes, edges}\n * @returns {Object} Resultado de validaciu00f3n con errores y advertencias\n */\nexport const validateFlow = (flow) => {\n  if (!flow) return { valid: false, errors: ['Flujo indefinido'] };\n\n  const { nodes = [], edges = [] } = flow;\n  const errors = [];\n  const warnings = [];\n\n  // 1. Validar que exista al menos un nodo de inicio y uno de fin\n  const startNodes = nodes.filter((node) => node.type === 'start');\n  const endNodes = nodes.filter((node) => node.type === 'end');\n\n  if (startNodes.length === 0) {\n    errors.push('El flujo debe tener al menos un nodo de inicio');\n  }\n\n  if (startNodes.length > 1) {\n    warnings.push(\n      `El flujo tiene ${startNodes.length} nodos de inicio, lo que puede causar ` +\n        'comportamientos inesperados',\n    );\n  }\n\n  if (endNodes.length === 0) {\n    errors.push('El flujo debe tener al menos un nodo de fin');\n  }\n\n  // 2. Validar que todos los nodos estn conectados\n  const connectedNodes = new Set();\n\n  for (const edge of edges) {\n    connectedNodes.add(edge.source);\n    connectedNodes.add(edge.target);\n  }\n\n  const disconnectedNodes = nodes.filter(\n    (node) =>\n      !connectedNodes.has(node.id) &&\n      node.type !== 'start' &&\n      node.type !== 'end',\n  );\n\n  if (disconnectedNodes.length > 0) {\n    warnings.push(\n      `Hay ${disconnectedNodes.length} nodos desconectados en el flujo`,\n    );\n  }\n\n  // 3. Validar nodos sin salidas (excepto nodos de fin)\n  const nodesWithOutgoingEdges = new Set();\n\n  for (const edge of edges) {\n    nodesWithOutgoingEdges.add(edge.source);\n  }\n\n  const nodesWithoutOutgoingEdges = nodes.filter(\n    (node) => node.type !== 'end' && !nodesWithOutgoingEdges.has(node.id),\n  );\n\n  if (nodesWithoutOutgoingEdges.length > 0) {\n    warnings.push(\n      `Hay ${nodesWithoutOutgoingEdges.length} nodos sin conexiones de salida ` +\n        '(excepto nodos de fin)',\n    );\n  }\n\n  // 4. Validar nodos de decisiu00f3n con suficientes salidas\n  const decisionNodes = nodes.filter((node) => node.type === 'decision');\n\n  for (const node of decisionNodes) {\n    const outgoingEdges = edges.filter((edge) => edge.source === node.id);\n    if (outgoingEdges.length < 2) {\n      warnings.push(\n        `El nodo de decisión \"${node.data?.label || node.id}\" ` +\n          'tiene menos de 2 salidas',\n      );\n    }\n  }\n\n  // Determinar validez general\n  const isValid = errors.length === 0;\n\n  return {\n    valid: isValid,\n    errors,\n    warnings,\n    stats: {\n      totalNodes: nodes.length,\n      totalEdges: edges.length,\n      disconnectedNodes: disconnectedNodes.length,\n      nodesWithoutOutgoingEdges: nodesWithoutOutgoingEdges.length,\n    },\n  };\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/flow-utilities.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 90,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 90,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 137,
        "column": 18,
        "nodeType": "MemberExpression",
        "endLine": 137,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/flow-validation.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (113). Maximum allowed is 80.",
        "line": 495,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 625,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
        "line": 495,
        "column": 40,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 625,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 8,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 8,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NODE_TYPES, NODE_DEFAULT_SIZES } from './node-config.js';\n\nexport const getNodeSize = (nodeType) => {\n  if (Object.prototype.hasOwnProperty.call(NODE_DEFAULT_SIZES, nodeType)) {\n    // El uso de hasOwnProperty previene la inyección de objetos, por lo que esta\n    // advertencia de seguridad es un falso positivo en este contexto.\n    // eslint-disable-next-line security/detect-object-injection\n    return NODE_DEFAULT_SIZES[nodeType];\n  }\n  return { width: 120, height: 50 };\n};\n\nconst explorePathRecursive = (\n  nodeId,\n  { nodes, edges, currentPath, visitedNodes, routes, cycles, analysis },\n) => {\n  if (visitedNodes.has(nodeId)) {\n    const cycleStartIndex = currentPath.indexOf(nodeId);\n    const cycle = [...currentPath.slice(cycleStartIndex), nodeId];\n    cycles.push(cycle);\n    routes.push([...currentPath, `${nodeId} (ciclo)`]);\n    return;\n  }\n\n  currentPath.push(nodeId);\n  visitedNodes.add(nodeId);\n\n  const currentNode = nodes.find((node) => node.id === nodeId);\n  const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\n\n  if (outgoingEdges.length === 0) {\n    routes.push([...currentPath]);\n    if (currentNode.type === NODE_TYPES.end) {\n      analysis.completeRoutes++;\n    } else {\n      analysis.incompleteRoutes++;\n    }\n  } else {\n    for (const edge of outgoingEdges) {\n      explorePathRecursive(edge.target, {\n        nodes,\n        edges,\n        currentPath: [...currentPath],\n        visitedNodes: new Set(visitedNodes),\n        routes,\n        cycles,\n        analysis,\n      });\n    }\n  }\n};\n\n/**\n * Valida un nodo según su tipo específico\n * @param {Object} node - El nodo a validar\n * @param {Array} errors - Lista de errores\n * @param {Array} warnings - Lista de advertencias\n * @param {string} severity - Severidad actual\n * @returns {string} - La severidad actualizada\n */\nconst validateStartNode = (node, warnings) => {\n  if (!node.data.label) {\n    warnings.push('Nodo de inicio sin etiqueta descriptiva');\n    return 'warning';\n  }\n  return 'none';\n};\n\nconst validateEndNode = (node, warnings) => {\n  if (!node.data.label) {\n    warnings.push('Nodo final sin etiqueta descriptiva');\n    return 'warning';\n  }\n  return 'none';\n};\n\nconst validateMessageNode = (node, errors, warnings) => {\n  if (\n    !node.data.message ||\n    typeof node.data.message !== 'string' ||\n    node.data.message.trim() === ''\n  ) {\n    errors.push('Mensaje vacío o inválido en nodo de mensaje');\n    return 'error';\n  }\n  if (node.data.message.length > 500) {\n    warnings.push('Mensaje excede el límite de 500 caracteres');\n    return 'warning';\n  }\n  return 'none';\n};\n\nconst validateDecisionNode = (node, errors) => {\n  if (\n    !node.data.conditions ||\n    !Array.isArray(node.data.conditions) ||\n    node.data.conditions.length === 0\n  ) {\n    errors.push('Nodo de decisión sin condiciones definidas');\n    return 'error';\n  }\n  for (const condition of node.data.conditions) {\n    if (\n      !condition.expression ||\n      typeof condition.expression !== 'string' ||\n      condition.expression.trim() === ''\n    ) {\n      errors.push('Condición con expresión inválida o vacía');\n      return 'error';\n    }\n    if (!condition.targetNode || typeof condition.targetNode !== 'string') {\n      errors.push('Condición sin nodo de destino válido');\n      return 'error';\n    }\n  }\n  return 'none';\n};\n\nconst validateActionNode = (node, errors) => {\n  if (!node.data.actionType || typeof node.data.actionType !== 'string') {\n    errors.push('Tipo de acción no definido en nodo de acción');\n    return 'error';\n  }\n  if (!node.data.params || typeof node.data.params !== 'object') {\n    errors.push('Parámetros no definidos en nodo de acción');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateApiNode = (node, errors) => {\n  if (\n    !node.data.url ||\n    typeof node.data.url !== 'string' ||\n    !node.data.url.startsWith('https://')\n  ) {\n    errors.push('URL de API inválida o insegura (debe ser HTTPS)');\n    return 'error';\n  }\n  if (\n    !node.data.method ||\n    !['GET', 'POST', 'PUT', 'DELETE'].includes(node.data.method)\n  ) {\n    errors.push('Método HTTP no válido en nodo de API');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateInputNode = (node, errors) => {\n  if (!node.data.inputType || typeof node.data.inputType !== 'string') {\n    errors.push('Tipo de entrada no definido en nodo de entrada');\n    return 'error';\n  }\n  if (\n    !node.data.variableName ||\n    typeof node.data.variableName !== 'string' ||\n    node.data.variableName.trim() === ''\n  ) {\n    errors.push('Nombre de variable no definido en nodo de entrada');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateFileNode = (node, errors) => {\n  if (!node.data.filePath || typeof node.data.filePath !== 'string') {\n    errors.push('Ruta de archivo no definida en nodo de archivo');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateFunctionNode = (node, errors) => {\n  if (!node.data.functionName || typeof node.data.functionName !== 'string') {\n    errors.push('Nombre de función no definido en nodo de función');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateIntegrationNode = (node, errors) => {\n  if (!node.data.service || typeof node.data.service !== 'string') {\n    errors.push('Servicio no definido en nodo de integración');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateNoteNode = (node, warnings) => {\n  if (\n    !node.data.text ||\n    typeof node.data.text !== 'string' ||\n    node.data.text.trim() === ''\n  ) {\n    warnings.push('Nota vacía');\n    return 'warning';\n  }\n  return 'none';\n};\n\nconst validateSubflowNode = (node, errors) => {\n  if (!node.data.subflowId || typeof node.data.subflowId !== 'string') {\n    errors.push('ID de subflujo no definido');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateDelayNode = (node, errors) => {\n  if (typeof node.data.delay !== 'number' || node.data.delay <= 0) {\n    errors.push('Tiempo de espera inválido en nodo de retraso');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst validateSwitchNode = (node, errors) => {\n  if (!node.data.variable || typeof node.data.variable !== 'string') {\n    errors.push('Variable no definida en nodo switch');\n    return 'error';\n  }\n  if (\n    !node.data.cases ||\n    !Array.isArray(node.data.cases) ||\n    node.data.cases.length === 0\n  ) {\n    errors.push('Casos no definidos en nodo switch');\n    return 'error';\n  }\n  return 'none';\n};\n\nconst nodeValidators = {\n  [NODE_TYPES.start]: (node, errors, warnings) =>\n    validateStartNode(node, warnings),\n  [NODE_TYPES.end]: (node, errors, warnings) => validateEndNode(node, warnings),\n  [NODE_TYPES.message]: (node, errors, warnings) =>\n    validateMessageNode(node, errors, warnings),\n  [NODE_TYPES.decision]: (node, errors) => validateDecisionNode(node, errors),\n  [NODE_TYPES.action]: (node, errors) => validateActionNode(node, errors),\n  [NODE_TYPES.api]: (node, errors) => validateApiNode(node, errors),\n  [NODE_TYPES.input]: (node, errors) => validateInputNode(node, errors),\n  [NODE_TYPES.file]: (node, errors) => validateFileNode(node, errors),\n  [NODE_TYPES.function]: (node, errors) => validateFunctionNode(node, errors),\n  [NODE_TYPES.integration]: (node, errors) =>\n    validateIntegrationNode(node, errors),\n  [NODE_TYPES.note]: (node, errors, warnings) =>\n    validateNoteNode(node, warnings),\n  [NODE_TYPES.subflow]: (node, errors) => validateSubflowNode(node, errors),\n  [NODE_TYPES.delay]: (node, errors) => validateDelayNode(node, errors),\n  [NODE_TYPES.switch]: (node, errors) => validateSwitchNode(node, errors),\n};\n\nconst validateNodeByType = ({ node, errors, warnings, severity }) => {\n  const validator = nodeValidators[node.type];\n  let updatedSeverity = severity;\n\n  if (validator) {\n    const validationResult = validator(node, errors, warnings);\n    if (validationResult === 'error') {\n      updatedSeverity = 'error';\n    } else if (validationResult === 'warning' && updatedSeverity !== 'error') {\n      updatedSeverity = 'warning';\n    }\n  } else {\n    warnings.push(\n      `Tipo de nodo '${node.type}' no reconocido, validación omitida.`,\n    );\n    if (updatedSeverity !== 'error') {\n      updatedSeverity = 'warning';\n    }\n  }\n\n  return updatedSeverity;\n};\n\n/**\n * Valida un nodo con verificaciones mejoradas y reparación automática\n * @param {Object} node - El nodo a validar\n * @returns {Object} - Resultado de validación con información detallada\n */\nconst validateNodeStructure = (node, errors) => {\n  let hasError = false;\n  if (!node.id || typeof node.id !== 'string') {\n    errors.push('ID de nodo inválido o faltante');\n    hasError = true;\n  }\n  if (!node.type || typeof node.type !== 'string') {\n    errors.push('Tipo de nodo inválido o faltante');\n    hasError = true;\n  } else if (!Object.values(NODE_TYPES).includes(node.type)) {\n    errors.push(`Tipo de nodo desconocido: ${node.type}`);\n    hasError = true;\n  }\n  if (!node.data || typeof node.data !== 'object') {\n    errors.push('Datos de nodo inválidos o faltantes');\n    node.data = { label: 'Nodo sin etiqueta' }; // Fix\n    hasError = true;\n  }\n  return hasError ? 'error' : 'none';\n};\n\nconst validateNodePosition = (node, errors) => {\n  let hasError = false;\n  if (!node.position || typeof node.position !== 'object') {\n    errors.push('Posición de nodo inválida o faltante');\n    node.position = { x: 0, y: 0 }; // Fix\n    return 'error';\n  }\n  if (typeof node.position.x !== 'number' || Number.isNaN(node.position.x)) {\n    errors.push('Posición X inválida');\n    node.position.x = 0; // Fix\n    hasError = true;\n  }\n  if (typeof node.position.y !== 'number' || Number.isNaN(node.position.y)) {\n    errors.push('Posición Y inválida');\n    node.position.y = 0; // Fix\n    hasError = true;\n  }\n  return hasError ? 'error' : 'none';\n};\n\nconst validateNodeConnections = (node, errors, warnings) => {\n  if (node.type === NODE_TYPES.decision) {\n    if (!node.data.outputs || node.data.outputs.length === 0) {\n      errors.push('Nodo de decisión sin conexiones de salida definidas');\n      return 'error';\n    }\n    const uniqueOutputs = new Set(node.data.outputs.map((out) => out.id));\n    if (uniqueOutputs.size !== node.data.outputs.length) {\n      warnings.push('Conexiones de salida duplicadas en nodo de decisión');\n      return 'warning';\n    }\n  }\n  return 'none';\n};\n\nconst validateNodeAppearance = (node, warnings) => {\n  let hasWarning = false;\n  if (node.width && typeof node.width !== 'number') {\n    warnings.push('Ancho de nodo inválido');\n    delete node.width; // Fix\n    hasWarning = true;\n  }\n  if (node.height && typeof node.height !== 'number') {\n    warnings.push('Alto de nodo inválido');\n    delete node.height; // Fix\n    hasWarning = true;\n  }\n  return hasWarning ? 'warning' : 'none';\n};\n\nconst validateNodeState = (node, warnings) => {\n  let hasWarning = false;\n  if (node.selected !== undefined && typeof node.selected !== 'boolean') {\n    warnings.push('Estado de selección inválido');\n    delete node.selected; // Fix\n    hasWarning = true;\n  }\n  if (node.dragging !== undefined && typeof node.dragging !== 'boolean') {\n    warnings.push('Estado de arrastre inválido');\n    delete node.dragging; // Fix\n    hasWarning = true;\n  }\n  return hasWarning ? 'warning' : 'none';\n};\n\nexport const validateNode = (node) => {\n  if (!node || typeof node !== 'object') {\n    return {\n      valid: false,\n      errors: ['Nodo no es un objeto válido'],\n      warnings: [],\n      severity: 'error',\n      fixable: false,\n    };\n  }\n\n  const errors = [];\n  const warnings = [];\n  let severity = 'none';\n\n  const updateSeverity = (newSeverity) => {\n    if (newSeverity === 'error') {\n      severity = 'error';\n    } else if (newSeverity === 'warning' && severity !== 'error') {\n      severity = 'warning';\n    }\n  };\n\n  updateSeverity(validateNodeStructure(node, errors));\n  updateSeverity(validateNodePosition(node, errors));\n  updateSeverity(validateNodeByType({ node, errors, warnings, severity }));\n  updateSeverity(validateNodeConnections(node, errors, warnings));\n  updateSeverity(validateNodeAppearance(node, warnings));\n  updateSeverity(validateNodeState(node, warnings));\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n    severity,\n    fixable: errors.some(\n      (error) => error.includes('inválido') || error.includes('faltante'),\n    ),\n  };\n};\n\n/**\n * Analiza las rutas del flujo para detectar problemas y optimizaciones\n * @param {Array} nodes - Lista de nodos\n * @param {Array} edges - Lista de aristas\n * @returns {Object} - Análisis detallado del flujo\n */\nexport const analyzeFlowRoutes = (nodes, edges) => {\n  const startNodes = nodes.filter((node) => node.type === NODE_TYPES.start);\n  const analysis = {\n    totalRoutes: 0,\n    completeRoutes: 0,\n    incompleteRoutes: 0,\n    longestRoute: { length: 0, path: [] },\n    orphanedNodes: [],\n    deadEndNodes: [],\n    pathsByStartNode: {},\n    cycles: [],\n    complexity: 0,\n  };\n\n  // Identificar nodos huérfanos y callejones sin salida\n  analysis.orphanedNodes = nodes\n    .filter(\n      (node) =>\n        !edges.some((edge) => edge.target === node.id) &&\n        node.type !== NODE_TYPES.start,\n    )\n    .map((node) => node.id);\n\n  analysis.deadEndNodes = nodes\n    .filter(\n      (node) =>\n        !edges.some((edge) => edge.source === node.id) &&\n        node.type !== NODE_TYPES.end,\n    )\n    .map((node) => node.id);\n\n  // Calcular complejidad del flujo\n  analysis.complexity = edges.length / (nodes.length || 1);\n\n  // Analizar rutas desde cada nodo de inicio\n  for (const startNode of startNodes) {\n    const routes = [];\n    const cycles = [];\n\n    explorePathRecursive(startNode.id, {\n      nodes,\n      edges,\n      currentPath: [],\n      visitedNodes: new Set(),\n      routes,\n      cycles,\n      analysis,\n    });\n\n    // Guardar rutas y ciclos\n    analysis.pathsByStartNode[startNode.id] = routes;\n    analysis.cycles = [...analysis.cycles, ...cycles];\n    analysis.totalRoutes += routes.length;\n\n    // Actualizar ruta más larga\n    let longestRoute = [];\n    for (const route of routes) {\n      if (route.length > longestRoute.length) {\n        longestRoute = route;\n      }\n    }\n\n    if (longestRoute.length > analysis.longestRoute.length) {\n      analysis.longestRoute = {\n        length: longestRoute.length,\n        path: longestRoute,\n      };\n    }\n  }\n\n  return analysis;\n};\n\n/**\n * Genera sugerencias inteligentes para mejorar el flujo\n * @param {Array} nodes - Lista de nodos\n * @param {Array} edges - Lista de aristas\n * @returns {Array} - Lista de sugerencias con acciones\n */\nexport const generateNodeSuggestions = (nodes, edges) => {\n  const suggestions = [];\n\n  // Verificar nodos esenciales\n  if (!nodes.some((node) => node.type === NODE_TYPES.start)) {\n    suggestions.push({\n      description: 'Falta nodo de inicio en el flujo',\n      action: {\n        type: 'ADD_NODE',\n        payload: {\n          type: NODE_TYPES.start,\n          position: { x: 100, y: 100 },\n          data: { label: 'Inicio' },\n        },\n      },\n      severity: 'error',\n    });\n  }\n\n  if (!nodes.some((node) => node.type === NODE_TYPES.end)) {\n    suggestions.push({\n      description: 'Falta nodo de finalización en el flujo',\n      action: {\n        type: 'ADD_NODE',\n        payload: {\n          type: NODE_TYPES.end,\n          position: { x: 500, y: 500 },\n          data: { label: 'Fin' },\n        },\n      },\n      severity: 'error',\n    });\n  }\n\n  // Verificar nodos huérfanos\n  const orphanedNodes = nodes.filter(\n    (node) =>\n      node.type !== NODE_TYPES.start &&\n      !edges.some((edge) => edge.target === node.id),\n  );\n\n  if (orphanedNodes.length > 0) {\n    suggestions.push({\n      description: `${orphanedNodes.length} nodo(s) sin conexiones de entrada`,\n      action: {\n        type: 'HIGHLIGHT_NODES',\n        payload: { nodeIds: orphanedNodes.map((n) => n.id) },\n      },\n      severity: 'warning',\n    });\n  }\n\n  // Verificar nodos sin salidas\n  const deadEndNodes = nodes.filter(\n    (node) =>\n      node.type !== NODE_TYPES.end &&\n      !edges.some((edge) => edge.source === node.id),\n  );\n\n  if (deadEndNodes.length > 0) {\n    suggestions.push({\n      description: `${deadEndNodes.length} nodo(s) sin conexiones de salida`,\n      action: {\n        type: 'HIGHLIGHT_NODES',\n        payload: { nodeIds: deadEndNodes.map((n) => n.id) },\n      },\n      severity: 'warning',\n    });\n  }\n\n  // Verificar decisiones sin opciones suficientes\n  const decisionNodes = nodes.filter(\n    (node) => node.type === NODE_TYPES.decision,\n  );\n  for (const node of decisionNodes) {\n    const outgoingEdges = edges.filter((edge) => edge.source === node.id);\n    if (outgoingEdges.length < 2) {\n      suggestions.push({\n        description: `Nodo de decisión \"${node.data.label || node.id}\" con menos de 2 salidas`,\n        action: {\n          type: 'HIGHLIGHT_NODE',\n          payload: { nodeId: node.id },\n        },\n        severity: 'warning',\n      });\n    }\n  }\n\n  // Verificar rutas incompletas\n  const startNodes = nodes.filter((node) => node.type === NODE_TYPES.start);\n  const endNodes = nodes.filter((node) => node.type === NODE_TYPES.end);\n\n  if (startNodes.length > 0 && endNodes.length > 0) {\n    const analysis = analyzeFlowRoutes(nodes, edges);\n\n    if (analysis.incompleteRoutes > 0) {\n      suggestions.push({\n        description: `Hay ${analysis.incompleteRoutes} ruta(s) que no terminan en un nodo final`,\n        action: {\n          type: 'ANALYZE_FLOW',\n          payload: { detailed: true },\n        },\n        severity: 'warning',\n      });\n    }\n\n    if (analysis.orphanedNodes.length > 0) {\n      suggestions.push({\n        description: `Hay ${analysis.orphanedNodes.length} nodo(s) sin conexiones de entrada`,\n        action: {\n          type: 'HIGHLIGHT_NODES',\n          payload: { nodeIds: analysis.orphanedNodes },\n        },\n        severity: 'warning',\n      });\n    }\n\n    if (analysis.deadEndNodes.length > 0) {\n      suggestions.push({\n        description: `Hay ${analysis.deadEndNodes.length} nodo(s) sin conexiones de salida`,\n        action: {\n          type: 'HIGHLIGHT_NODES',\n          payload: { nodeIds: analysis.deadEndNodes },\n        },\n        severity: 'warning',\n      });\n    }\n  }\n\n  return suggestions;\n};\n\n/**\n * Valida las conexiones del flujo completo\n * @param {Array} nodes - Lista de nodos\n * @param {Array} edges - Lista de aristas\n * @returns {Object} - Resultado detallado de la validación\n */\nexport const validateConnections = (nodes, edges) => {\n  const issues = [];\n  const warnings = [];\n\n  // Verificar nodos esenciales\n  if (!nodes.some((n) => n.type === NODE_TYPES.start)) {\n    issues.push('No hay nodos de inicio en el flujo');\n  }\n\n  if (!nodes.some((n) => n.type === NODE_TYPES.end)) {\n    issues.push('No hay nodos de finalización en el flujo');\n  }\n\n  // Verificar conexiones\n  const startNodes = nodes.filter((node) => node.type === NODE_TYPES.start);\n  const endNodes = nodes.filter((node) => node.type === NODE_TYPES.end);\n\n  if (startNodes.length > 0 && endNodes.length > 0) {\n    const analysis = analyzeFlowRoutes(nodes, edges);\n\n    if (analysis.incompleteRoutes > 0) {\n      warnings.push(\n        `Hay ${analysis.incompleteRoutes} ruta(s) que no terminan en un nodo final`,\n      );\n    }\n\n    if (analysis.orphanedNodes.length > 0) {\n      warnings.push(\n        `Hay ${analysis.orphanedNodes.length} nodo(s) sin conexiones de entrada`,\n      );\n    }\n\n    if (analysis.deadEndNodes.length > 0) {\n      warnings.push(\n        `Hay ${analysis.deadEndNodes.length} nodo(s) sin conexiones de salida`,\n      );\n    }\n  }\n\n  let severity = 'none';\n  if (issues.length > 0) {\n    severity = 'error';\n  } else if (warnings.length > 0) {\n    severity = 'warning';\n  }\n\n  return {\n    valid: issues.length === 0,\n    issues,\n    warnings,\n    severity,\n  };\n};\n\n/**\n * Optimiza la distribución de nodos para mejorar la legibilidad\n * @param {Array} nodes - Lista de nodos\n * @param {Array} edges - Lista de aristas\n * @returns {Array} - Lista de nodos con posiciones optimizadas\n */\nexport const optimizeNodeLayout = (nodes, edges) => {\n  // Implementación básica de organización por niveles\n  const startNodes = nodes.filter((node) => node.type === NODE_TYPES.start);\n  const nodeMap = new Map(\n    nodes.map((node) => [node.id, { ...node, level: -1, column: -1 }]),\n  );\n  const levels = new Map(); // Usar Map para evitar problemas de seguridad y mejorar la semántica.\n\n  // Asignar niveles a los nodos\n  const assignLevels = (nodeId, level = 0) => {\n    // Guarda de seguridad para prevenir prototype pollution y asegurar la integridad del índice.\n    if (typeof level !== 'number' || !Number.isInteger(level) || level < 0) {\n      return;\n    }\n\n    const node = nodeMap.get(nodeId);\n\n    // Si el nodo ya tiene un nivel asignado y es menor o igual al actual, no hacer nada\n    if (node.level !== -1 && node.level <= level) {\n      return;\n    }\n\n    // Asignar nivel\n    node.level = level;\n\n    // Asegurarse de que el nivel existe en el Map\n    if (!levels.has(level)) {\n      levels.set(level, []);\n    }\n\n    // Añadir nodo al nivel si no está ya\n    const levelNodes = levels.get(level);\n    if (!levelNodes.includes(nodeId)) {\n      levelNodes.push(nodeId);\n    }\n\n    // Procesar nodos conectados\n    const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\n    for (const edge of outgoingEdges) {\n      assignLevels(edge.target, level + 1);\n    }\n  };\n\n  // Comenzar asignación desde nodos de inicio\n  for (const node of startNodes) {\n    assignLevels(node.id);\n  }\n\n  // Asignar columnas dentro de cada nivel\n  for (const levelNodes of levels.values()) {\n    for (const [columnIndex, nodeId] of levelNodes.entries()) {\n      nodeMap.get(nodeId).column = columnIndex;\n    }\n  }\n\n  // Calcular nuevas posiciones\n  const HORIZONTAL_SPACING = 250;\n  const VERTICAL_SPACING = 150;\n\n  const optimizedNodes = [...nodeMap.values()].map((node) => {\n    // Solo actualizar posiciones de nodos con nivel asignado\n    if (node.level !== -1) {\n      return {\n        ...node,\n        position: {\n          x: node.level * HORIZONTAL_SPACING + 100,\n          y: node.column * VERTICAL_SPACING + 100,\n        },\n      };\n    }\n    return node;\n  });\n\n  return optimizedNodes;\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/message-utilities.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 2,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 27,
        "column": 21,
        "nodeType": "NewExpression",
        "endLine": 27,
        "endColumn": 74,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-config.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
        "line": 350,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 379,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// nodeConfig.js\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { powers } from '../data/powers';\n\nexport const NODE_TYPES = {\n  start: 'start',\n  end: 'end',\n  message: 'message',\n  decision: 'decision',\n  action: 'action',\n  option: 'option',\n  HTTP_REQUEST_NODE: 'httpRequestNode',\n  WEBHOOK_NODE: 'webhookNode',\n  DATABASE_NODE: 'databaseNode',\n  AI_NODE: 'aiNode',\n  AI_NODE_PRO: 'aiNodePro',\n  NLP_NODE: 'nlpNode',\n  COMPLEX_CONDITION_NODE: 'complexConditionNode',\n  POWER_NODE: 'powerNode',\n  ULTRA_OPTIMIZED_NODE: 'ultraOptimizedNode', // Nodo optimizado para el modo Ultra Rendimiento\n  ADVANCED_AI_NODE: 'ai', // Nuevo nodo IA Avanzada\n};\n\nexport const EDGE_TYPES = {\n  default: 'default',\n  success: 'success',\n  warning: 'warning',\n  danger: 'danger',\n  ULTRA_OPTIMIZED_EDGE: 'ultraOptimizedEdge', // Borde optimizado para el modo Ultra Rendimiento\n};\n\nexport const ACTION_TYPES = [\n  { value: 'sendEmail', label: 'Enviar Correo', icon: '📧' },\n  { value: 'saveData', label: 'Guardar Datos', icon: '💾' },\n  { value: 'sendNotification', label: 'Enviar Notificación', icon: '🔔' },\n  { value: 'apiCall', label: 'Llamada API', icon: '🌐' },\n  { value: 'transformData', label: 'Transformar Datos', icon: '🔄' },\n  { value: 'conditional', label: 'Condicional', icon: '⚙️' },\n  { value: 'delay', label: 'Retraso', icon: '⏱️' },\n  { value: 'webhook', label: 'Webhook', icon: '🔗' },\n];\n\nexport const CONDITION_TYPES = [\n  'Contiene',\n  'Igual a',\n  'Mayor que',\n  'Menor que',\n  'Es nulo',\n  'No contiene',\n];\n\nexport const NODE_DEFAULT_SIZES = {\n  start: { width: 80, height: 40 },\n  end: { width: 120, height: 80 },\n  message: { width: 180, height: 80 },\n  decision: { width: 180, height: 110 },\n  action: { width: 240, height: 140 },\n  option: { width: 150, height: 80 },\n  httpRequestNode: { width: 240, height: 140 },\n  webhookNode: { width: 240, height: 140 },\n  databaseNode: { width: 240, height: 140 },\n  aiNode: { width: 240, height: 140 },\n  nlpNode: { width: 240, height: 140 },\n  complexConditionNode: { width: 240, height: 140 },\n  powerNode: { width: 240, height: 160 },\n};\n\nexport const EDGE_COLORS = {\n  default: '#ff00ff', // Magenta neón intenso para las aristas\n  success: '#28a745',\n  warning: '#ffc107',\n  danger: '#dc3545',\n  info: '#17a2b8',\n  // Colores optimizados para modo ultra rendimiento\n  ultra: {\n    default: '#8a2be2', // Versión más suave del magenta para rendimiento\n    success: '#00cc7a',\n    warning: '#cc9400',\n    danger: '#cc2449',\n  },\n};\n\nexport const NODE_LABELS = {\n  start: 'Inicio',\n  end: 'Fin',\n  message: 'Mensaje',\n  decision: 'Decisión',\n  action: 'Acción',\n  option: 'Opción',\n  HTTP_REQUEST_NODE: 'Solicitud HTTP',\n  WEBHOOK_NODE: 'Webhook',\n  DATABASE_NODE: 'Base de Datos',\n  AI_NODE: 'Inteligencia Artificial',\n  NLP_NODE: 'Procesamiento NLP',\n  COMPLEX_CONDITION_NODE: 'Condición Compleja',\n  POWER_NODE: 'Poder',\n  ADVANCED_AI_NODE: 'IA Avanzada',\n  AI_NODE_PRO: 'IA Pro',\n};\n\nexport const NODE_DESCRIPTIONS = {\n  start: 'Punto de inicio del flujo.',\n  end: 'Punto de fin del flujo.',\n  message: 'Envía un mensaje al usuario.',\n  decision: 'Evalúa una condición y bifurca el flujo.',\n  action: 'Realiza una acción.',\n  option: 'Opción de decisión.',\n  HTTP_REQUEST_NODE: 'Realiza una solicitud HTTP a un servicio externo.',\n  WEBHOOK_NODE: 'Recibe eventos externos a través de un endpoint.',\n  DATABASE_NODE:\n    'Interactúa con una base de datos para guardar o recuperar información.',\n  AI_NODE:\n    'Ejecuta un prompt de IA para generar texto, tomar decisiones o analizar datos.',\n  AI_NODE_PRO:\n    'Un nodo de IA avanzado con controles de creatividad y tamaño de respuesta.',\n  NLP_NODE:\n    'Procesa lenguaje natural para extraer significado, entidades o intenciones.',\n  COMPLEX_CONDITION_NODE:\n    'Evalúa múltiples condiciones con operaciones lógicas AND/OR/NOT.',\n  POWER_NODE: 'Integra tu Plubot con aplicaciones y servicios externos.',\n  ADVANCED_AI_NODE:\n    'Nodo IA configurable con prompts dinámicos, múltiples modelos y parámetros.',\n};\n\n// Obtener categorías únicas de los poderes\nexport const POWER_CATEGORIES = [\n  ...new Set(powers.map((power) => power.category)),\n].map((category) => ({\n  id: category,\n  name: category.charAt(0).toUpperCase() + category.slice(1),\n}));\n\n// Categorías para la paleta de nodos organizada\nexport const NODE_CATEGORIES = [\n  {\n    id: 'basic',\n    name: 'Básicos',\n    description: 'Nodos fundamentales para cualquier flujo de conversación',\n    nodes: [\n      { type: NODE_TYPES.start, label: NODE_LABELS.start, icon: 'fas fa-play' },\n      {\n        type: NODE_TYPES.message,\n        label: NODE_LABELS.message,\n        icon: 'fas fa-comment-alt',\n      },\n      {\n        type: NODE_TYPES.decision,\n        label: NODE_LABELS.decision,\n        icon: 'fas fa-code-branch',\n      },\n      { type: NODE_TYPES.end, label: NODE_LABELS.end, icon: 'fas fa-stop' },\n    ],\n  },\n  {\n    id: 'advanced',\n    name: 'Avanzados',\n    description: 'Nodos para funcionalidades más sofisticadas',\n    nodes: [\n      {\n        type: NODE_TYPES.action,\n        label: NODE_LABELS.action,\n        icon: 'fas fa-bolt',\n      },\n      {\n        type: NODE_TYPES.option,\n        label: NODE_LABELS.option,\n        icon: 'fas fa-list-ul',\n      },\n      {\n        type: NODE_TYPES.COMPLEX_CONDITION_NODE,\n        label: NODE_LABELS.COMPLEX_CONDITION_NODE,\n        icon: 'fas fa-filter',\n      },\n    ],\n  },\n  {\n    id: 'integrations',\n    name: 'Integraciones',\n    description: 'Nodos para conectar con servicios y sistemas externos',\n    nodes: [\n      {\n        type: NODE_TYPES.HTTP_REQUEST_NODE,\n        label: NODE_LABELS.HTTP_REQUEST_NODE,\n        icon: 'fas fa-globe',\n      },\n      {\n        type: NODE_TYPES.WEBHOOK_NODE,\n        label: NODE_LABELS.WEBHOOK_NODE,\n        icon: 'fas fa-link',\n      },\n      {\n        type: NODE_TYPES.DATABASE_NODE,\n        label: NODE_LABELS.DATABASE_NODE,\n        icon: 'fas fa-database',\n      },\n      {\n        type: NODE_TYPES.POWER_NODE,\n        label: NODE_LABELS.POWER_NODE,\n        icon: 'fas fa-plug',\n      },\n    ],\n  },\n  {\n    id: 'ai',\n    name: 'Inteligencia Artificial',\n    description: 'Nodos para integrar capacidades de IA en tu flujo.',\n    icon: 'fas fa-robot',\n    nodes: [\n      {\n        type: NODE_TYPES.AI_NODE_PRO,\n        label: NODE_LABELS.AI_NODE_PRO,\n        icon: 'fas fa-star',\n        description: NODE_DESCRIPTIONS.AI_NODE_PRO,\n      },\n      {\n        type: 'emotionDetection',\n        label: 'Detección de Emoción',\n        icon: 'fas fa-smile-beam',\n        description: 'Detecta la emoción predominante en un texto.',\n      },\n    ],\n  },\n]; // End of NODE_CATEGORIES.\n\n// --- Creadores de datos de nodos ---\n\nconst createHttpRequestNodeData = (baseData) => ({\n  ...baseData,\n  method: 'GET',\n  url: '',\n  headers: [{ id: uuidv4(), key: '', value: '' }],\n  bodyType: 'none', // 'none', 'json', 'text', 'form-data'\n  body: '', // Para json & text\n  formData: [{ id: uuidv4(), key: '', value: '' }], // Para form-data\n  responseMapping: [\n    {\n      id: uuidv4(),\n      source: 'body_json_path',\n      path: '',\n      variableName: '',\n    },\n  ],\n  status: { state: 'idle', message: '' }, // 'idle', 'testing', 'success', 'error'\n  testResult: undefined,\n  cacheResponse: false,\n  retryConfig: { enabled: false, maxRetries: 3, delayMs: 1000 },\n});\n\nconst createWebhookNodeData = (baseData) => ({\n  ...baseData,\n  endpoint: `/webhook/${uuidv4().slice(0, 8)}`,\n  method: 'POST',\n  authToken: uuidv4(),\n  responseMode: 'async', // 'async' o 'sync'\n  timeout: 30_000, // ms\n  responseMapping: [\n    {\n      id: uuidv4(),\n      source: 'body_json_path',\n      path: '',\n      variableName: '',\n    },\n  ],\n  status: { state: 'idle', message: '' },\n});\n\nconst createAdvancedAINodeData = (baseData) => ({\n  ...baseData, // Includes label: NODE_LABELS.ADVANCED_AI_NODE\n  type: NODE_TYPES.ADVANCED_AI_NODE,\n  promptTemplate:\n    'Escribe tu prompt aquí. Usa {{variable}} para variables dinámicas.',\n  temperature: 0.7,\n  model: 'gpt-4',\n  maxTokens: 512,\n  systemMessage: 'Eres un asistente de IA útil y creativo.',\n  responseVariable: 'respuestaDelAI',\n  streaming: false,\n  isLoading: false,\n  error: undefined,\n  lastResponse: undefined,\n  interpolatedPromptPreview: '',\n  ultraMode: false,\n});\n\nconst createAINodeProData = (baseData) => ({\n  ...baseData,\n  label: NODE_LABELS.AI_NODE_PRO,\n  type: NODE_TYPES.AI_NODE_PRO,\n  prompt: 'Escribe un prompt para el modelo Pro.',\n  temperature: 0.7,\n  maxTokens: 256,\n  isCollapsed: false,\n  isLoading: false,\n  error: undefined,\n  lastResponse: undefined,\n  lastPrompt: '',\n  ultraMode: false,\n});\n\nconst createDatabaseNodeData = (baseData) => ({\n  ...baseData,\n  operation: 'query', // 'query', 'insert', 'update', 'delete'\n  dataSource: 'internal', // 'internal', 'external'\n  connectionString: '',\n  table: '',\n  fields: [{ id: uuidv4(), name: '', value: '', type: 'string' }],\n  query: '',\n  resultMapping: [{ id: uuidv4(), field: '', variableName: '' }],\n  status: { state: 'idle', message: '' },\n});\n\nconst createAINodeData = (baseData) => ({\n  ...baseData,\n  aiType: 'text_generation', // 'text_generation', 'image_generation', 'classification'\n  prompt: '',\n  model: 'general', // 'general', 'customer_support', 'sales', 'technical'\n  maxTokens: 150,\n  temperature: 0.7,\n  resultVariable: 'aiResponse',\n  status: { state: 'idle', message: '' },\n});\n\nconst createNLPNodeData = (baseData) => ({\n  ...baseData,\n  nlpTask: 'sentiment_analysis', // 'sentiment_analysis', 'entity_extraction', 'intent_detection'\n  inputVariable: 'userInput',\n  confidence: 0.7,\n  language: 'es',\n  resultMapping: [{ id: uuidv4(), entity: '', variableName: '' }],\n  status: { state: 'idle', message: '' },\n});\n\nconst createComplexConditionNodeData = (baseData) => ({\n  ...baseData,\n  conditions: [\n    {\n      id: uuidv4(),\n      variable: '',\n      operator: 'equals',\n      value: '',\n      connector: 'AND',\n    },\n  ],\n  outputs: ['Verdadero', 'Falso'],\n  defaultPath: 'Falso',\n  status: { state: 'idle', message: '' },\n});\n\nconst createPowerNodeData = (baseData, powerItemData) => {\n  if (powerItemData && powerItemData.id === 'advancedAiPower') {\n    return {\n      label: powerItemData.title || NODE_LABELS.ADVANCED_AI_NODE,\n      type: NODE_TYPES.ADVANCED_AI_NODE, // 'ai'\n      promptTemplate:\n        'Escribe tu prompt aquí. Usa {{variable}} para variables dinámicas.',\n      temperature: 0.7,\n      model: 'gpt-4',\n      maxTokens: 512,\n      systemMessage: 'Eres un asistente de IA útil y creativo.',\n      responseVariable: 'respuestaDelAI',\n      streaming: false,\n      isLoading: false,\n      error: undefined,\n      lastResponse: undefined,\n      interpolatedPromptPreview: '',\n      ultraMode: false,\n      powerId: powerItemData.id,\n    };\n  }\n  // Lógica para otros Power Nodes no-AI (que no sean el advancedAiPower)\n  return {\n    ...baseData, // Esto usará el label del powerItemData si no es nuestro AI Power\n    powerId: powerItemData?.id || '',\n    inputs: powerItemData?.inputs || [],\n    outputs: powerItemData?.outputs || [],\n    config: powerItemData?.config || {},\n  };\n};\n\n// --- Función principal ---\n\n// Función para obtener los datos iniciales de un nodo\nexport const getNodeInitialData = (nodeType, nodeLabel, powerItemData) => {\n  const baseData = {\n    label: nodeLabel || 'Nodo Desconocido',\n  };\n\n  const nodeDataBuilder = new Map([\n    [NODE_TYPES.HTTP_REQUEST_NODE, createHttpRequestNodeData],\n    [NODE_TYPES.WEBHOOK_NODE, createWebhookNodeData],\n    [NODE_TYPES.ADVANCED_AI_NODE, createAdvancedAINodeData],\n    [NODE_TYPES.AI_NODE_PRO, createAINodeProData],\n    [NODE_TYPES.DATABASE_NODE, createDatabaseNodeData],\n    [NODE_TYPES.AI_NODE, createAINodeData],\n    [NODE_TYPES.NLP_NODE, createNLPNodeData],\n    [NODE_TYPES.COMPLEX_CONDITION_NODE, createComplexConditionNodeData],\n    [NODE_TYPES.POWER_NODE, (data) => createPowerNodeData(data, powerItemData)],\n  ]);\n\n  if (nodeDataBuilder.has(nodeType)) {\n    const builder = nodeDataBuilder.get(nodeType);\n    return builder(baseData);\n  }\n\n  return baseData;\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-creation.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 30,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 30,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-validation.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 106,
        "column": 35,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 146,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// src/utils/nodeValidation.js\nimport { NODE_TYPES } from './node-config.js';\n\n// Definición de reglas de validación para cada tipo de nodo.\n// Deberás completar esto según la lógica de tu aplicación.\n// Ejemplos:\n// maxOutDegree: máximo de conexiones salientes\n// minInDegree: mínimo de conexiones entrantes\n// allowedOutgoingConnections: objeto/array definiendo a qué tipos de nodos se puede conectar\nexport const NODE_TYPES_VALIDATIONS = {\n  [NODE_TYPES.START_NODE]: {\n    maxOutDegree: 1,\n    maxInDegree: 0,\n    // allowedOutgoingConnections: [NODE_TYPES.MESSAGE_NODE, NODE_TYPES.DECISION_NODE], // Ejemplo\n  },\n  [NODE_TYPES.MESSAGE_NODE]: {\n    maxOutDegree: 1, // Usualmente un mensaje lleva a una sola cosa después\n    minInDegree: 1,\n  },\n  [NODE_TYPES.DECISION_NODE]: {\n    minOutDegree: 1, // Una decisión debe tener al menos una salida (o 2 para ser útil)\n    minInDegree: 1,\n  },\n  [NODE_TYPES.END_NODE]: {\n    maxOutDegree: 0,\n    minInDegree: 1,\n  },\n  [NODE_TYPES.KNOWLEDGE_BASE_NODE]: {\n    maxOutDegree: 1,\n    minInDegree: 1,\n  },\n  // Añade aquí validaciones para otros tipos de nodos que tengas (API_NODE, CONDITION_NODE, etc.)\n};\n\n/**\n * Valida un nodo individualmente o en el contexto de otros nodos y aristas.\n * @param {object} node El nodo a validar.\n * @param {array} nodes Array de todos los nodos en el flujo (opcional).\n * @param {array} edges Array de todas las aristas en el flujo (opcional).\n * @returns {object} Objeto con propiedades 'valid' y 'errors'.\n */\nconst checkDegreeConstraints = ({ node, rules, inDegree, outDegree }) => {\n  const errors = [];\n  const label = node.data.label || node.id;\n  const nodeInfo = `El nodo '${label}' (${node.type})`;\n\n  if (rules.maxOutDegree !== undefined && outDegree > rules.maxOutDegree) {\n    errors.push(\n      `${nodeInfo} excede el máximo de ${rules.maxOutDegree} conexiones de salida.`,\n    );\n  }\n  if (rules.minOutDegree !== undefined && outDegree < rules.minOutDegree) {\n    errors.push(\n      `${nodeInfo} requiere al menos ${rules.minOutDegree} conexiones de salida.`,\n    );\n  }\n  if (rules.maxInDegree !== undefined && inDegree > rules.maxInDegree) {\n    errors.push(\n      `${nodeInfo} excede el máximo de ${rules.maxInDegree} conexiones de entrada.`,\n    );\n  }\n  if (rules.minInDegree !== undefined && inDegree < rules.minInDegree) {\n    errors.push(\n      `${nodeInfo} requiere al menos ${rules.minInDegree} conexiones de entrada.`,\n    );\n  }\n\n  return errors;\n};\n\nexport const validateNode = (node, nodes = [], edges = []) => {\n  if (!node || !node.type) {\n    return { valid: false, errors: ['El nodo o su tipo no están definidos.'] };\n  }\n\n  const validationRules = NODE_TYPES_VALIDATIONS[node.type];\n  if (!validationRules) {\n    return { valid: true, errors: [] };\n  }\n\n  let errors = [];\n  if (nodes.length > 0 && edges.length > 0) {\n    const outDegree = edges.filter((edge) => edge.source === node.id).length;\n    const inDegree = edges.filter((edge) => edge.target === node.id).length;\n    errors = checkDegreeConstraints({\n      node,\n      rules: validationRules,\n      inDegree,\n      outDegree,\n    });\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n};\n\n/**\n * Valida si una conexión entre dos nodos es permitida.\n * @param {object} connection Objeto de conexión de React Flow.\n * @param {array} nodes Array de todos los nodos.\n * @param {array} edges Array de todas las aristas.\n * @returns {boolean} True si la conexión es válida.\n */\nexport const validateConnection = (connection, nodes, edges) => {\n  const sourceNode = nodes.find((n) => n.id === connection.source);\n  const targetNode = nodes.find((n) => n.id === connection.target);\n\n  if (!sourceNode || !targetNode) {\n    return false;\n  }\n\n  const sourceRules = NODE_TYPES_VALIDATIONS[sourceNode.type];\n  if (sourceRules) {\n    const outDegree = edges.filter(\n      (edge) => edge.source === sourceNode.id,\n    ).length;\n    const { maxOutDegree, allowedOutgoingConnections } = sourceRules;\n\n    if (maxOutDegree !== undefined && outDegree >= maxOutDegree) {\n      return false;\n    }\n\n    if (\n      allowedOutgoingConnections &&\n      !allowedOutgoingConnections.includes(targetNode.type)\n    ) {\n      return false;\n    }\n  }\n\n  const targetRules = NODE_TYPES_VALIDATIONS[targetNode.type];\n  if (targetRules) {\n    const inDegree = edges.filter(\n      (edge) => edge.target === targetNode.id,\n    ).length;\n    const { maxInDegree } = targetRules;\n\n    if (maxInDegree !== undefined && inDegree >= maxInDegree) {\n      return false;\n    }\n  }\n\n  return true; // Si pasa todas las validaciones\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/node-validators.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/object-sanitizer.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 27,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 27,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Generic Object Injection Sink",
        "line": 27,
        "column": 30,
        "nodeType": "MemberExpression",
        "endLine": 27,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/plubot-name-sync.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async arrow function has a complexity of 11. Maximum allowed is 10.",
        "line": 26,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 62,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Utilidad para sincronizar el nombre del Plubot entre el backend, localStorage y el editor\n */\n\nimport useFlowStore from '@/stores/use-flow-store';\n\nimport logger from '../services/loggerService';\n\n/**\n * Actualiza el nombre del flujo en el FlowStore\n * @param {string} name - Nombre a establecer\n */\nexport const updateFlowStoreName = (name) => {\n  if (!name) return;\n\n  const flowStore = useFlowStore.getState();\n  flowStore.setFlowName(name);\n  flowStore.forceUpdate = Date.now();\n};\n\n/**\n * Carga el nombre del Plubot desde el backend y lo sincroniza con FlowStore.\n * No devuelve ningún valor; su propósito es ejecutar un efecto secundario.\n * @param {string} plubotId - ID del Plubot a cargar\n */\nexport const loadPlubotName = async (plubotId) => {\n  if (!plubotId) {\n    return;\n  }\n\n  // Primero intentar obtener del localStorage (respuesta inmediata)\n  const localName = localStorage.getItem(`plubot-name-${plubotId}`);\n  if (localName) {\n    updateFlowStoreName(localName);\n    return;\n  }\n\n  try {\n    // Luego intentar obtener del backend (más actualizado)\n    const baseUrl = import.meta.env.VITE_API_URL || 'http://127.0.0.1:5000/api';\n    const response = await fetch(`${baseUrl}/plubots/${plubotId}`);\n    if (response.ok) {\n      const data = await response.json();\n      if (data?.status === 'success' && data?.plubot?.name) {\n        const backendName = data.plubot.name;\n\n        // Actualizar nombre en el FlowStore\n        updateFlowStoreName(backendName);\n\n        // Guardar en localStorage para futuros usos\n        localStorage.setItem(`plubot-name-${plubotId}`, backendName);\n        return;\n      }\n    }\n    throw new Error('No se pudo obtener el nombre del Plubot desde el backend');\n  } catch (error) {\n    logger.error(`Error al cargar el nombre para Plubot ${plubotId}:`, error);\n    // Usar nombre genérico en caso de error\n    const fallbackName = `Plubot ${plubotId}`;\n    updateFlowStoreName(fallbackName);\n  }\n};\n\n/**\n * Inicializa el nombre del Plubot en el editor\n * Se puede llamar desde cualquier componente\n * @param {string} plubotId - ID del Plubot\n */\nexport const initializePlubotName = (plubotId) => {\n  if (!plubotId) return;\n\n  // Programar carga asíncrona después de que el componente se monte\n  setTimeout(() => {\n    loadPlubotName(plubotId).catch((error) => {\n      logger.error(\n        `Error inicializando el nombre para Plubot ${plubotId}:`,\n        error,\n      );\n    });\n  }, 100);\n};\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/regex-utilities.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/resize-utilities.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/sentiment-analyzer.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/suggestion-providers.js",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (101). Maximum allowed is 80.",
        "line": 1,
        "column": 43,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 105,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export const nodeTypeSuggestionProvider = (context) => {\n  const { selectedNode, nodes } = context;\n  const suggestions = [];\n\n  if (!selectedNode) {\n    suggestions.push({\n      id: 'add-start-node',\n      description: 'Añadir un nodo de inicio para comenzar el flujo',\n      action: { type: 'ADD_NODE', payload: { type: 'start' } },\n      priority: 1,\n    });\n    return suggestions;\n  }\n\n  const nodeCount = nodes.length;\n  const nodeType = selectedNode.type;\n\n  switch (nodeType) {\n    case 'start': {\n      suggestions.push({\n        id: 'connect-to-message',\n        description:\n          'Conectar a un nodo de mensaje para definir el flujo inicial',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'message', source: selectedNode.id },\n        },\n        priority: 2,\n      });\n      break;\n    }\n    case 'message': {\n      suggestions.push({\n        id: 'add-decision',\n        description: 'Añadir un nodo de decisión para ramificar el flujo',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'decision', source: selectedNode.id },\n        },\n        priority: 2,\n      });\n      if (nodeCount < 10) {\n        suggestions.push({\n          id: 'add-action',\n          description: 'Añadir un nodo de acción para realizar una tarea',\n          action: {\n            type: 'ADD_NODE',\n            payload: { type: 'action', source: selectedNode.id },\n          },\n          priority: 1,\n        });\n      }\n      break;\n    }\n    case 'decision': {\n      suggestions.push({\n        id: 'add-option',\n        description: 'Añadir un nodo de opción para definir una rama',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'option', source: selectedNode.id },\n        },\n        priority: 2,\n      });\n      break;\n    }\n    case 'option': {\n      suggestions.push({\n        id: 'connect-to-action',\n        description: 'Conectar a un nodo de acción para continuar el flujo',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'action', source: selectedNode.id },\n        },\n        priority: 2,\n      });\n      break;\n    }\n    case 'action': {\n      suggestions.push({\n        id: 'connect-to-end',\n        description: 'Conectar a un nodo de fin para completar el flujo',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'end', source: selectedNode.id },\n        },\n        priority: 2,\n      });\n      break;\n    }\n    default: {\n      suggestions.push({\n        id: 'generic-connect',\n        description: 'Conectar a un nuevo nodo para extender el flujo',\n        action: {\n          type: 'ADD_NODE',\n          payload: { type: 'message', source: selectedNode.id },\n        },\n        priority: 1,\n      });\n    }\n  }\n\n  return suggestions;\n};\n\n// Registrar el proveedor automáticamente\nimport { registerSuggestionProvider } from './suggestion-registry';\n\nregisterSuggestionProvider(nodeTypeSuggestionProvider);\n",
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/utils/suggestion-registry.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/src/workers/generic.worker.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 2,
        "message": "Function Call Object Injection Sink",
        "line": 32,
        "column": 22,
        "nodeType": "MemberExpression",
        "endLine": 32,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      { "ruleId": "sonarjs/updated-loop-counter", "replacedBy": [] },
      {
        "ruleId": "no-new-object",
        "replacedBy": ["no-object-constructor"],
        "info": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/vite.aliases.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/luz/Desktop/Plubot/plubot-frontend/vite.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
